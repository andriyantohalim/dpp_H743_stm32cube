
dpp_H743_stm32cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f20  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080061c0  080061c0  000071c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080063c8  080063c8  000073c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080063cc  080063cc  000073cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000028  24000000  080063d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002684  24000028  080063f8  00008028  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240026ac  080063f8  000086ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011c9f  00000000  00000000  00008056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b0b  00000000  00000000  00019cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bd8  00000000  00000000  0001d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000008ec  00000000  00000000  0001e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000379b8  00000000  00000000  0001ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f754  00000000  00000000  0005667c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00162324  00000000  00000000  00065dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c80f4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002da0  00000000  00000000  001c8138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006e  00000000  00000000  001caed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000028 	.word	0x24000028
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080061a8 	.word	0x080061a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400002c 	.word	0x2400002c
 80002dc:	080061a8 	.word	0x080061a8

080002e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f003 0307 	and.w	r3, r3, #7
 80002ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <__NVIC_SetPriorityGrouping+0x40>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002f6:	68ba      	ldr	r2, [r7, #8]
 80002f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002fc:	4013      	ands	r3, r2
 80002fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <__NVIC_SetPriorityGrouping+0x44>)
 800030a:	4313      	orrs	r3, r2
 800030c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030e:	4a04      	ldr	r2, [pc, #16]	@ (8000320 <__NVIC_SetPriorityGrouping+0x40>)
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	60d3      	str	r3, [r2, #12]
}
 8000314:	bf00      	nop
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	05fa0000 	.word	0x05fa0000

08000328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000336:	2b00      	cmp	r3, #0
 8000338:	db0b      	blt.n	8000352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800033a:	88fb      	ldrh	r3, [r7, #6]
 800033c:	f003 021f 	and.w	r2, r3, #31
 8000340:	4907      	ldr	r1, [pc, #28]	@ (8000360 <__NVIC_EnableIRQ+0x38>)
 8000342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000346:	095b      	lsrs	r3, r3, #5
 8000348:	2001      	movs	r0, #1
 800034a:	fa00 f202 	lsl.w	r2, r0, r2
 800034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000e100 	.word	0xe000e100

08000364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	6039      	str	r1, [r7, #0]
 800036e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000374:	2b00      	cmp	r3, #0
 8000376:	db0a      	blt.n	800038e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	b2da      	uxtb	r2, r3
 800037c:	490c      	ldr	r1, [pc, #48]	@ (80003b0 <__NVIC_SetPriority+0x4c>)
 800037e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000382:	0112      	lsls	r2, r2, #4
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	440b      	add	r3, r1
 8000388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800038c:	e00a      	b.n	80003a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4908      	ldr	r1, [pc, #32]	@ (80003b4 <__NVIC_SetPriority+0x50>)
 8000394:	88fb      	ldrh	r3, [r7, #6]
 8000396:	f003 030f 	and.w	r3, r3, #15
 800039a:	3b04      	subs	r3, #4
 800039c:	0112      	lsls	r2, r2, #4
 800039e:	b2d2      	uxtb	r2, r2
 80003a0:	440b      	add	r3, r1
 80003a2:	761a      	strb	r2, [r3, #24]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	e000e100 	.word	0xe000e100
 80003b4:	e000ed00 	.word	0xe000ed00

080003b8 <Q_onError>:
#endif

//============================================================================
// Error handler

Q_NORETURN Q_onError(char const * const module, int_t const id) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(id);
    QS_ASSERTION(module, id, 10000U); // report assertion to QS

#ifndef NDEBUG
    // light up LED
    BSP_LED_On(LED1);
 80003c2:	2000      	movs	r0, #0
 80003c4:	f001 fa50 	bl	8001868 <BSP_LED_On>
    // for debugging, hang on in an endless loop...
    for (;;) {
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <Q_onError+0x10>

080003cc <assert_failed>:
    }
#endif
}
//............................................................................
void assert_failed(char const * const module, int_t const id); // prototype
void assert_failed(char const * const module, int_t const id) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
    Q_onError(module, id);
 80003d6:	6839      	ldr	r1, [r7, #0]
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f7ff ffed 	bl	80003b8 <Q_onError>
	...

080003e0 <EXTI0_IRQHandler>:
}

// ISRs used in the application ==============================================
// NOTE: only the "FromISR" API variants are allowed in the ISRs!
void EXTI0_IRQHandler(void); // prototype
void EXTI0_IRQHandler(void) {
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]

    // for testing...
    QACTIVE_POST_FROM_ISR(AO_Table,
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <EXTI0_IRQHandler+0x4c>)
 80003ec:	681c      	ldr	r4, [r3, #0]
 80003ee:	2209      	movs	r2, #9
 80003f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80003f4:	2004      	movs	r0, #4
 80003f6:	f004 f9f1 	bl	80047dc <QF_newXFromISR_>
 80003fa:	4601      	mov	r1, r0
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	9200      	str	r2, [sp, #0]
 8000402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000406:	4620      	mov	r0, r4
 8000408:	f003 ff4a 	bl	80042a0 <QActive_postFromISR_>
        Q_NEW_FROM_ISR(QEvt, MAX_PUB_SIG),
        &xHigherPriorityTaskWoken,
        &l_EXTI0_IRQHandler);

    // the usual end of FreeRTOS ISR...
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d007      	beq.n	8000422 <EXTI0_IRQHandler+0x42>
 8000412:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <EXTI0_IRQHandler+0x50>)
 8000414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	f3bf 8f4f 	dsb	sy
 800041e:	f3bf 8f6f 	isb	sy
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bd90      	pop	{r4, r7, pc}
 800042a:	bf00      	nop
 800042c:	08006348 	.word	0x08006348
 8000430:	e000ed04 	.word	0xe000ed04

08000434 <vApplicationTickHook>:
#endif

// Application hooks used in this project ====================================
// NOTE: only the "FromISR" API variants are allowed in vApplicationTickHook

void vApplicationTickHook(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]

    // process time events at rate 0
    QTIMEEVT_TICK_FROM_ISR(0U, &xHigherPriorityTaskWoken, &l_TickHook);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2200      	movs	r2, #0
 8000442:	4619      	mov	r1, r3
 8000444:	2000      	movs	r0, #0
 8000446:	f004 f895 	bl	8004574 <QTimeEvt_tickFromISR_>
    static struct {
        uint32_t depressed;
        uint32_t previous;
    } buttons = { 0U, 0U };

    uint32_t current = BSP_PB_GetState(BUTTONn); // read the Key button
 800044a:	2001      	movs	r0, #1
 800044c:	f001 fad2 	bl	80019f4 <BSP_PB_GetState>
 8000450:	4603      	mov	r3, r0
 8000452:	60fb      	str	r3, [r7, #12]
    uint32_t tmp = buttons.depressed; // save debounced depressed buttons
 8000454:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <vApplicationTickHook+0xa4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	60bb      	str	r3, [r7, #8]
    buttons.depressed |= (buttons.previous & current); // set depressed
 800045a:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <vApplicationTickHook+0xa4>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4b1e      	ldr	r3, [pc, #120]	@ (80004d8 <vApplicationTickHook+0xa4>)
 8000460:	6859      	ldr	r1, [r3, #4]
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	400b      	ands	r3, r1
 8000466:	4313      	orrs	r3, r2
 8000468:	4a1b      	ldr	r2, [pc, #108]	@ (80004d8 <vApplicationTickHook+0xa4>)
 800046a:	6013      	str	r3, [r2, #0]
    buttons.depressed &= (buttons.previous | current); // clear released
 800046c:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <vApplicationTickHook+0xa4>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <vApplicationTickHook+0xa4>)
 8000472:	6859      	ldr	r1, [r3, #4]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	430b      	orrs	r3, r1
 8000478:	4013      	ands	r3, r2
 800047a:	4a17      	ldr	r2, [pc, #92]	@ (80004d8 <vApplicationTickHook+0xa4>)
 800047c:	6013      	str	r3, [r2, #0]
    buttons.previous   = current; // update the history
 800047e:	4a16      	ldr	r2, [pc, #88]	@ (80004d8 <vApplicationTickHook+0xa4>)
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	6053      	str	r3, [r2, #4]
    tmp ^= buttons.depressed;     // changed debounced depressed
 8000484:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <vApplicationTickHook+0xa4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	4053      	eors	r3, r2
 800048c:	60bb      	str	r3, [r7, #8]
    current = buttons.depressed;
 800048e:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <vApplicationTickHook+0xa4>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	60fb      	str	r3, [r7, #12]

    if (tmp != 0U) {  // debounced Key button state changed?
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d00f      	beq.n	80004ba <vApplicationTickHook+0x86>
        if (current != 0U) { // is PB0 depressed?
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d006      	beq.n	80004ae <vApplicationTickHook+0x7a>
            static QEvt const pauseEvt = QEVT_INITIALIZER(PAUSE_SIG);
            QACTIVE_PUBLISH_FROM_ISR(&pauseEvt,
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	4619      	mov	r1, r3
 80004a6:	480d      	ldr	r0, [pc, #52]	@ (80004dc <vApplicationTickHook+0xa8>)
 80004a8:	f003 ff9c 	bl	80043e4 <QActive_publishFromISR_>
 80004ac:	e005      	b.n	80004ba <vApplicationTickHook+0x86>
                                &xHigherPriorityTaskWoken,
                                &l_TickHook);
        }
        else { // the button is released
            static QEvt const serveEvt = QEVT_INITIALIZER(SERVE_SIG);
            QACTIVE_PUBLISH_FROM_ISR(&serveEvt,
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	480a      	ldr	r0, [pc, #40]	@ (80004e0 <vApplicationTickHook+0xac>)
 80004b6:	f003 ff95 	bl	80043e4 <QActive_publishFromISR_>
    tmp = SysTick->CTRL; // clear SysTick_CTRL_COUNTFLAG
    QS_tickTime_ += QS_tickPeriod_; // account for the clock rollover
#endif

    // notify FreeRTOS to perform context switch from ISR, if needed
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d007      	beq.n	80004d0 <vApplicationTickHook+0x9c>
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <vApplicationTickHook+0xb0>)
 80004c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	f3bf 8f4f 	dsb	sy
 80004cc:	f3bf 8f6f 	isb	sy
}
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	24000048 	.word	0x24000048
 80004dc:	080062f4 	.word	0x080062f4
 80004e0:	080062f8 	.word	0x080062f8
 80004e4:	e000ed04 	.word	0xe000ed04

080004e8 <vApplicationIdleHook>:
//............................................................................
void vApplicationIdleHook(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004ee:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80004f2:	b672      	cpsid	i
 80004f4:	f383 8811 	msr	BASEPRI, r3
 80004f8:	f3bf 8f6f 	isb	sy
 80004fc:	f3bf 8f4f 	dsb	sy
 8000500:	b662      	cpsie	i
 8000502:	60bb      	str	r3, [r7, #8]
            "   isb                                                     \n"\
            "   dsb                                                     \n"\
            "   cpsie i                                                 \n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000504:	bf00      	nop
    // toggle the User LED on and then off, see NOTE01
    QF_INT_DISABLE();
    BSP_LED_On (LED3);
 8000506:	2002      	movs	r0, #2
 8000508:	f001 f9ae 	bl	8001868 <BSP_LED_On>
    BSP_LED_Off(LED3);
 800050c:	2002      	movs	r0, #2
 800050e:	f001 f9d5 	bl	80018bc <BSP_LED_Off>
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	f383 8811 	msr	BASEPRI, r3
        (
            "   msr basepri, %0 "::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800051c:	bf00      	nop
    QF_INT_ENABLE();

    // Some floating point code is to exercise the VFP...
    double volatile x = 1.73205;
 800051e:	a308      	add	r3, pc, #32	@ (adr r3, 8000540 <vApplicationIdleHook+0x58>)
 8000520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000524:	e9c7 2300 	strd	r2, r3, [r7]
    x = x * 1.73205;
 8000528:	ed97 7b00 	vldr	d7, [r7]
 800052c:	ed9f 6b04 	vldr	d6, [pc, #16]	@ 8000540 <vApplicationIdleHook+0x58>
 8000530:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000534:	ed87 7b00 	vstr	d7, [r7]
    // The trick with BOOT(0) is it gets the part to run the System Loader
    // instead of your broken code. When done disconnect BOOT0, and start over.
    //
    //__WFI(); // Wait-For-Interrupt
#endif
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	0f9096bc 	.word	0x0f9096bc
 8000544:	3ffbb67a 	.word	0x3ffbb67a

08000548 <vApplicationStackOverflowHook>:
//............................................................................
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
    (void)xTask;
    (void)pcTaskName;
    Q_ERROR();
 8000552:	f003 fad9 	bl	8003b08 <vPortEnterCritical>
 8000556:	21e2      	movs	r1, #226	@ 0xe2
 8000558:	4801      	ldr	r0, [pc, #4]	@ (8000560 <vApplicationStackOverflowHook+0x18>)
 800055a:	f7ff ff2d 	bl	80003b8 <Q_onError>
 800055e:	bf00      	nop
 8000560:	080062e0 	.word	0x080062e0

08000564 <vApplicationGetIdleTaskMemory>:
// provide an implementation of vApplicationGetIdleTaskMemory() to provide
// the memory that is used by the Idle task.
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    // Pass out a pointer to the StaticTask_t structure in which the
    // Idle task's state will be stored.
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <vApplicationGetIdleTaskMemory+0x2c>)
 8000574:	601a      	str	r2, [r3, #0]

    // Pass out the array that will be used as the Idle task's stack.
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <vApplicationGetIdleTaskMemory+0x30>)
 800057a:	601a      	str	r2, [r3, #0]

    // Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    // Note that, as the array is necessarily of type StackType_t,
    // configMINIMAL_STACK_SIZE is specified in words, not bytes.
    //
    *pulIdleTaskStackSize = Q_DIM(uxIdleTaskStack);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	24000050 	.word	0x24000050
 8000594:	2400009c 	.word	0x2400009c

08000598 <BSP_init>:

// BSP functions =============================================================

//............................................................................
void BSP_init(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
    // Configure the MPU to prevent NULL-pointer dereferencing ...
    MPU->RBAR = 0x0U                          // base address (NULL)
 800059e:	4b47      	ldr	r3, [pc, #284]	@ (80006bc <BSP_init+0x124>)
 80005a0:	2217      	movs	r2, #23
 80005a2:	60da      	str	r2, [r3, #12]
                | MPU_RBAR_VALID_Msk          // valid region
                | (MPU_RBAR_REGION_Msk & 7U); // region #7
    MPU->RASR = (7U << MPU_RASR_SIZE_Pos)     // 2^(7+1) region
 80005a4:	4b45      	ldr	r3, [pc, #276]	@ (80006bc <BSP_init+0x124>)
 80005a6:	220f      	movs	r2, #15
 80005a8:	611a      	str	r2, [r3, #16]
                | (0x0U << MPU_RASR_AP_Pos)   // no-access region
                | MPU_RASR_ENABLE_Msk;        // region enable
    MPU->CTRL = MPU_CTRL_PRIVDEFENA_Msk       // enable background region
 80005aa:	4b44      	ldr	r3, [pc, #272]	@ (80006bc <BSP_init+0x124>)
 80005ac:	2205      	movs	r2, #5
 80005ae:	605a      	str	r2, [r3, #4]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80005b0:	f3bf 8f6f 	isb	sy
}
 80005b4:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
}
 80005ba:	bf00      	nop
                | MPU_CTRL_ENABLE_Msk;        // enable the MPU
    __ISB();
    __DSB();

    // enable the MemManage_Handler for MPU exception
    SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80005bc:	4b40      	ldr	r3, [pc, #256]	@ (80006c0 <BSP_init+0x128>)
 80005be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c0:	4a3f      	ldr	r2, [pc, #252]	@ (80006c0 <BSP_init+0x128>)
 80005c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005c6:	6253      	str	r3, [r2, #36]	@ 0x24

    // NOTE: SystemInit() has been already called from the startup code
    // but SystemCoreClock needs to be updated
    SystemCoreClockUpdate();
 80005c8:	f000 fbd0 	bl	8000d6c <SystemCoreClockUpdate>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005cc:	4b3c      	ldr	r3, [pc, #240]	@ (80006c0 <BSP_init+0x128>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d11b      	bne.n	8000610 <BSP_init+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e4:	4b36      	ldr	r3, [pc, #216]	@ (80006c0 <BSP_init+0x128>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
}
 80005f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f2:	f3bf 8f6f 	isb	sy
}
 80005f6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005f8:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <BSP_init+0x128>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a30      	ldr	r2, [pc, #192]	@ (80006c0 <BSP_init+0x128>)
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000602:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000604:	f3bf 8f4f 	dsb	sy
}
 8000608:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060a:	f3bf 8f6f 	isb	sy
}
 800060e:	e000      	b.n	8000612 <BSP_init+0x7a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000610:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <BSP_init+0x128>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d138      	bne.n	8000690 <BSP_init+0xf8>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800061e:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <BSP_init+0x128>)
 8000620:	2200      	movs	r2, #0
 8000622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000626:	f3bf 8f4f 	dsb	sy
}
 800062a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <BSP_init+0x128>)
 800062e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000632:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	0b5b      	lsrs	r3, r3, #13
 8000638:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800063c:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000646:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	015a      	lsls	r2, r3, #5
 800064c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000650:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000656:	491a      	ldr	r1, [pc, #104]	@ (80006c0 <BSP_init+0x128>)
 8000658:	4313      	orrs	r3, r2
 800065a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	1e5a      	subs	r2, r3, #1
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1ef      	bne.n	8000648 <BSP_init+0xb0>
    } while(sets-- != 0U);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1e5      	bne.n	800063e <BSP_init+0xa6>
  __ASM volatile ("dsb 0xF":::"memory");
 8000672:	f3bf 8f4f 	dsb	sy
}
 8000676:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <BSP_init+0x128>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <BSP_init+0x128>)
 800067e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000682:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000684:	f3bf 8f4f 	dsb	sy
}
 8000688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800068a:	f3bf 8f6f 	isb	sy
}
 800068e:	e000      	b.n	8000692 <BSP_init+0xfa>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000690:	bf00      	nop
#if (ART_ACCLERATOR_ENABLE != 0)
    __HAL_FLASH_ART_ENABLE();
#endif // ART_ACCLERATOR_ENABLE

    // Configure the LEDs
    BSP_LED_Init(LED1);
 8000692:	2000      	movs	r0, #0
 8000694:	f001 f872 	bl	800177c <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8000698:	2001      	movs	r0, #1
 800069a:	f001 f86f 	bl	800177c <BSP_LED_Init>
    BSP_LED_Init(LED3);
 800069e:	2002      	movs	r0, #2
 80006a0:	f001 f86c 	bl	800177c <BSP_LED_Init>

    // configure the User Button in GPIO Mode
    BSP_PB_Init(BUTTONn, BUTTON_MODE_GPIO);
 80006a4:	2100      	movs	r1, #0
 80006a6:	2001      	movs	r0, #1
 80006a8:	f001 f932 	bl	8001910 <BSP_PB_Init>

    BSP_randomSeed(1234U);
 80006ac:	f240 40d2 	movw	r0, #1234	@ 0x4d2
 80006b0:	f000 f8a2 	bl	80007f8 <BSP_randomSeed>
    QS_ONLY(produce_sig_dict());

    // setup the QS filters...
    QS_GLB_FILTER(QS_ALL_RECORDS);   // all records
    QS_GLB_FILTER(-QS_QF_TICK);      // exclude the clock tick
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	e000ed90 	.word	0xe000ed90
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <BSP_start>:
//............................................................................
void BSP_start(void) {
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af04      	add	r7, sp, #16
    // initialize event pools
    static QF_MPOOL_EL(TableEvt) smlPoolSto[2*N_PHILO]; // small pool
    QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 80006ca:	2208      	movs	r2, #8
 80006cc:	2150      	movs	r1, #80	@ 0x50
 80006ce:	482c      	ldr	r0, [pc, #176]	@ (8000780 <BSP_start+0xbc>)
 80006d0:	f004 fe7c 	bl	80053cc <QF_poolInit>

    // initialize publish-subscribe
    static QSubscrList subscrSto[MAX_PUB_SIG];
    QActive_psInit(subscrSto, Q_DIM(subscrSto));
 80006d4:	2109      	movs	r1, #9
 80006d6:	482b      	ldr	r0, [pc, #172]	@ (8000784 <BSP_start+0xc0>)
 80006d8:	f005 f9c8 	bl	8005a6c <QActive_psInit>

    // start the active objects/threads...
    static QEvtPtr philoQueueSto[N_PHILO][N_PHILO];
    static StackType_t philoStack[N_PHILO][configMINIMAL_STACK_SIZE];
    for (uint8_t n = 0U; n < N_PHILO; ++n) {
 80006dc:	2300      	movs	r3, #0
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	e02e      	b.n	8000740 <BSP_start+0x7c>
        Philo_ctor(n); // instantiate all Philosopher active objects
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f927 	bl	8000938 <Philo_ctor>
        QActive_setAttr(AO_Philo[n], TASK_NAME_ATTR, "Philo");
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4a26      	ldr	r2, [pc, #152]	@ (8000788 <BSP_start+0xc4>)
 80006ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f2:	4a26      	ldr	r2, [pc, #152]	@ (800078c <BSP_start+0xc8>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 fd32 	bl	8004160 <QActive_setAttr>
        QActive_start(AO_Philo[n],  // AO to start
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <BSP_start+0xc4>)
 8000700:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
            Q_PRIO(n + 3U, 3U),      // QP prio., FreeRTOS prio.
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	b29b      	uxth	r3, r3
 8000708:	3303      	adds	r3, #3
 800070a:	b29b      	uxth	r3, r3
        QActive_start(AO_Philo[n],  // AO to start
 800070c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000710:	b299      	uxth	r1, r3
            philoQueueSto[n],        // event queue storage
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <BSP_start+0xcc>)
 800071e:	441a      	add	r2, r3
            Q_DIM(philoQueueSto[n]), // queue length [events]
            philoStack[n],           // stack storage
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	029b      	lsls	r3, r3, #10
 8000724:	4c1b      	ldr	r4, [pc, #108]	@ (8000794 <BSP_start+0xd0>)
 8000726:	4423      	add	r3, r4
        QActive_start(AO_Philo[n],  // AO to start
 8000728:	2400      	movs	r4, #0
 800072a:	9402      	str	r4, [sp, #8]
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	9401      	str	r4, [sp, #4]
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2305      	movs	r3, #5
 8000736:	f003 fc93 	bl	8004060 <QActive_start>
    for (uint8_t n = 0U; n < N_PHILO; ++n) {
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3301      	adds	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b04      	cmp	r3, #4
 8000744:	d9cd      	bls.n	80006e2 <BSP_start+0x1e>
            (QEvt *)0);              // initialization event (not used)
    }

    static QEvtPtr tableQueueSto[N_PHILO];
    static StackType_t tableStack[configMINIMAL_STACK_SIZE];
    Table_ctor(); // instantiate the Table active object
 8000746:	f000 fce7 	bl	8001118 <Table_ctor>
    QActive_setAttr(AO_Table, TASK_NAME_ATTR, "Table");
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <BSP_start+0xd4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a13      	ldr	r2, [pc, #76]	@ (800079c <BSP_start+0xd8>)
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fd04 	bl	8004160 <QActive_setAttr>
    QActive_start(AO_Table,         // AO to start
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <BSP_start+0xd4>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <BSP_start+0xdc>)
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2305      	movs	r3, #5
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <BSP_start+0xe0>)
 800076e:	f240 710c 	movw	r1, #1804	@ 0x70c
 8000772:	f003 fc75 	bl	8004060 <QActive_start>
        tableQueueSto,               // event queue storage
        Q_DIM(tableQueueSto),        // queue length [events]
        tableStack,                  // stack storage
        sizeof(tableStack),          // stack size [bytes]
        (QEvt *)0);                  // initialization event (not used)
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bd90      	pop	{r4, r7, pc}
 800077e:	bf00      	nop
 8000780:	2400049c 	.word	0x2400049c
 8000784:	240004ec 	.word	0x240004ec
 8000788:	08006310 	.word	0x08006310
 800078c:	080061c0 	.word	0x080061c0
 8000790:	24000534 	.word	0x24000534
 8000794:	24000598 	.word	0x24000598
 8000798:	08006348 	.word	0x08006348
 800079c:	080061c8 	.word	0x080061c8
 80007a0:	240019ac 	.word	0x240019ac
 80007a4:	24001998 	.word	0x24001998

080007a8 <BSP_displayPhilStat>:
//............................................................................
void BSP_displayPhilStat(uint8_t n, char const *stat) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
    Q_UNUSED_PAR(n);

    if (stat[0] == 'e') {
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b65      	cmp	r3, #101	@ 0x65
 80007ba:	d103      	bne.n	80007c4 <BSP_displayPhilStat+0x1c>
        BSP_LED_On(LED1);
 80007bc:	2000      	movs	r0, #0
 80007be:	f001 f853 	bl	8001868 <BSP_LED_On>
    // app-specific trace record...
    QS_BEGIN_ID(PHILO_STAT, AO_Table->prio)
        QS_U8(1, n);  // Philosopher number
        QS_STR(stat); // Philosopher status
    QS_END()
}
 80007c2:	e002      	b.n	80007ca <BSP_displayPhilStat+0x22>
        BSP_LED_Off(LED1);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 f879 	bl	80018bc <BSP_LED_Off>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <BSP_displayPaused>:
//............................................................................
void BSP_displayPaused(uint8_t const paused) {
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
    if (paused != 0U) {
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <BSP_displayPaused+0x18>
        BSP_LED_On(LED2);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f001 f840 	bl	8001868 <BSP_LED_On>

    // application-specific trace record
    QS_BEGIN_ID(PAUSED_STAT, AO_Table->prio)
        QS_U8(1, paused);  // Paused status
    QS_END()
}
 80007e8:	e002      	b.n	80007f0 <BSP_displayPaused+0x1e>
        BSP_LED_Off(LED2);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f001 f866 	bl	80018bc <BSP_LED_Off>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <BSP_randomSeed>:
//............................................................................
void BSP_randomSeed(uint32_t const seed) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    l_rndSeed = seed;
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <BSP_randomSeed+0x1c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	24000044 	.word	0x24000044

08000818 <BSP_random>:
//............................................................................
uint32_t BSP_random(void) { // a very cheap pseudo-random-number generator
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
    // Some floating point code is to exercise the VFP...
    double volatile x = 3.1415926;
 800081e:	a314      	add	r3, pc, #80	@ (adr r3, 8000870 <BSP_random+0x58>)
 8000820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000824:	e9c7 2300 	strd	r2, r3, [r7]
    x = x + 2.7182818;
 8000828:	ed97 7b00 	vldr	d7, [r7]
 800082c:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8000860 <BSP_random+0x48>
 8000830:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000834:	ed87 7b00 	vstr	d7, [r7]

    vTaskSuspendAll(); // lock FreeRTOS scheduler
 8000838:	f002 fa80 	bl	8002d3c <vTaskSuspendAll>
    // "Super-Duper" Linear Congruential Generator (LCG)
    // LCG(2^32, 3*7*11*13*23, 0, seed)
    //
    uint32_t rnd = l_rndSeed * (3U*7U*11U*13U*23U);
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <BSP_random+0x50>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <BSP_random+0x54>)
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	60fb      	str	r3, [r7, #12]
    l_rndSeed = rnd; // set for the next time
 8000848:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <BSP_random+0x50>)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6013      	str	r3, [r2, #0]
    xTaskResumeAll(); // unlock the FreeRTOS scheduler
 800084e:	f002 fa83 	bl	8002d58 <xTaskResumeAll>

    return (rnd >> 8);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	0a1b      	lsrs	r3, r3, #8
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	87427f01 	.word	0x87427f01
 8000864:	4005bf0a 	.word	0x4005bf0a
 8000868:	24000044 	.word	0x24000044
 800086c:	00010dcd 	.word	0x00010dcd
 8000870:	4d12d84a 	.word	0x4d12d84a
 8000874:	400921fb 	.word	0x400921fb

08000878 <QF_onStartup>:

//============================================================================

// QF callbacks --------------------------------------------------------------

void QF_onStartup(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    // set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate
    //SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC); // done in FreeRTOS

    // assign all priority bits for preemption-prio. and none to sub-prio.
    NVIC_SetPriorityGrouping(0U);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff fd2f 	bl	80002e0 <__NVIC_SetPriorityGrouping>

    // set priorities of ALL ISRs used in the system, see NOTE1
    NVIC_SetPriority(USART3_IRQn,    0U); // kernel unaware interrupt
 8000882:	2100      	movs	r1, #0
 8000884:	2027      	movs	r0, #39	@ 0x27
 8000886:	f7ff fd6d 	bl	8000364 <__NVIC_SetPriority>
    NVIC_SetPriority(EXTI0_IRQn,     RTOS_AWARE_ISR_CMSIS_PRI + 0U);
 800088a:	2104      	movs	r1, #4
 800088c:	2006      	movs	r0, #6
 800088e:	f7ff fd69 	bl	8000364 <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn,   RTOS_AWARE_ISR_CMSIS_PRI + 1U);
 8000892:	2105      	movs	r1, #5
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f7ff fd64 	bl	8000364 <__NVIC_SetPriority>
    // ...

    // enable IRQs...
    NVIC_EnableIRQ(EXTI0_IRQn);
 800089c:	2006      	movs	r0, #6
 800089e:	f7ff fd43 	bl	8000328 <__NVIC_EnableIRQ>

#ifdef Q_SPY
    NVIC_EnableIRQ(USART3_IRQn); // UART3 interrupt used for QS-RX
#endif
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <main>:
#include "qpc.h"     // QP/C real-time embedded framework
#include "dpp.h"     // DPP Application interface
#include "bsp.h"     // Board Support Package

//............................................................................
int main() {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
    QF_init();       // initialize the framework and the underlying RT kernel
 80008aa:	f003 fba3 	bl	8003ff4 <QF_init>
    BSP_init();      // initialize the BSP
 80008ae:	f7ff fe73 	bl	8000598 <BSP_init>
    BSP_start();     // start the AOs/Threads
 80008b2:	f7ff ff07 	bl	80006c4 <BSP_start>
    return QF_run(); // run the QF application
 80008b6:	f003 fbaf 	bl	8004018 <QF_run>
 80008ba:	4603      	mov	r3, r0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	bd80      	pop	{r7, pc}

080008c0 <TableEvt_init>:
} TableEvt;

// public:
static inline TableEvt * TableEvt_init(TableEvt * const me,
    uint8_t id)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
    if (me != (TableEvt *)0) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <TableEvt_init+0x18>
        me->philoId = id;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	78fa      	ldrb	r2, [r7, #3]
 80008d6:	711a      	strb	r2, [r3, #4]
    }
    return me;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <think_time>:
//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

// helper function to provide a randomized think time for Philos
static QTimeEvtCtr think_time(void); // prototype
static inline QTimeEvtCtr think_time(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    return (QTimeEvtCtr)((BSP_random() % BSP_TICKS_PER_SEC)
 80008ec:	f7ff ff94 	bl	8000818 <BSP_random>
 80008f0:	4602      	mov	r2, r0
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <think_time+0x24>)
 80008f4:	fba3 1302 	umull	r1, r3, r3, r2
 80008f8:	099b      	lsrs	r3, r3, #6
 80008fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008fe:	fb01 f303 	mul.w	r3, r1, r3
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
                                       + (BSP_TICKS_PER_SEC/2U));
}
 8000908:	4618      	mov	r0, r3
 800090a:	bd80      	pop	{r7, pc}
 800090c:	10624dd3 	.word	0x10624dd3

08000910 <eat_time>:

// helper function to provide a randomized eat time for Philos
static QTimeEvtCtr eat_time(void); // prototype
static inline QTimeEvtCtr eat_time(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    return (QTimeEvtCtr)((BSP_random() % BSP_TICKS_PER_SEC)
 8000914:	f7ff ff80 	bl	8000818 <BSP_random>
 8000918:	4602      	mov	r2, r0
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <eat_time+0x24>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	099b      	lsrs	r3, r3, #6
 8000922:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000926:	fb01 f303 	mul.w	r3, r1, r3
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
                                       + BSP_TICKS_PER_SEC);
}
 8000930:	4618      	mov	r0, r3
 8000932:	bd80      	pop	{r7, pc}
 8000934:	10624dd3 	.word	0x10624dd3

08000938 <Philo_ctor>:
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::Philo_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Shared::Philo_ctor} ......................................................
void Philo_ctor(uint_fast8_t const id) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    Philo * const me = &Philo_inst[id];
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	22d0      	movs	r2, #208	@ 0xd0
 8000944:	fb02 f303 	mul.w	r3, r2, r3
 8000948:	4a0c      	ldr	r2, [pc, #48]	@ (800097c <Philo_ctor+0x44>)
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
    QActive_ctor(&me->super, Q_STATE_CAST(&Philo_initial));
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	490b      	ldr	r1, [pc, #44]	@ (8000980 <Philo_ctor+0x48>)
 8000952:	4618      	mov	r0, r3
 8000954:	f005 f9d2 	bl	8005cfc <QActive_ctor>
    QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 800095e:	68f9      	ldr	r1, [r7, #12]
 8000960:	2300      	movs	r3, #0
 8000962:	220a      	movs	r2, #10
 8000964:	f005 faa0 	bl	8005ea8 <QTimeEvt_ctorX>
    me->id = (uint8_t)id;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	24001dac 	.word	0x24001dac
 8000980:	08000985 	.word	0x08000985

08000984 <Philo_initial>:

//${AOs::Philo} ..............................................................
Philo Philo_inst[N_PHILO];

//${AOs::Philo::SM} ..........................................................
static QState Philo_initial(Philo * const me, void const * const par) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(par);

    QS_OBJ_ARR_DICTIONARY(&Philo_inst[me->id], me->id);
    QS_OBJ_ARR_DICTIONARY(&Philo_inst[me->id].timeEvt, me->id);

    QActive_subscribe(&me->super, EAT_SIG);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2104      	movs	r1, #4
 8000992:	4618      	mov	r0, r3
 8000994:	f005 f950 	bl	8005c38 <QActive_subscribe>
    QActive_subscribe(&me->super, TEST_SIG);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2108      	movs	r1, #8
 800099c:	4618      	mov	r0, r3
 800099e:	f005 f94b 	bl	8005c38 <QActive_subscribe>

    QS_FUN_DICTIONARY(&Philo_thinking);
    QS_FUN_DICTIONARY(&Philo_hungry);
    QS_FUN_DICTIONARY(&Philo_eating);

    return Q_TRAN(&Philo_thinking);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a03      	ldr	r2, [pc, #12]	@ (80009b4 <Philo_initial+0x30>)
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	2307      	movs	r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	080009b9 	.word	0x080009b9

080009b8 <Philo_thinking>:

//${AOs::Philo::SM::thinking} ................................................
static QState Philo_thinking(Philo * const me, QEvt const * const e) {
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	2b09      	cmp	r3, #9
 80009ca:	d848      	bhi.n	8000a5e <Philo_thinking+0xa6>
 80009cc:	a201      	add	r2, pc, #4	@ (adr r2, 80009d4 <Philo_thinking+0x1c>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	080009fd 	.word	0x080009fd
 80009d8:	08000a19 	.word	0x08000a19
 80009dc:	08000a5f 	.word	0x08000a5f
 80009e0:	08000a35 	.word	0x08000a35
 80009e4:	08000a35 	.word	0x08000a35
 80009e8:	08000a5f 	.word	0x08000a5f
 80009ec:	08000a5f 	.word	0x08000a5f
 80009f0:	08000a59 	.word	0x08000a59
 80009f4:	08000a5f 	.word	0x08000a5f
 80009f8:	08000a29 	.word	0x08000a29
        //${AOs::Philo::SM::thinking}
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->timeEvt, think_time(), 0U);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f103 04ac 	add.w	r4, r3, #172	@ 0xac
 8000a02:	f7ff ff71 	bl	80008e8 <think_time>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f005 fa89 	bl	8005f24 <QTimeEvt_armX>
            status_ = Q_HANDLED();
 8000a12:	2302      	movs	r3, #2
 8000a14:	73fb      	strb	r3, [r7, #15]
            break;
 8000a16:	e028      	b.n	8000a6a <Philo_thinking+0xb2>
        }
        //${AOs::Philo::SM::thinking}
        case Q_EXIT_SIG: {
            (void)QTimeEvt_disarm(&me->timeEvt);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	33ac      	adds	r3, #172	@ 0xac
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 fb17 	bl	8006050 <QTimeEvt_disarm>
            status_ = Q_HANDLED();
 8000a22:	2302      	movs	r3, #2
 8000a24:	73fb      	strb	r3, [r7, #15]
            break;
 8000a26:	e020      	b.n	8000a6a <Philo_thinking+0xb2>
        }
        //${AOs::Philo::SM::thinking::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Philo_hungry);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <Philo_thinking+0xbc>)
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	2307      	movs	r3, #7
 8000a30:	73fb      	strb	r3, [r7, #15]
            break;
 8000a32:	e01a      	b.n	8000a6a <Philo_thinking+0xb2>
        }
        //${AOs::Philo::SM::thinking::EAT, DONE}
        case EAT_SIG: // intentionally fall through
        case DONE_SIG: {
            // EAT or DONE must be for other Philos than this one
            Q_ASSERT(Q_EVT_CAST(TableEvt)->philoId != me->id);
 8000a34:	f003 f868 	bl	8003b08 <vPortEnterCritical>
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	791a      	ldrb	r2, [r3, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d103      	bne.n	8000a4e <Philo_thinking+0x96>
 8000a46:	219e      	movs	r1, #158	@ 0x9e
 8000a48:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <Philo_thinking+0xc0>)
 8000a4a:	f7ff fcb5 	bl	80003b8 <Q_onError>
 8000a4e:	f003 f887 	bl	8003b60 <vPortExitCritical>
            status_ = Q_HANDLED();
 8000a52:	2302      	movs	r3, #2
 8000a54:	73fb      	strb	r3, [r7, #15]
            break;
 8000a56:	e008      	b.n	8000a6a <Philo_thinking+0xb2>
        }
        //${AOs::Philo::SM::thinking::TEST}
        case TEST_SIG: {
            status_ = Q_HANDLED();
 8000a58:	2302      	movs	r3, #2
 8000a5a:	73fb      	strb	r3, [r7, #15]
            break;
 8000a5c:	e005      	b.n	8000a6a <Philo_thinking+0xb2>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a06      	ldr	r2, [pc, #24]	@ (8000a7c <Philo_thinking+0xc4>)
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	2300      	movs	r3, #0
 8000a66:	73fb      	strb	r3, [r7, #15]
            break;
 8000a68:	bf00      	nop
        }
    }
    return status_;
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	08000a81 	.word	0x08000a81
 8000a78:	080062fc 	.word	0x080062fc
 8000a7c:	0800526d 	.word	0x0800526d

08000a80 <Philo_hungry>:

//${AOs::Philo::SM::hungry} ..................................................
static QState Philo_hungry(Philo * const me, QEvt const * const e) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	2b05      	cmp	r3, #5
 8000a90:	d030      	beq.n	8000af4 <Philo_hungry+0x74>
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	dc40      	bgt.n	8000b18 <Philo_hungry+0x98>
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d002      	beq.n	8000aa0 <Philo_hungry+0x20>
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d01a      	beq.n	8000ad4 <Philo_hungry+0x54>
 8000a9e:	e03b      	b.n	8000b18 <Philo_hungry+0x98>
        //${AOs::Philo::SM::hungry}
        case Q_ENTRY_SIG: {
            #ifdef QEVT_PAR_INIT
            TableEvt const *pe = Q_NEW(TableEvt, HUNGRY_SIG, me->id);
 8000aa0:	220b      	movs	r2, #11
 8000aa2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000aa6:	2006      	movs	r0, #6
 8000aa8:	f004 fcd2 	bl	8005450 <QF_newX_>
 8000aac:	4602      	mov	r2, r0
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	f7ff ff02 	bl	80008c0 <TableEvt_init>
 8000abc:	60b8      	str	r0, [r7, #8]
            #else
            TableEvt *pe = Q_NEW(TableEvt, HUNGRY_SIG);
            pe->philoId = me->id;
            #endif
            QACTIVE_POST(AO_Table, &pe->super, &me->super);
 8000abe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <Philo_hungry+0xb0>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aca:	f003 fb69 	bl	80041a0 <QActive_post_>
            status_ = Q_HANDLED();
 8000ace:	2302      	movs	r3, #2
 8000ad0:	73fb      	strb	r3, [r7, #15]
            break;
 8000ad2:	e027      	b.n	8000b24 <Philo_hungry+0xa4>
        }
        //${AOs::Philo::SM::hungry::EAT}
        case EAT_SIG: {
            //${AOs::Philo::SM::hungry::EAT::[e->philoId==me->iid]}
            if (Q_EVT_CAST(TableEvt)->philoId == me->id) {
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	791a      	ldrb	r2, [r3, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d105      	bne.n	8000aee <Philo_hungry+0x6e>
                status_ = Q_TRAN(&Philo_eating);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a13      	ldr	r2, [pc, #76]	@ (8000b34 <Philo_hungry+0xb4>)
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	2307      	movs	r3, #7
 8000aea:	73fb      	strb	r3, [r7, #15]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8000aec:	e01a      	b.n	8000b24 <Philo_hungry+0xa4>
                status_ = Q_UNHANDLED();
 8000aee:	2301      	movs	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
            break;
 8000af2:	e017      	b.n	8000b24 <Philo_hungry+0xa4>
        }
        //${AOs::Philo::SM::hungry::DONE}
        case DONE_SIG: {
            // DONE must be for other Philos than this one
            Q_ASSERT(Q_EVT_CAST(TableEvt)->philoId != me->id);
 8000af4:	f003 f808 	bl	8003b08 <vPortEnterCritical>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	791a      	ldrb	r2, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d103      	bne.n	8000b0e <Philo_hungry+0x8e>
 8000b06:	21cd      	movs	r1, #205	@ 0xcd
 8000b08:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <Philo_hungry+0xb8>)
 8000b0a:	f7ff fc55 	bl	80003b8 <Q_onError>
 8000b0e:	f003 f827 	bl	8003b60 <vPortExitCritical>
            status_ = Q_HANDLED();
 8000b12:	2302      	movs	r3, #2
 8000b14:	73fb      	strb	r3, [r7, #15]
            break;
 8000b16:	e005      	b.n	8000b24 <Philo_hungry+0xa4>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <Philo_hungry+0xbc>)
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
            break;
 8000b22:	bf00      	nop
        }
    }
    return status_;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	08006348 	.word	0x08006348
 8000b34:	08000b41 	.word	0x08000b41
 8000b38:	080062fc 	.word	0x080062fc
 8000b3c:	0800526d 	.word	0x0800526d

08000b40 <Philo_eating>:

//${AOs::Philo::SM::eating} ..................................................
static QState Philo_eating(Philo * const me, QEvt const * const e) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d85a      	bhi.n	8000c0a <Philo_eating+0xca>
 8000b54:	a201      	add	r2, pc, #4	@ (adr r2, 8000b5c <Philo_eating+0x1c>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000b85 	.word	0x08000b85
 8000b60:	08000ba1 	.word	0x08000ba1
 8000b64:	08000c0b 	.word	0x08000c0b
 8000b68:	08000be7 	.word	0x08000be7
 8000b6c:	08000be7 	.word	0x08000be7
 8000b70:	08000c0b 	.word	0x08000c0b
 8000b74:	08000c0b 	.word	0x08000c0b
 8000b78:	08000c0b 	.word	0x08000c0b
 8000b7c:	08000c0b 	.word	0x08000c0b
 8000b80:	08000bdb 	.word	0x08000bdb
        //${AOs::Philo::SM::eating}
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->timeEvt, eat_time(), 0U);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f103 04ac 	add.w	r4, r3, #172	@ 0xac
 8000b8a:	f7ff fec1 	bl	8000910 <eat_time>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	4620      	mov	r0, r4
 8000b96:	f005 f9c5 	bl	8005f24 <QTimeEvt_armX>
            status_ = Q_HANDLED();
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	73fb      	strb	r3, [r7, #15]
            break;
 8000b9e:	e03a      	b.n	8000c16 <Philo_eating+0xd6>
        }
        //${AOs::Philo::SM::eating}
        case Q_EXIT_SIG: {
            (void)QTimeEvt_disarm(&me->timeEvt);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	33ac      	adds	r3, #172	@ 0xac
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f005 fa53 	bl	8006050 <QTimeEvt_disarm>

            #ifdef QEVT_PAR_INIT
            TableEvt const *pe = Q_NEW(TableEvt, DONE_SIG, me->id);
 8000baa:	2205      	movs	r2, #5
 8000bac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000bb0:	2006      	movs	r0, #6
 8000bb2:	f004 fc4d 	bl	8005450 <QF_newX_>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f7ff fe7d 	bl	80008c0 <TableEvt_init>
 8000bc6:	60b8      	str	r0, [r7, #8]
            #else
            TableEvt *pe = Q_NEW(TableEvt, DONE_SIG);
            pe->philoId = me->id;
            #endif
            QACTIVE_PUBLISH(&pe->super, &me->super);
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 ff7e 	bl	8005ad0 <QActive_publish_>
            status_ = Q_HANDLED();
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	73fb      	strb	r3, [r7, #15]
            break;
 8000bd8:	e01d      	b.n	8000c16 <Philo_eating+0xd6>
        }
        //${AOs::Philo::SM::eating::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Philo_thinking);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <Philo_eating+0xe0>)
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	2307      	movs	r3, #7
 8000be2:	73fb      	strb	r3, [r7, #15]
            break;
 8000be4:	e017      	b.n	8000c16 <Philo_eating+0xd6>
        }
        //${AOs::Philo::SM::eating::EAT, DONE}
        case EAT_SIG: // intentionally fall through
        case DONE_SIG: {
            // EAT or DONE must be for other Philos than this one
            Q_ASSERT(Q_EVT_CAST(TableEvt)->philoId != me->id);
 8000be6:	f002 ff8f 	bl	8003b08 <vPortEnterCritical>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	791a      	ldrb	r2, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d103      	bne.n	8000c00 <Philo_eating+0xc0>
 8000bf8:	21fa      	movs	r1, #250	@ 0xfa
 8000bfa:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <Philo_eating+0xe4>)
 8000bfc:	f7ff fbdc 	bl	80003b8 <Q_onError>
 8000c00:	f002 ffae 	bl	8003b60 <vPortExitCritical>
            status_ = Q_HANDLED();
 8000c04:	2302      	movs	r3, #2
 8000c06:	73fb      	strb	r3, [r7, #15]
            break;
 8000c08:	e005      	b.n	8000c16 <Philo_eating+0xd6>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <Philo_eating+0xe8>)
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
            break;
 8000c14:	bf00      	nop
        }
    }
    return status_;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	080009b9 	.word	0x080009b9
 8000c24:	080062fc 	.word	0x080062fc
 8000c28:	0800526d 	.word	0x0800526d

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c30:	4b43      	ldr	r3, [pc, #268]	@ (8000d40 <SystemInit+0x114>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c36:	4a42      	ldr	r2, [pc, #264]	@ (8000d40 <SystemInit+0x114>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c40:	4b40      	ldr	r3, [pc, #256]	@ (8000d44 <SystemInit+0x118>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	2b06      	cmp	r3, #6
 8000c4a:	d807      	bhi.n	8000c5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d44 <SystemInit+0x118>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f023 030f 	bic.w	r3, r3, #15
 8000c54:	4a3b      	ldr	r2, [pc, #236]	@ (8000d44 <SystemInit+0x118>)
 8000c56:	f043 0307 	orr.w	r3, r3, #7
 8000c5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <SystemInit+0x11c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a39      	ldr	r2, [pc, #228]	@ (8000d48 <SystemInit+0x11c>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c68:	4b37      	ldr	r3, [pc, #220]	@ (8000d48 <SystemInit+0x11c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c6e:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <SystemInit+0x11c>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4935      	ldr	r1, [pc, #212]	@ (8000d48 <SystemInit+0x11c>)
 8000c74:	4b35      	ldr	r3, [pc, #212]	@ (8000d4c <SystemInit+0x120>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c7a:	4b32      	ldr	r3, [pc, #200]	@ (8000d44 <SystemInit+0x118>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d007      	beq.n	8000c96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c86:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <SystemInit+0x118>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f023 030f 	bic.w	r3, r3, #15
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d44 <SystemInit+0x118>)
 8000c90:	f043 0307 	orr.w	r3, r3, #7
 8000c94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c96:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <SystemInit+0x11c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <SystemInit+0x11c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <SystemInit+0x11c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	@ (8000d48 <SystemInit+0x11c>)
 8000caa:	4a29      	ldr	r2, [pc, #164]	@ (8000d50 <SystemInit+0x124>)
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <SystemInit+0x11c>)
 8000cb0:	4a28      	ldr	r2, [pc, #160]	@ (8000d54 <SystemInit+0x128>)
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <SystemInit+0x11c>)
 8000cb6:	4a28      	ldr	r2, [pc, #160]	@ (8000d58 <SystemInit+0x12c>)
 8000cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <SystemInit+0x11c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cc0:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <SystemInit+0x11c>)
 8000cc2:	4a25      	ldr	r2, [pc, #148]	@ (8000d58 <SystemInit+0x12c>)
 8000cc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <SystemInit+0x11c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <SystemInit+0x11c>)
 8000cce:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <SystemInit+0x12c>)
 8000cd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <SystemInit+0x11c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <SystemInit+0x11c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d48 <SystemInit+0x11c>)
 8000cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ce2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <SystemInit+0x11c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <SystemInit+0x130>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <SystemInit+0x134>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cf6:	d202      	bcs.n	8000cfe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <SystemInit+0x138>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000cfe:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <SystemInit+0x11c>)
 8000d00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d113      	bne.n	8000d34 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <SystemInit+0x11c>)
 8000d0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d12:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <SystemInit+0x11c>)
 8000d14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <SystemInit+0x13c>)
 8000d1e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d22:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <SystemInit+0x11c>)
 8000d26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d2a:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <SystemInit+0x11c>)
 8000d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	52002000 	.word	0x52002000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d50:	02020200 	.word	0x02020200
 8000d54:	01ff0000 	.word	0x01ff0000
 8000d58:	01010280 	.word	0x01010280
 8000d5c:	5c001000 	.word	0x5c001000
 8000d60:	ffff0000 	.word	0xffff0000
 8000d64:	51008108 	.word	0x51008108
 8000d68:	52004000 	.word	0x52004000

08000d6c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b08b      	sub	sp, #44	@ 0x2c
 8000d70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d72:	4bb1      	ldr	r3, [pc, #708]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000d7a:	2b18      	cmp	r3, #24
 8000d7c:	f200 812e 	bhi.w	8000fdc <SystemCoreClockUpdate+0x270>
 8000d80:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <SystemCoreClockUpdate+0x1c>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000ded 	.word	0x08000ded
 8000d8c:	08000fdd 	.word	0x08000fdd
 8000d90:	08000fdd 	.word	0x08000fdd
 8000d94:	08000fdd 	.word	0x08000fdd
 8000d98:	08000fdd 	.word	0x08000fdd
 8000d9c:	08000fdd 	.word	0x08000fdd
 8000da0:	08000fdd 	.word	0x08000fdd
 8000da4:	08000fdd 	.word	0x08000fdd
 8000da8:	08000e01 	.word	0x08000e01
 8000dac:	08000fdd 	.word	0x08000fdd
 8000db0:	08000fdd 	.word	0x08000fdd
 8000db4:	08000fdd 	.word	0x08000fdd
 8000db8:	08000fdd 	.word	0x08000fdd
 8000dbc:	08000fdd 	.word	0x08000fdd
 8000dc0:	08000fdd 	.word	0x08000fdd
 8000dc4:	08000fdd 	.word	0x08000fdd
 8000dc8:	08000e07 	.word	0x08000e07
 8000dcc:	08000fdd 	.word	0x08000fdd
 8000dd0:	08000fdd 	.word	0x08000fdd
 8000dd4:	08000fdd 	.word	0x08000fdd
 8000dd8:	08000fdd 	.word	0x08000fdd
 8000ddc:	08000fdd 	.word	0x08000fdd
 8000de0:	08000fdd 	.word	0x08000fdd
 8000de4:	08000fdd 	.word	0x08000fdd
 8000de8:	08000e0d 	.word	0x08000e0d
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000dec:	4b92      	ldr	r3, [pc, #584]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	4a91      	ldr	r2, [pc, #580]	@ (800103c <SystemCoreClockUpdate+0x2d0>)
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000dfe:	e0f7      	b.n	8000ff0 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
 8000e00:	4b8f      	ldr	r3, [pc, #572]	@ (8001040 <SystemCoreClockUpdate+0x2d4>)
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000e04:	e0f4      	b.n	8000ff0 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
 8000e06:	4b8f      	ldr	r3, [pc, #572]	@ (8001044 <SystemCoreClockUpdate+0x2d8>)
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000e0a:	e0f1      	b.n	8000ff0 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000e0c:	4b8a      	ldr	r3, [pc, #552]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000e16:	4b88      	ldr	r3, [pc, #544]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e20:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000e22:	4b85      	ldr	r3, [pc, #532]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000e2c:	4b82      	ldr	r3, [pc, #520]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e30:	08db      	lsrs	r3, r3, #3
 8000e32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	fb02 f303 	mul.w	r3, r2, r3
 8000e3c:	ee07 3a90 	vmov	s15, r3
 8000e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e44:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 80c3 	beq.w	8000fd6 <SystemCoreClockUpdate+0x26a>
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d059      	beq.n	8000f0a <SystemCoreClockUpdate+0x19e>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d878      	bhi.n	8000f4e <SystemCoreClockUpdate+0x1e2>
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <SystemCoreClockUpdate+0xfe>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d02e      	beq.n	8000ec6 <SystemCoreClockUpdate+0x15a>
 8000e68:	e071      	b.n	8000f4e <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000e6a:	4b73      	ldr	r3, [pc, #460]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	4a71      	ldr	r2, [pc, #452]	@ (800103c <SystemCoreClockUpdate+0x2d0>)
 8000e76:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7a:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e94:	4b68      	ldr	r3, [pc, #416]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ea4:	ed97 6a04 	vldr	s12, [r7, #16]
 8000ea8:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8001048 <SystemCoreClockUpdate+0x2dc>
 8000eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000eb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec0:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
 8000ec4:	e071      	b.n	8000faa <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800104c <SystemCoreClockUpdate+0x2e0>
 8000ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ed8:	4b57      	ldr	r3, [pc, #348]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ee8:	ed97 6a04 	vldr	s12, [r7, #16]
 8000eec:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8001048 <SystemCoreClockUpdate+0x2dc>
 8000ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ef8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f04:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000f08:	e04f      	b.n	8000faa <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f14:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001050 <SystemCoreClockUpdate+0x2e4>
 8000f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f1c:	4b46      	ldr	r3, [pc, #280]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8000f30:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8001048 <SystemCoreClockUpdate+0x2dc>
 8000f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000f3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000f4c:	e02d      	b.n	8000faa <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	08db      	lsrs	r3, r3, #3
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	4a38      	ldr	r2, [pc, #224]	@ (800103c <SystemCoreClockUpdate+0x2d0>)
 8000f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5e:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f78:	4b2f      	ldr	r3, [pc, #188]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f88:	ed97 6a04 	vldr	s12, [r7, #16]
 8000f8c:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001048 <SystemCoreClockUpdate+0x2dc>
 8000f90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000f94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000f98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa4:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000fa8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000faa:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	0a5b      	lsrs	r3, r3, #9
 8000fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc2:	edd7 6a08 	vldr	s13, [r7, #32]
 8000fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fce:	ee17 3a90 	vmov	r3, s15
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
 8000fd4:	e00c      	b.n	8000ff0 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000fda:	e009      	b.n	8000ff0 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	4a15      	ldr	r2, [pc, #84]	@ (800103c <SystemCoreClockUpdate+0x2d0>)
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000fee:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <SystemCoreClockUpdate+0x2e8>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
 8001000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <SystemCoreClockUpdate+0x2cc>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <SystemCoreClockUpdate+0x2e8>)
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <SystemCoreClockUpdate+0x2ec>)
 8001022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <SystemCoreClockUpdate+0x2f0>)
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
 800102a:	bf00      	nop
 800102c:	372c      	adds	r7, #44	@ 0x2c
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	58024400 	.word	0x58024400
 800103c:	03d09000 	.word	0x03d09000
 8001040:	003d0900 	.word	0x003d0900
 8001044:	017d7840 	.word	0x017d7840
 8001048:	46000000 	.word	0x46000000
 800104c:	4a742400 	.word	0x4a742400
 8001050:	4bbebc20 	.word	0x4bbebc20
 8001054:	08006324 	.word	0x08006324
 8001058:	24000004 	.word	0x24000004
 800105c:	24000000 	.word	0x24000000

08001060 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <ExitRun0Mode+0x2c>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a08      	ldr	r2, [pc, #32]	@ (800108c <ExitRun0Mode+0x2c>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001070:	bf00      	nop
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <ExitRun0Mode+0x2c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	58024800 	.word	0x58024800

08001090 <TableEvt_init>:
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
    if (me != (TableEvt *)0) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <TableEvt_init+0x18>
        me->philoId = id;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	711a      	strb	r2, [r3, #4]
    return me;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <right>:

//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

// helper function to provide the RIGHT neighbor of a Philo[n]
static inline uint8_t right(uint8_t const n) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)((n + (N_PHILO - 1U)) % N_PHILO);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	1d19      	adds	r1, r3, #4
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <right+0x2c>)
 80010c8:	fba3 2301 	umull	r2, r3, r3, r1
 80010cc:	089a      	lsrs	r2, r3, #2
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	1aca      	subs	r2, r1, r3
 80010d6:	b2d3      	uxtb	r3, r2
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	cccccccd 	.word	0xcccccccd

080010e8 <left>:

// helper function to provide the LEFT neighbor of a Philo[n]
static inline uint8_t left(uint8_t const n) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)((n + 1U) % N_PHILO);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	1c59      	adds	r1, r3, #1
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <left+0x2c>)
 80010f8:	fba3 2301 	umull	r2, r3, r3, r1
 80010fc:	089a      	lsrs	r2, r3, #2
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	1aca      	subs	r2, r1, r3
 8001106:	b2d3      	uxtb	r3, r2
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	cccccccd 	.word	0xcccccccd

08001118 <Table_ctor>:
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::Table_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Shared::Table_ctor} ......................................................
void Table_ctor(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
    Table * const me = &Table_inst;
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <Table_ctor+0x48>)
 8001120:	603b      	str	r3, [r7, #0]
    QActive_ctor(&me->super, Q_STATE_CAST(&Table_initial));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	490f      	ldr	r1, [pc, #60]	@ (8001164 <Table_ctor+0x4c>)
 8001126:	4618      	mov	r0, r3
 8001128:	f004 fde8 	bl	8005cfc <QActive_ctor>
    for (uint8_t n = 0U; n < N_PHILO; ++n) {
 800112c:	2300      	movs	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	e00e      	b.n	8001150 <Table_ctor+0x38>
        me->fork[n] = FREE;
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	2200      	movs	r2, #0
 800113a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
        me->isHungry[n] = false;
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	4413      	add	r3, r2
 8001144:	2200      	movs	r2, #0
 8001146:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    for (uint8_t n = 0U; n < N_PHILO; ++n) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d9ed      	bls.n	8001132 <Table_ctor+0x1a>
    }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	240021bc 	.word	0x240021bc
 8001164:	08001169 	.word	0x08001169

08001168 <Table_initial>:

//${AOs::Table} ..............................................................
Table Table_inst;

//${AOs::Table::SM} ..........................................................
static QState Table_initial(Table * const me, void const * const par) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    //${AOs::Table::SM::initial}
    Q_UNUSED_PAR(par);

    QS_OBJ_DICTIONARY(&Table_inst);

    QActive_subscribe(&me->super, DONE_SIG);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2105      	movs	r1, #5
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fd5e 	bl	8005c38 <QActive_subscribe>
    QActive_subscribe(&me->super, PAUSE_SIG);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2106      	movs	r1, #6
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fd59 	bl	8005c38 <QActive_subscribe>
    QActive_subscribe(&me->super, SERVE_SIG);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2107      	movs	r1, #7
 800118a:	4618      	mov	r0, r3
 800118c:	f004 fd54 	bl	8005c38 <QActive_subscribe>
    QActive_subscribe(&me->super, TEST_SIG);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2108      	movs	r1, #8
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fd4f 	bl	8005c38 <QActive_subscribe>

    for (uint8_t n = 0U; n < N_PHILO; ++n) {
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e013      	b.n	80011c8 <Table_initial+0x60>
        me->fork[n] = FREE;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
        me->isHungry[n] = false;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
        BSP_displayPhilStat(n, THINKING);
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	4909      	ldr	r1, [pc, #36]	@ (80011e0 <Table_initial+0x78>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff faf3 	bl	80007a8 <BSP_displayPhilStat>
    for (uint8_t n = 0U; n < N_PHILO; ++n) {
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	3301      	adds	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d9e8      	bls.n	80011a0 <Table_initial+0x38>

    QS_FUN_DICTIONARY(&Table_active);
    QS_FUN_DICTIONARY(&Table_serving);
    QS_FUN_DICTIONARY(&Table_paused);

    return Q_TRAN(&Table_serving);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <Table_initial+0x7c>)
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	2307      	movs	r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	080061d0 	.word	0x080061d0
 80011e4:	08001231 	.word	0x08001231

080011e8 <Table_active>:

//${AOs::Table::SM::active} ..................................................
static QState Table_active(Table * const me, QEvt const * const e) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d004      	beq.n	8001204 <Table_active+0x1c>
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d108      	bne.n	8001210 <Table_active+0x28>
        //${AOs::Table::SM::active::TEST}
        case TEST_SIG: {
            status_ = Q_HANDLED();
 80011fe:	2302      	movs	r3, #2
 8001200:	73fb      	strb	r3, [r7, #15]
            break;
 8001202:	e00b      	b.n	800121c <Table_active+0x34>
        }
        //${AOs::Table::SM::active::EAT}
        case EAT_SIG: {
            Q_ERROR();
 8001204:	f002 fc80 	bl	8003b08 <vPortEnterCritical>
 8001208:	2197      	movs	r1, #151	@ 0x97
 800120a:	4807      	ldr	r0, [pc, #28]	@ (8001228 <Table_active+0x40>)
 800120c:	f7ff f8d4 	bl	80003b8 <Q_onError>
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <Table_active+0x44>)
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
            break;
 800121a:	bf00      	nop
        }
    }
    return status_;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	08006334 	.word	0x08006334
 800122c:	0800526d 	.word	0x0800526d

08001230 <Table_serving>:

//${AOs::Table::SM::active::serving} .........................................
static QState Table_serving(Table * const me, QEvt const * const e) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	2b0a      	cmp	r3, #10
 8001242:	f200 81a1 	bhi.w	8001588 <Table_serving+0x358>
 8001246:	a201      	add	r2, pc, #4	@ (adr r2, 800124c <Table_serving+0x1c>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	08001279 	.word	0x08001279
 8001250:	08001589 	.word	0x08001589
 8001254:	08001589 	.word	0x08001589
 8001258:	0800156f 	.word	0x0800156f
 800125c:	080013e1 	.word	0x080013e1
 8001260:	0800157d 	.word	0x0800157d
 8001264:	08001589 	.word	0x08001589
 8001268:	08001589 	.word	0x08001589
 800126c:	08001589 	.word	0x08001589
 8001270:	08001589 	.word	0x08001589
 8001274:	08001323 	.word	0x08001323
        //${AOs::Table::SM::active::serving}
        case Q_ENTRY_SIG: {
            // give permissions to eat...
            for (uint8_t n = 0U; n < N_PHILO; ++n) {
 8001278:	2300      	movs	r3, #0
 800127a:	77bb      	strb	r3, [r7, #30]
 800127c:	e04b      	b.n	8001316 <Table_serving+0xe6>
                if (me->isHungry[n]
 800127e:	7fbb      	ldrb	r3, [r7, #30]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d041      	beq.n	8001310 <Table_serving+0xe0>
                    && (me->fork[left(n)] == FREE)
 800128c:	7fbb      	ldrb	r3, [r7, #30]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff2a 	bl	80010e8 <left>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d135      	bne.n	8001310 <Table_serving+0xe0>
                    && (me->fork[n] == FREE))
 80012a4:	7fbb      	ldrb	r3, [r7, #30]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d12e      	bne.n	8001310 <Table_serving+0xe0>
                {
                    me->fork[left(n)] = USED;
 80012b2:	7fbb      	ldrb	r3, [r7, #30]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff17 	bl	80010e8 <left>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                    me->fork[n] = USED;
 80012c8:	7fbb      	ldrb	r3, [r7, #30]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
            #ifdef QEVT_PAR_INIT
                    TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, n);
 80012d4:	2204      	movs	r2, #4
 80012d6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012da:	2006      	movs	r0, #6
 80012dc:	f004 f8b8 	bl	8005450 <QF_newX_>
 80012e0:	4602      	mov	r2, r0
 80012e2:	7fbb      	ldrb	r3, [r7, #30]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f7ff fed2 	bl	8001090 <TableEvt_init>
 80012ec:	60b8      	str	r0, [r7, #8]
            #else
                    TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
                    pe->philoId = n;
            #endif
                    QACTIVE_PUBLISH(&pe->super, &me->super);
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fbeb 	bl	8005ad0 <QActive_publish_>
                    me->isHungry[n] = false;
 80012fa:	7fbb      	ldrb	r3, [r7, #30]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	2200      	movs	r2, #0
 8001302:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
                    BSP_displayPhilStat(n, EATING);
 8001306:	7fbb      	ldrb	r3, [r7, #30]
 8001308:	49a5      	ldr	r1, [pc, #660]	@ (80015a0 <Table_serving+0x370>)
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fa4c 	bl	80007a8 <BSP_displayPhilStat>
            for (uint8_t n = 0U; n < N_PHILO; ++n) {
 8001310:	7fbb      	ldrb	r3, [r7, #30]
 8001312:	3301      	adds	r3, #1
 8001314:	77bb      	strb	r3, [r7, #30]
 8001316:	7fbb      	ldrb	r3, [r7, #30]
 8001318:	2b04      	cmp	r3, #4
 800131a:	d9b0      	bls.n	800127e <Table_serving+0x4e>
                }
            }
            status_ = Q_HANDLED();
 800131c:	2302      	movs	r3, #2
 800131e:	77fb      	strb	r3, [r7, #31]
            break;
 8001320:	e138      	b.n	8001594 <Table_serving+0x364>
        }
        //${AOs::Table::SM::active::serving::HUNGRY}
        case HUNGRY_SIG: {
            uint8_t n = Q_EVT_CAST(TableEvt)->philoId;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	777b      	strb	r3, [r7, #29]

            // phil ID must be in range and he must be not hungry
            Q_ASSERT((n < N_PHILO) && (!me->isHungry[n]));
 8001328:	f002 fbee 	bl	8003b08 <vPortEnterCritical>
 800132c:	7f7b      	ldrb	r3, [r7, #29]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d806      	bhi.n	8001340 <Table_serving+0x110>
 8001332:	7f7b      	ldrb	r3, [r7, #29]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <Table_serving+0x118>
 8001340:	21c4      	movs	r1, #196	@ 0xc4
 8001342:	4898      	ldr	r0, [pc, #608]	@ (80015a4 <Table_serving+0x374>)
 8001344:	f7ff f838 	bl	80003b8 <Q_onError>
 8001348:	f002 fc0a 	bl	8003b60 <vPortExitCritical>

            BSP_displayPhilStat(n, HUNGRY);
 800134c:	7f7b      	ldrb	r3, [r7, #29]
 800134e:	4996      	ldr	r1, [pc, #600]	@ (80015a8 <Table_serving+0x378>)
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fa29 	bl	80007a8 <BSP_displayPhilStat>
            uint8_t m = left(n);
 8001356:	7f7b      	ldrb	r3, [r7, #29]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fec5 	bl	80010e8 <left>
 800135e:	4603      	mov	r3, r0
 8001360:	773b      	strb	r3, [r7, #28]
            //${AOs::Table::SM::active::serving::HUNGRY::[bothfree]}
            if ((me->fork[m] == FREE) && (me->fork[n] == FREE)) {
 8001362:	7f3b      	ldrb	r3, [r7, #28]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800136c:	2b00      	cmp	r3, #0
 800136e:	d12e      	bne.n	80013ce <Table_serving+0x19e>
 8001370:	7f7b      	ldrb	r3, [r7, #29]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800137a:	2b00      	cmp	r3, #0
 800137c:	d127      	bne.n	80013ce <Table_serving+0x19e>
                me->fork[m] = USED;
 800137e:	7f3b      	ldrb	r3, [r7, #28]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	2201      	movs	r2, #1
 8001386:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                me->fork[n] = USED;
 800138a:	7f7b      	ldrb	r3, [r7, #29]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	2201      	movs	r2, #1
 8001392:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                #ifdef QEVT_PAR_INIT
                TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, n);
 8001396:	2204      	movs	r2, #4
 8001398:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800139c:	2006      	movs	r0, #6
 800139e:	f004 f857 	bl	8005450 <QF_newX_>
 80013a2:	4602      	mov	r2, r0
 80013a4:	7f7b      	ldrb	r3, [r7, #29]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f7ff fe71 	bl	8001090 <TableEvt_init>
 80013ae:	61b8      	str	r0, [r7, #24]
                #else
                TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
                pe->philoId = n;
                #endif
                QACTIVE_PUBLISH(&pe->super, &me->super);
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 fb8a 	bl	8005ad0 <QActive_publish_>
                BSP_displayPhilStat(n, EATING);
 80013bc:	7f7b      	ldrb	r3, [r7, #29]
 80013be:	4978      	ldr	r1, [pc, #480]	@ (80015a0 <Table_serving+0x370>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f9f1 	bl	80007a8 <BSP_displayPhilStat>
                status_ = Q_HANDLED();
 80013c6:	2302      	movs	r3, #2
 80013c8:	77fb      	strb	r3, [r7, #31]
            if ((me->fork[m] == FREE) && (me->fork[n] == FREE)) {
 80013ca:	bf00      	nop
            //${AOs::Table::SM::active::serving::HUNGRY::[else]}
            else {
                me->isHungry[n] = true;
                status_ = Q_HANDLED();
            }
            break;
 80013cc:	e0e2      	b.n	8001594 <Table_serving+0x364>
                me->isHungry[n] = true;
 80013ce:	7f7b      	ldrb	r3, [r7, #29]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
                status_ = Q_HANDLED();
 80013da:	2302      	movs	r3, #2
 80013dc:	77fb      	strb	r3, [r7, #31]
            break;
 80013de:	e0d9      	b.n	8001594 <Table_serving+0x364>
        }
        //${AOs::Table::SM::active::serving::DONE}
        case DONE_SIG: {
            uint8_t n = Q_EVT_CAST(TableEvt)->philoId;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	791b      	ldrb	r3, [r3, #4]
 80013e4:	75fb      	strb	r3, [r7, #23]

            // phil ID must be in range and he must be not hungry
            Q_ASSERT((n < N_PHILO) && (!me->isHungry[n]));
 80013e6:	f002 fb8f 	bl	8003b08 <vPortEnterCritical>
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d806      	bhi.n	80013fe <Table_serving+0x1ce>
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <Table_serving+0x1d6>
 80013fe:	21e2      	movs	r1, #226	@ 0xe2
 8001400:	4868      	ldr	r0, [pc, #416]	@ (80015a4 <Table_serving+0x374>)
 8001402:	f7fe ffd9 	bl	80003b8 <Q_onError>
 8001406:	f002 fbab 	bl	8003b60 <vPortExitCritical>

            BSP_displayPhilStat(n, THINKING);
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	4967      	ldr	r1, [pc, #412]	@ (80015ac <Table_serving+0x37c>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f9ca 	bl	80007a8 <BSP_displayPhilStat>
            uint8_t m = left(n);
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe66 	bl	80010e8 <left>
 800141c:	4603      	mov	r3, r0
 800141e:	75bb      	strb	r3, [r7, #22]

            // both forks of Phil[n] must be used
            Q_ASSERT((me->fork[n] == USED) && (me->fork[m] == USED));
 8001420:	f002 fb72 	bl	8003b08 <vPortEnterCritical>
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800142e:	2b01      	cmp	r3, #1
 8001430:	d106      	bne.n	8001440 <Table_serving+0x210>
 8001432:	7dbb      	ldrb	r3, [r7, #22]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800143c:	2b01      	cmp	r3, #1
 800143e:	d003      	beq.n	8001448 <Table_serving+0x218>
 8001440:	21e8      	movs	r1, #232	@ 0xe8
 8001442:	4858      	ldr	r0, [pc, #352]	@ (80015a4 <Table_serving+0x374>)
 8001444:	f7fe ffb8 	bl	80003b8 <Q_onError>
 8001448:	f002 fb8a 	bl	8003b60 <vPortExitCritical>

            me->fork[m] = FREE;
 800144c:	7dbb      	ldrb	r3, [r7, #22]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	2200      	movs	r2, #0
 8001454:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
            me->fork[n] = FREE;
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	2200      	movs	r2, #0
 8001460:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
            m = right(n); // check the right neighbor
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fe26 	bl	80010b8 <right>
 800146c:	4603      	mov	r3, r0
 800146e:	75bb      	strb	r3, [r7, #22]

            if (me->isHungry[m] && (me->fork[m] == FREE)) {
 8001470:	7dbb      	ldrb	r3, [r7, #22]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d030      	beq.n	80014e0 <Table_serving+0x2b0>
 800147e:	7dbb      	ldrb	r3, [r7, #22]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8001488:	2b00      	cmp	r3, #0
 800148a:	d129      	bne.n	80014e0 <Table_serving+0x2b0>
                me->fork[n] = USED;
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	2201      	movs	r2, #1
 8001494:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                me->fork[m] = USED;
 8001498:	7dbb      	ldrb	r3, [r7, #22]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                me->isHungry[m] = false;
 80014a4:	7dbb      	ldrb	r3, [r7, #22]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
            #ifdef QEVT_PAR_INIT
                TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, m);
 80014b0:	2204      	movs	r2, #4
 80014b2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014b6:	2006      	movs	r0, #6
 80014b8:	f003 ffca 	bl	8005450 <QF_newX_>
 80014bc:	4602      	mov	r2, r0
 80014be:	7dbb      	ldrb	r3, [r7, #22]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fde4 	bl	8001090 <TableEvt_init>
 80014c8:	6138      	str	r0, [r7, #16]
            #else
                TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
                pe->philoId = m;
            #endif
                QACTIVE_PUBLISH(&pe->super, &me->super);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fafd 	bl	8005ad0 <QActive_publish_>
                BSP_displayPhilStat(m, EATING);
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	4931      	ldr	r1, [pc, #196]	@ (80015a0 <Table_serving+0x370>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f964 	bl	80007a8 <BSP_displayPhilStat>
            }
            m = left(n); // check the left neighbor
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fe00 	bl	80010e8 <left>
 80014e8:	4603      	mov	r3, r0
 80014ea:	75bb      	strb	r3, [r7, #22]
            n = left(m); // left fork of the left neighbor
 80014ec:	7dbb      	ldrb	r3, [r7, #22]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fdfa 	bl	80010e8 <left>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]
            if (me->isHungry[m] && (me->fork[n] == FREE)) {
 80014f8:	7dbb      	ldrb	r3, [r7, #22]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d030      	beq.n	8001568 <Table_serving+0x338>
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8001510:	2b00      	cmp	r3, #0
 8001512:	d129      	bne.n	8001568 <Table_serving+0x338>
                me->fork[m] = USED;
 8001514:	7dbb      	ldrb	r3, [r7, #22]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	2201      	movs	r2, #1
 800151c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                me->fork[n] = USED;
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	2201      	movs	r2, #1
 8001528:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                me->isHungry[m] = false;
 800152c:	7dbb      	ldrb	r3, [r7, #22]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	2200      	movs	r2, #0
 8001534:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
            #ifdef QEVT_PAR_INIT
                TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, m);
 8001538:	2204      	movs	r2, #4
 800153a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800153e:	2006      	movs	r0, #6
 8001540:	f003 ff86 	bl	8005450 <QF_newX_>
 8001544:	4602      	mov	r2, r0
 8001546:	7dbb      	ldrb	r3, [r7, #22]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f7ff fda0 	bl	8001090 <TableEvt_init>
 8001550:	60f8      	str	r0, [r7, #12]
            #else
                TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
                pe->philoId = m;
            #endif
                QACTIVE_PUBLISH(&pe->super, &me->super);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f004 fab9 	bl	8005ad0 <QActive_publish_>
                BSP_displayPhilStat(m, EATING);
 800155e:	7dbb      	ldrb	r3, [r7, #22]
 8001560:	490f      	ldr	r1, [pc, #60]	@ (80015a0 <Table_serving+0x370>)
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f920 	bl	80007a8 <BSP_displayPhilStat>
            }
            status_ = Q_HANDLED();
 8001568:	2302      	movs	r3, #2
 800156a:	77fb      	strb	r3, [r7, #31]
            break;
 800156c:	e012      	b.n	8001594 <Table_serving+0x364>
        }
        //${AOs::Table::SM::active::serving::EAT}
        case EAT_SIG: {
            Q_ERROR();
 800156e:	f002 facb 	bl	8003b08 <vPortEnterCritical>
 8001572:	f240 110f 	movw	r1, #271	@ 0x10f
 8001576:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <Table_serving+0x374>)
 8001578:	f7fe ff1e 	bl	80003b8 <Q_onError>
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Table::SM::active::serving::PAUSE}
        case PAUSE_SIG: {
            status_ = Q_TRAN(&Table_paused);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a0c      	ldr	r2, [pc, #48]	@ (80015b0 <Table_serving+0x380>)
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	2307      	movs	r3, #7
 8001584:	77fb      	strb	r3, [r7, #31]
            break;
 8001586:	e005      	b.n	8001594 <Table_serving+0x364>
        }
        default: {
            status_ = Q_SUPER(&Table_active);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <Table_serving+0x384>)
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	2300      	movs	r3, #0
 8001590:	77fb      	strb	r3, [r7, #31]
            break;
 8001592:	bf00      	nop
        }
    }
    return status_;
 8001594:	7ffb      	ldrb	r3, [r7, #31]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	080061dc 	.word	0x080061dc
 80015a4:	08006334 	.word	0x08006334
 80015a8:	080061e8 	.word	0x080061e8
 80015ac:	080061d0 	.word	0x080061d0
 80015b0:	080015b9 	.word	0x080015b9
 80015b4:	080011e9 	.word	0x080011e9

080015b8 <Table_paused>:

//${AOs::Table::SM::active::paused} ..........................................
static QState Table_paused(Table * const me, QEvt const * const e) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	2b0a      	cmp	r3, #10
 80015ca:	f200 8096 	bhi.w	80016fa <Table_paused+0x142>
 80015ce:	a201      	add	r2, pc, #4	@ (adr r2, 80015d4 <Table_paused+0x1c>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	08001601 	.word	0x08001601
 80015d8:	0800160d 	.word	0x0800160d
 80015dc:	080016fb 	.word	0x080016fb
 80015e0:	080016fb 	.word	0x080016fb
 80015e4:	0800166d 	.word	0x0800166d
 80015e8:	080016fb 	.word	0x080016fb
 80015ec:	08001619 	.word	0x08001619
 80015f0:	080016fb 	.word	0x080016fb
 80015f4:	080016fb 	.word	0x080016fb
 80015f8:	080016fb 	.word	0x080016fb
 80015fc:	08001625 	.word	0x08001625
        //${AOs::Table::SM::active::paused}
        case Q_ENTRY_SIG: {
            BSP_displayPaused(1U);
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff f8e6 	bl	80007d2 <BSP_displayPaused>
            status_ = Q_HANDLED();
 8001606:	2302      	movs	r3, #2
 8001608:	73fb      	strb	r3, [r7, #15]
            break;
 800160a:	e07c      	b.n	8001706 <Table_paused+0x14e>
        }
        //${AOs::Table::SM::active::paused}
        case Q_EXIT_SIG: {
            BSP_displayPaused(0U);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff f8e0 	bl	80007d2 <BSP_displayPaused>
            status_ = Q_HANDLED();
 8001612:	2302      	movs	r3, #2
 8001614:	73fb      	strb	r3, [r7, #15]
            break;
 8001616:	e076      	b.n	8001706 <Table_paused+0x14e>
        }
        //${AOs::Table::SM::active::paused::SERVE}
        case SERVE_SIG: {
            status_ = Q_TRAN(&Table_serving);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3d      	ldr	r2, [pc, #244]	@ (8001710 <Table_paused+0x158>)
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	2307      	movs	r3, #7
 8001620:	73fb      	strb	r3, [r7, #15]
            break;
 8001622:	e070      	b.n	8001706 <Table_paused+0x14e>
        }
        //${AOs::Table::SM::active::paused::HUNGRY}
        case HUNGRY_SIG: {
            uint8_t n = Q_EVT_CAST(TableEvt)->philoId;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	73bb      	strb	r3, [r7, #14]

            // philo ID must be in range and he must be not hungry
            Q_ASSERT((n < N_PHILO) && (!me->isHungry[n]));
 800162a:	f002 fa6d 	bl	8003b08 <vPortEnterCritical>
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d806      	bhi.n	8001642 <Table_paused+0x8a>
 8001634:	7bbb      	ldrb	r3, [r7, #14]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <Table_paused+0x94>
 8001642:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8001646:	4833      	ldr	r0, [pc, #204]	@ (8001714 <Table_paused+0x15c>)
 8001648:	f7fe feb6 	bl	80003b8 <Q_onError>
 800164c:	f002 fa88 	bl	8003b60 <vPortExitCritical>

            me->isHungry[n] = true;
 8001650:	7bbb      	ldrb	r3, [r7, #14]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	2201      	movs	r2, #1
 8001658:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
            BSP_displayPhilStat(n, HUNGRY);
 800165c:	7bbb      	ldrb	r3, [r7, #14]
 800165e:	492e      	ldr	r1, [pc, #184]	@ (8001718 <Table_paused+0x160>)
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff f8a1 	bl	80007a8 <BSP_displayPhilStat>
            status_ = Q_HANDLED();
 8001666:	2302      	movs	r3, #2
 8001668:	73fb      	strb	r3, [r7, #15]
            break;
 800166a:	e04c      	b.n	8001706 <Table_paused+0x14e>
        }
        //${AOs::Table::SM::active::paused::DONE}
        case DONE_SIG: {
            uint8_t n = Q_EVT_CAST(TableEvt)->philoId;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	791b      	ldrb	r3, [r3, #4]
 8001670:	737b      	strb	r3, [r7, #13]

            // phil ID must be in range and he must be not hungry
            Q_ASSERT((n < N_PHILO) && (!me->isHungry[n]));
 8001672:	f002 fa49 	bl	8003b08 <vPortEnterCritical>
 8001676:	7b7b      	ldrb	r3, [r7, #13]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d806      	bhi.n	800168a <Table_paused+0xd2>
 800167c:	7b7b      	ldrb	r3, [r7, #13]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d004      	beq.n	8001694 <Table_paused+0xdc>
 800168a:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800168e:	4821      	ldr	r0, [pc, #132]	@ (8001714 <Table_paused+0x15c>)
 8001690:	f7fe fe92 	bl	80003b8 <Q_onError>
 8001694:	f002 fa64 	bl	8003b60 <vPortExitCritical>

            BSP_displayPhilStat(n, THINKING);
 8001698:	7b7b      	ldrb	r3, [r7, #13]
 800169a:	4920      	ldr	r1, [pc, #128]	@ (800171c <Table_paused+0x164>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff f883 	bl	80007a8 <BSP_displayPhilStat>
            uint8_t m = left(n);
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fd1f 	bl	80010e8 <left>
 80016aa:	4603      	mov	r3, r0
 80016ac:	733b      	strb	r3, [r7, #12]

            // both forks of Phil[n] must be used
            Q_ASSERT((me->fork[n] == USED) && (me->fork[m] == USED));
 80016ae:	f002 fa2b 	bl	8003b08 <vPortEnterCritical>
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d106      	bne.n	80016ce <Table_paused+0x116>
 80016c0:	7b3b      	ldrb	r3, [r7, #12]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d004      	beq.n	80016d8 <Table_paused+0x120>
 80016ce:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80016d2:	4810      	ldr	r0, [pc, #64]	@ (8001714 <Table_paused+0x15c>)
 80016d4:	f7fe fe70 	bl	80003b8 <Q_onError>
 80016d8:	f002 fa42 	bl	8003b60 <vPortExitCritical>

            me->fork[m] = FREE;
 80016dc:	7b3b      	ldrb	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
            me->fork[n] = FREE;
 80016e8:	7b7b      	ldrb	r3, [r7, #13]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
            status_ = Q_HANDLED();
 80016f4:	2302      	movs	r3, #2
 80016f6:	73fb      	strb	r3, [r7, #15]
            break;
 80016f8:	e005      	b.n	8001706 <Table_paused+0x14e>
        }
        default: {
            status_ = Q_SUPER(&Table_active);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a08      	ldr	r2, [pc, #32]	@ (8001720 <Table_paused+0x168>)
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
            break;
 8001704:	bf00      	nop
        }
    }
    return status_;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08001231 	.word	0x08001231
 8001714:	08006334 	.word	0x08006334
 8001718:	080061e8 	.word	0x080061e8
 800171c:	080061d0 	.word	0x080061d0
 8001720:	080011e9 	.word	0x080011e9

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001760 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001728:	f7ff fc9a 	bl	8001060 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800172c:	f7ff fa7e 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f004 fcf5 	bl	8006144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff f8a4 	bl	80008a6 <main>
  bx  lr
 800175e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001760:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001764:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001768:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 800176c:	080063d0 	.word	0x080063d0
  ldr r2, =_sbss
 8001770:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 8001774:	240026ac 	.word	0x240026ac

08001778 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC3_IRQHandler>
	...

0800177c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	@ 0x30
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <BSP_LED_Init+0x28>
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d006      	beq.n	80017a4 <BSP_LED_Init+0x28>
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d003      	beq.n	80017a4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800179c:	f06f 0301 	mvn.w	r3, #1
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a2:	e055      	b.n	8001850 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10f      	bne.n	80017ca <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80017aa:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <BSP_LED_Init+0xe0>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	4a2a      	ldr	r2, [pc, #168]	@ (800185c <BSP_LED_Init+0xe0>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ba:	4b28      	ldr	r3, [pc, #160]	@ (800185c <BSP_LED_Init+0xe0>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	e021      	b.n	800180e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d10f      	bne.n	80017f0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <BSP_LED_Init+0xe0>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d6:	4a21      	ldr	r2, [pc, #132]	@ (800185c <BSP_LED_Init+0xe0>)
 80017d8:	f043 0310 	orr.w	r3, r3, #16
 80017dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <BSP_LED_Init+0xe0>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	e00e      	b.n	800180e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80017f0:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <BSP_LED_Init+0xe0>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f6:	4a19      	ldr	r2, [pc, #100]	@ (800185c <BSP_LED_Init+0xe0>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001800:	4b16      	ldr	r3, [pc, #88]	@ (800185c <BSP_LED_Init+0xe0>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <BSP_LED_Init+0xe4>)
 8001812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001816:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a0f      	ldr	r2, [pc, #60]	@ (8001864 <BSP_LED_Init+0xe8>)
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	f107 0218 	add.w	r2, r7, #24
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f9ea 	bl	8001c0c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <BSP_LED_Init+0xe8>)
 800183c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <BSP_LED_Init+0xe4>)
 8001844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	f000 fba6 	bl	8001f9c <HAL_GPIO_WritePin>
  }

  return ret;
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001852:	4618      	mov	r0, r3
 8001854:	3730      	adds	r7, #48	@ 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	58024400 	.word	0x58024400
 8001860:	0800634c 	.word	0x0800634c
 8001864:	24000008 	.word	0x24000008

08001868 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <BSP_LED_On+0x28>
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d006      	beq.n	8001890 <BSP_LED_On+0x28>
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d003      	beq.n	8001890 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001888:	f06f 0301 	mvn.w	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e00b      	b.n	80018a8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	4a08      	ldr	r2, [pc, #32]	@ (80018b4 <BSP_LED_On+0x4c>)
 8001894:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <BSP_LED_On+0x50>)
 800189c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	f000 fb7a 	bl	8001f9c <HAL_GPIO_WritePin>
  }

  return ret;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24000008 	.word	0x24000008
 80018b8:	0800634c 	.word	0x0800634c

080018bc <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <BSP_LED_Off+0x28>
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d006      	beq.n	80018e4 <BSP_LED_Off+0x28>
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d003      	beq.n	80018e4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018dc:	f06f 0301 	mvn.w	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e00b      	b.n	80018fc <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4a08      	ldr	r2, [pc, #32]	@ (8001908 <BSP_LED_Off+0x4c>)
 80018e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4a07      	ldr	r2, [pc, #28]	@ (800190c <BSP_LED_Off+0x50>)
 80018f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	f000 fb50 	bl	8001f9c <HAL_GPIO_WritePin>
  }

  return ret;
 80018fc:	68fb      	ldr	r3, [r7, #12]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	24000008 	.word	0x24000008
 800190c:	0800634c 	.word	0x0800634c

08001910 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001920:	4b2e      	ldr	r3, [pc, #184]	@ (80019dc <BSP_PB_Init+0xcc>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001926:	4a2d      	ldr	r2, [pc, #180]	@ (80019dc <BSP_PB_Init+0xcc>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <BSP_PB_Init+0xcc>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800193e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001942:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001944:	2302      	movs	r3, #2
 8001946:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4a21      	ldr	r2, [pc, #132]	@ (80019e0 <BSP_PB_Init+0xd0>)
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	f107 020c 	add.w	r2, r7, #12
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f951 	bl	8001c0c <HAL_GPIO_Init>
 800196a:	e031      	b.n	80019d0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800196c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001970:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4a1a      	ldr	r2, [pc, #104]	@ (80019e0 <BSP_PB_Init+0xd0>)
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	f107 020c 	add.w	r2, r7, #12
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f943 	bl	8001c0c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4a16      	ldr	r2, [pc, #88]	@ (80019e4 <BSP_PB_Init+0xd4>)
 800198c:	441a      	add	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4915      	ldr	r1, [pc, #84]	@ (80019e8 <BSP_PB_Init+0xd8>)
 8001992:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001996:	4619      	mov	r1, r3
 8001998:	4610      	mov	r0, r2
 800199a:	f000 f923 	bl	8001be4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4a10      	ldr	r2, [pc, #64]	@ (80019e4 <BSP_PB_Init+0xd4>)
 80019a4:	1898      	adds	r0, r3, r2
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4a10      	ldr	r2, [pc, #64]	@ (80019ec <BSP_PB_Init+0xdc>)
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	461a      	mov	r2, r3
 80019b0:	2100      	movs	r1, #0
 80019b2:	f000 f8f8 	bl	8001ba6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80019b6:	2028      	movs	r0, #40	@ 0x28
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <BSP_PB_Init+0xe0>)
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	f000 f8c7 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80019c8:	2328      	movs	r3, #40	@ 0x28
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f8dd 	bl	8001b8a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	58024400 	.word	0x58024400
 80019e0:	24000014 	.word	0x24000014
 80019e4:	24002274 	.word	0x24002274
 80019e8:	08006354 	.word	0x08006354
 80019ec:	24000018 	.word	0x24000018
 80019f0:	2400001c 	.word	0x2400001c

080019f4 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <BSP_PB_GetState+0x28>)
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 faad 	bl	8001f6c <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	24000014 	.word	0x24000014

08001a20 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fff0 	bl	8001a20 <BSP_PB_Callback>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <__NVIC_GetPriorityGrouping>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <__NVIC_GetPriorityGrouping+0x18>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0307 	and.w	r3, r3, #7
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_EnableIRQ>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0b      	blt.n	8001a8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4907      	ldr	r1, [pc, #28]	@ (8001a98 <__NVIC_EnableIRQ+0x38>)
 8001a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	fa00 f202 	lsl.w	r2, r0, r2
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	@ (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	@ (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	@ 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	@ 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b64:	f7ff ff6e 	bl	8001a44 <__NVIC_GetPriorityGrouping>
 8001b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ffbe 	bl	8001af0 <NVIC_EncodePriority>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff8d 	bl	8001a9c <__NVIC_SetPriority>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff61 	bl	8001a60 <__NVIC_EnableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b087      	sub	sp, #28
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00a      	b.n	8001bd8 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d103      	bne.n	8001bd0 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	605a      	str	r2, [r3, #4]
      break;
 8001bce:	e002      	b.n	8001bd6 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8001bd4:	bf00      	nop
  }

  return status;
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e003      	b.n	8001c00 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c1a:	4b89      	ldr	r3, [pc, #548]	@ (8001e40 <HAL_GPIO_Init+0x234>)
 8001c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c1e:	e194      	b.n	8001f4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8186 	beq.w	8001f44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d005      	beq.n	8001c50 <HAL_GPIO_Init+0x44>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d130      	bne.n	8001cb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c86:	2201      	movs	r2, #1
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 0201 	and.w	r2, r3, #1
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d017      	beq.n	8001cee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d123      	bne.n	8001d42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	69b9      	ldr	r1, [r7, #24]
 8001d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0203 	and.w	r2, r3, #3
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80e0 	beq.w	8001f44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d84:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <HAL_GPIO_Init+0x238>)
 8001d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e44 <HAL_GPIO_Init+0x238>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_GPIO_Init+0x238>)
 8001d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da2:	4a29      	ldr	r2, [pc, #164]	@ (8001e48 <HAL_GPIO_Init+0x23c>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a20      	ldr	r2, [pc, #128]	@ (8001e4c <HAL_GPIO_Init+0x240>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d052      	beq.n	8001e74 <HAL_GPIO_Init+0x268>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e50 <HAL_GPIO_Init+0x244>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d031      	beq.n	8001e3a <HAL_GPIO_Init+0x22e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e54 <HAL_GPIO_Init+0x248>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d02b      	beq.n	8001e36 <HAL_GPIO_Init+0x22a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_GPIO_Init+0x24c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d025      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e5c <HAL_GPIO_Init+0x250>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_GPIO_Init+0x222>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_GPIO_Init+0x254>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x21e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <HAL_GPIO_Init+0x258>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_GPIO_Init+0x25c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x216>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a18      	ldr	r2, [pc, #96]	@ (8001e6c <HAL_GPIO_Init+0x260>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x212>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a17      	ldr	r2, [pc, #92]	@ (8001e70 <HAL_GPIO_Init+0x264>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x20e>
 8001e16:	2309      	movs	r3, #9
 8001e18:	e02d      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	e02b      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e1e:	2308      	movs	r3, #8
 8001e20:	e029      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e027      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e26:	2306      	movs	r3, #6
 8001e28:	e025      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e023      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e021      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e01f      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e01d      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e01b      	b.n	8001e76 <HAL_GPIO_Init+0x26a>
 8001e3e:	bf00      	nop
 8001e40:	58000080 	.word	0x58000080
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58000400 	.word	0x58000400
 8001e4c:	58020000 	.word	0x58020000
 8001e50:	58020400 	.word	0x58020400
 8001e54:	58020800 	.word	0x58020800
 8001e58:	58020c00 	.word	0x58020c00
 8001e5c:	58021000 	.word	0x58021000
 8001e60:	58021400 	.word	0x58021400
 8001e64:	58021800 	.word	0x58021800
 8001e68:	58021c00 	.word	0x58021c00
 8001e6c:	58022000 	.word	0x58022000
 8001e70:	58022400 	.word	0x58022400
 8001e74:	2300      	movs	r3, #0
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e86:	4938      	ldr	r1, [pc, #224]	@ (8001f68 <HAL_GPIO_Init+0x35c>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f47f ae63 	bne.w	8001c20 <HAL_GPIO_Init+0x14>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	3724      	adds	r7, #36	@ 0x24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	58000400 	.word	0x58000400

08001f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e001      	b.n	8001f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fac:	787b      	ldrb	r3, [r7, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fb8:	e003      	b.n	8001fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	041a      	lsls	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	619a      	str	r2, [r3, #24]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f103 0208 	add.w	r2, r3, #8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0208 	add.w	r2, r3, #8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f103 0208 	add.w	r2, r3, #8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d103      	bne.n	8002048 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e00c      	b.n	8002062 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3308      	adds	r3, #8
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e002      	b.n	8002056 <vListInsert+0x2e>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d2f6      	bcs.n	8002050 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6892      	ldr	r2, [r2, #8]
 80020b0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6852      	ldr	r2, [r2, #4]
 80020ba:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d103      	bne.n	80020ce <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80020fa:	2301      	movs	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d104      	bne.n	8002112 <xQueueGenericReset+0x22>
 8002108:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800210c:	4839      	ldr	r0, [pc, #228]	@ (80021f4 <xQueueGenericReset+0x104>)
 800210e:	f7fe f95d 	bl	80003cc <assert_failed>

    if( ( pxQueue != NULL ) &&
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d05d      	beq.n	80021d4 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d059      	beq.n	80021d4 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002128:	2100      	movs	r1, #0
 800212a:	fba3 2302 	umull	r2, r3, r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d000      	beq.n	8002134 <xQueueGenericReset+0x44>
 8002132:	2101      	movs	r1, #1
 8002134:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002136:	2b00      	cmp	r3, #0
 8002138:	d14c      	bne.n	80021d4 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800213a:	f001 fce5 	bl	8003b08 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	441a      	add	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216a:	3b01      	subs	r3, #1
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	441a      	add	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	22ff      	movs	r2, #255	@ 0xff
 800217e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	22ff      	movs	r2, #255	@ 0xff
 8002186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d114      	bne.n	80021ba <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01a      	beq.n	80021ce <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3310      	adds	r3, #16
 800219c:	4618      	mov	r0, r3
 800219e:	f001 f895 	bl	80032cc <xTaskRemoveFromEventList>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d012      	beq.n	80021ce <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <xQueueGenericReset+0x108>)
 80021aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	e009      	b.n	80021ce <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3310      	adds	r3, #16
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff05 	bl	8001fce <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	3324      	adds	r3, #36	@ 0x24
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff00 	bl	8001fce <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80021ce:	f001 fcc7 	bl	8003b60 <vPortExitCritical>
 80021d2:	e001      	b.n	80021d8 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d104      	bne.n	80021e8 <xQueueGenericReset+0xf8>
 80021de:	f240 1163 	movw	r1, #355	@ 0x163
 80021e2:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <xQueueGenericReset+0x104>)
 80021e4:	f7fe f8f2 	bl	80003cc <assert_failed>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	080061f4 	.word	0x080061f4
 80021f8:	e000ed04 	.word	0xe000ed04

080021fc <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <xQueueGenericCreateStatic+0x22>
 8002214:	f240 1177 	movw	r1, #375	@ 0x177
 8002218:	481e      	ldr	r0, [pc, #120]	@ (8002294 <xQueueGenericCreateStatic+0x98>)
 800221a:	f7fe f8d7 	bl	80003cc <assert_failed>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02a      	beq.n	800227a <xQueueGenericCreateStatic+0x7e>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d027      	beq.n	800227a <xQueueGenericCreateStatic+0x7e>
            ( pxStaticQueue != NULL ) &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <xQueueGenericCreateStatic+0x3a>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d021      	beq.n	800227a <xQueueGenericCreateStatic+0x7e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <xQueueGenericCreateStatic+0x46>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11b      	bne.n	800227a <xQueueGenericCreateStatic+0x7e>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002242:	2348      	movs	r3, #72	@ 0x48
 8002244:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b48      	cmp	r3, #72	@ 0x48
 800224a:	d004      	beq.n	8002256 <xQueueGenericCreateStatic+0x5a>
 800224c:	f240 1189 	movw	r1, #393	@ 0x189
 8002250:	4810      	ldr	r0, [pc, #64]	@ (8002294 <xQueueGenericCreateStatic+0x98>)
 8002252:	f7fe f8bb 	bl	80003cc <assert_failed>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8002256:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002264:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	4613      	mov	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f810 	bl	8002298 <prvInitialiseNewQueue>
 8002278:	e007      	b.n	800228a <xQueueGenericCreateStatic+0x8e>
        }
        else
        {
            configASSERT( pxNewQueue );
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <xQueueGenericCreateStatic+0x8e>
 8002280:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <xQueueGenericCreateStatic+0x98>)
 8002286:	f7fe f8a1 	bl	80003cc <assert_failed>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800228a:	697b      	ldr	r3, [r7, #20]
    }
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	080061f4 	.word	0x080061f4

08002298 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e002      	b.n	80022ba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022c6:	2101      	movs	r1, #1
 80022c8:	69b8      	ldr	r0, [r7, #24]
 80022ca:	f7ff ff11 	bl	80020f0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <xQueueGenericSend+0x26>
 80022f4:	f240 317d 	movw	r1, #893	@ 0x37d
 80022f8:	4869      	ldr	r0, [pc, #420]	@ (80024a0 <xQueueGenericSend+0x1c8>)
 80022fa:	f7fe f867 	bl	80003cc <assert_failed>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <xQueueGenericSend+0x34>
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <xQueueGenericSend+0x38>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <xQueueGenericSend+0x3a>
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <xQueueGenericSend+0x48>
 8002316:	f240 317e 	movw	r1, #894	@ 0x37e
 800231a:	4861      	ldr	r0, [pc, #388]	@ (80024a0 <xQueueGenericSend+0x1c8>)
 800231c:	f7fe f856 	bl	80003cc <assert_failed>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d103      	bne.n	800232e <xQueueGenericSend+0x56>
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <xQueueGenericSend+0x5a>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <xQueueGenericSend+0x5c>
 8002332:	2300      	movs	r3, #0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d104      	bne.n	8002342 <xQueueGenericSend+0x6a>
 8002338:	f240 317f 	movw	r1, #895	@ 0x37f
 800233c:	4858      	ldr	r0, [pc, #352]	@ (80024a0 <xQueueGenericSend+0x1c8>)
 800233e:	f7fe f845 	bl	80003cc <assert_failed>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002342:	f001 f9c3 	bl	80036cc <xTaskGetSchedulerState>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <xQueueGenericSend+0x7a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <xQueueGenericSend+0x7e>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <xQueueGenericSend+0x80>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <xQueueGenericSend+0x8e>
 800235c:	f240 3182 	movw	r1, #898	@ 0x382
 8002360:	484f      	ldr	r0, [pc, #316]	@ (80024a0 <xQueueGenericSend+0x1c8>)
 8002362:	f7fe f833 	bl	80003cc <assert_failed>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002366:	f001 fbcf 	bl	8003b08 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <xQueueGenericSend+0xa4>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d129      	bne.n	80023d0 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	6a38      	ldr	r0, [r7, #32]
 8002382:	f000 f9ff 	bl	8002784 <prvCopyDataToQueue>
 8002386:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	3324      	adds	r3, #36	@ 0x24
 8002394:	4618      	mov	r0, r3
 8002396:	f000 ff99 	bl	80032cc <xTaskRemoveFromEventList>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80023a0:	4b40      	ldr	r3, [pc, #256]	@ (80024a4 <xQueueGenericSend+0x1cc>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	e00a      	b.n	80023c8 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80023b8:	4b3a      	ldr	r3, [pc, #232]	@ (80024a4 <xQueueGenericSend+0x1cc>)
 80023ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80023c8:	f001 fbca 	bl	8003b60 <vPortExitCritical>
                return pdPASS;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e063      	b.n	8002498 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023d6:	f001 fbc3 	bl	8003b60 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	e05c      	b.n	8002498 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4618      	mov	r0, r3
 80023ea:	f001 f83f 	bl	800346c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023f2:	f001 fbb5 	bl	8003b60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023f6:	f000 fca1 	bl	8002d3c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023fa:	f001 fb85 	bl	8003b08 <vPortEnterCritical>
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002404:	b25b      	sxtb	r3, r3
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d103      	bne.n	8002414 <xQueueGenericSend+0x13c>
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800241a:	b25b      	sxtb	r3, r3
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d103      	bne.n	800242a <xQueueGenericSend+0x152>
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800242a:	f001 fb99 	bl	8003b60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800242e:	1d3a      	adds	r2, r7, #4
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f001 f82e 	bl	8003498 <xTaskCheckForTimeOut>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d124      	bne.n	800248c <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002442:	6a38      	ldr	r0, [r7, #32]
 8002444:	f000 fa96 	bl	8002974 <prvIsQueueFull>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d018      	beq.n	8002480 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	3310      	adds	r3, #16
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 ff18 	bl	800328c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800245c:	6a38      	ldr	r0, [r7, #32]
 800245e:	f000 fa21 	bl	80028a4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002462:	f000 fc79 	bl	8002d58 <xTaskResumeAll>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f af7c 	bne.w	8002366 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <xQueueGenericSend+0x1cc>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	e772      	b.n	8002366 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002480:	6a38      	ldr	r0, [r7, #32]
 8002482:	f000 fa0f 	bl	80028a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002486:	f000 fc67 	bl	8002d58 <xTaskResumeAll>
 800248a:	e76c      	b.n	8002366 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800248c:	6a38      	ldr	r0, [r7, #32]
 800248e:	f000 fa09 	bl	80028a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002492:	f000 fc61 	bl	8002d58 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002496:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002498:	4618      	mov	r0, r3
 800249a:	3728      	adds	r7, #40	@ 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	080061f4 	.word	0x080061f4
 80024a4:	e000ed04 	.word	0xe000ed04

080024a8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08e      	sub	sp, #56	@ 0x38
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <xQueueGenericSendFromISR+0x22>
 80024c0:	f240 4151 	movw	r1, #1105	@ 0x451
 80024c4:	4846      	ldr	r0, [pc, #280]	@ (80025e0 <xQueueGenericSendFromISR+0x138>)
 80024c6:	f7fd ff81 	bl	80003cc <assert_failed>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <xQueueGenericSendFromISR+0x30>
 80024d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <xQueueGenericSendFromISR+0x34>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <xQueueGenericSendFromISR+0x36>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <xQueueGenericSendFromISR+0x44>
 80024e2:	f240 4152 	movw	r1, #1106	@ 0x452
 80024e6:	483e      	ldr	r0, [pc, #248]	@ (80025e0 <xQueueGenericSendFromISR+0x138>)
 80024e8:	f7fd ff70 	bl	80003cc <assert_failed>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d103      	bne.n	80024fa <xQueueGenericSendFromISR+0x52>
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <xQueueGenericSendFromISR+0x56>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <xQueueGenericSendFromISR+0x58>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <xQueueGenericSendFromISR+0x66>
 8002504:	f240 4153 	movw	r1, #1107	@ 0x453
 8002508:	4835      	ldr	r0, [pc, #212]	@ (80025e0 <xQueueGenericSendFromISR+0x138>)
 800250a:	f7fd ff5f 	bl	80003cc <assert_failed>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800250e:	f001 fbd7 	bl	8003cc0 <vPortValidateInterruptPriority>
        __asm volatile
 8002512:	f3ef 8211 	mrs	r2, BASEPRI
 8002516:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800251a:	b672      	cpsid	i
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	b662      	cpsie	i
 800252a:	61fa      	str	r2, [r7, #28]
 800252c:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 800252e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <xQueueGenericSendFromISR+0x9c>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d140      	bne.n	80025c6 <xQueueGenericSendFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800254e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800255a:	f000 f913 	bl	8002784 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800255e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d112      	bne.n	800258e <xQueueGenericSendFromISR+0xe6>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d027      	beq.n	80025c0 <xQueueGenericSendFromISR+0x118>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002572:	3324      	adds	r3, #36	@ 0x24
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fea9 	bl	80032cc <xTaskRemoveFromEventList>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01f      	beq.n	80025c0 <xQueueGenericSendFromISR+0x118>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01c      	beq.n	80025c0 <xQueueGenericSendFromISR+0x118>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e018      	b.n	80025c0 <xQueueGenericSendFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800258e:	f000 fcdb 	bl	8002f48 <uxTaskGetNumberOfTasks>
 8002592:	6238      	str	r0, [r7, #32]
 8002594:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	429a      	cmp	r2, r3
 800259c:	d910      	bls.n	80025c0 <xQueueGenericSendFromISR+0x118>
 800259e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80025a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025a4:	d104      	bne.n	80025b0 <xQueueGenericSendFromISR+0x108>
 80025a6:	f240 41dc 	movw	r1, #1244	@ 0x4dc
 80025aa:	480d      	ldr	r0, [pc, #52]	@ (80025e0 <xQueueGenericSendFromISR+0x138>)
 80025ac:	f7fd ff0e 	bl	80003cc <assert_failed>
 80025b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80025b4:	3301      	adds	r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	b25a      	sxtb	r2, r3
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80025c0:	2301      	movs	r3, #1
 80025c2:	637b      	str	r3, [r7, #52]	@ 0x34
        {
 80025c4:	e001      	b.n	80025ca <xQueueGenericSendFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	617b      	str	r3, [r7, #20]
        __asm volatile
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f383 8811 	msr	BASEPRI, r3
    }
 80025d4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80025d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3738      	adds	r7, #56	@ 0x38
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	080061f4 	.word	0x080061f4

080025e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	@ 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <xQueueReceive+0x24>
 80025fe:	f240 519c 	movw	r1, #1436	@ 0x59c
 8002602:	485e      	ldr	r0, [pc, #376]	@ (800277c <xQueueReceive+0x198>)
 8002604:	f7fd fee2 	bl	80003cc <assert_failed>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <xQueueReceive+0x32>
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <xQueueReceive+0x36>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <xQueueReceive+0x38>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <xQueueReceive+0x46>
 8002620:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 8002624:	4855      	ldr	r0, [pc, #340]	@ (800277c <xQueueReceive+0x198>)
 8002626:	f7fd fed1 	bl	80003cc <assert_failed>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800262a:	f001 f84f 	bl	80036cc <xTaskGetSchedulerState>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <xQueueReceive+0x56>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <xQueueReceive+0x5a>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueReceive+0x5c>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d104      	bne.n	800264e <xQueueReceive+0x6a>
 8002644:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 8002648:	484c      	ldr	r0, [pc, #304]	@ (800277c <xQueueReceive+0x198>)
 800264a:	f7fd febf 	bl	80003cc <assert_failed>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800264e:	f001 fa5b 	bl	8003b08 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002656:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01f      	beq.n	800269e <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	6a38      	ldr	r0, [r7, #32]
 8002662:	f000 f8f9 	bl	8002858 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00f      	beq.n	8002696 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	3310      	adds	r3, #16
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fe26 	bl	80032cc <xTaskRemoveFromEventList>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002686:	4b3e      	ldr	r3, [pc, #248]	@ (8002780 <xQueueReceive+0x19c>)
 8002688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002696:	f001 fa63 	bl	8003b60 <vPortExitCritical>
                return pdPASS;
 800269a:	2301      	movs	r3, #1
 800269c:	e069      	b.n	8002772 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026a4:	f001 fa5c 	bl	8003b60 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e062      	b.n	8002772 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fed8 	bl	800346c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026bc:	2301      	movs	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026c0:	f001 fa4e 	bl	8003b60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026c4:	f000 fb3a 	bl	8002d3c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026c8:	f001 fa1e 	bl	8003b08 <vPortEnterCritical>
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d103      	bne.n	80026e2 <xQueueReceive+0xfe>
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d103      	bne.n	80026f8 <xQueueReceive+0x114>
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026f8:	f001 fa32 	bl	8003b60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026fc:	1d3a      	adds	r2, r7, #4
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fec7 	bl	8003498 <xTaskCheckForTimeOut>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d123      	bne.n	8002758 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002710:	6a38      	ldr	r0, [r7, #32]
 8002712:	f000 f919 	bl	8002948 <prvIsQueueEmpty>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	3324      	adds	r3, #36	@ 0x24
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fdb1 	bl	800328c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800272a:	6a38      	ldr	r0, [r7, #32]
 800272c:	f000 f8ba 	bl	80028a4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002730:	f000 fb12 	bl	8002d58 <xTaskResumeAll>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d189      	bne.n	800264e <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 800273a:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <xQueueReceive+0x19c>)
 800273c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	e780      	b.n	800264e <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800274c:	6a38      	ldr	r0, [r7, #32]
 800274e:	f000 f8a9 	bl	80028a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002752:	f000 fb01 	bl	8002d58 <xTaskResumeAll>
 8002756:	e77a      	b.n	800264e <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002758:	6a38      	ldr	r0, [r7, #32]
 800275a:	f000 f8a3 	bl	80028a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800275e:	f000 fafb 	bl	8002d58 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002762:	6a38      	ldr	r0, [r7, #32]
 8002764:	f000 f8f0 	bl	8002948 <prvIsQueueEmpty>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	f43f af6f 	beq.w	800264e <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002770:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002772:	4618      	mov	r0, r3
 8002774:	3728      	adds	r7, #40	@ 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	080061f4 	.word	0x080061f4
 8002780:	e000ed04 	.word	0xe000ed04

08002784 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10d      	bne.n	80027be <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d14d      	bne.n	8002846 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 ffaa 	bl	8003708 <xTaskPriorityDisinherit>
 80027b4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	e043      	b.n	8002846 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d119      	bne.n	80027f8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6858      	ldr	r0, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	461a      	mov	r2, r3
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	f003 fcdc 	bl	800618c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	441a      	add	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d32b      	bcc.n	8002846 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	e026      	b.n	8002846 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68d8      	ldr	r0, [r3, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	461a      	mov	r2, r3
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	f003 fcc2 	bl	800618c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	425b      	negs	r3, r3
 8002812:	441a      	add	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d207      	bcs.n	8002834 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	425b      	negs	r3, r3
 800282e:	441a      	add	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d105      	bne.n	8002846 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	3b01      	subs	r3, #1
 8002844:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800284e:	697b      	ldr	r3, [r7, #20]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d018      	beq.n	800289c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	441a      	add	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	429a      	cmp	r2, r3
 8002882:	d303      	bcc.n	800288c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68d9      	ldr	r1, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	461a      	mov	r2, r3
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	f003 fc78 	bl	800618c <memcpy>
    }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028ac:	f001 f92c 	bl	8003b08 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028b6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028b8:	e011      	b.n	80028de <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d012      	beq.n	80028e8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3324      	adds	r3, #36	@ 0x24
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fd00 	bl	80032cc <xTaskRemoveFromEventList>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80028d2:	f000 fe35 	bl	8003540 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	3b01      	subs	r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	dce9      	bgt.n	80028ba <prvUnlockQueue+0x16>
 80028e6:	e000      	b.n	80028ea <prvUnlockQueue+0x46>
                    break;
 80028e8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	22ff      	movs	r2, #255	@ 0xff
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80028f2:	f001 f935 	bl	8003b60 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028f6:	f001 f907 	bl	8003b08 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002900:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002902:	e011      	b.n	8002928 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d012      	beq.n	8002932 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3310      	adds	r3, #16
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fcdb 	bl	80032cc <xTaskRemoveFromEventList>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800291c:	f000 fe10 	bl	8003540 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002920:	7bbb      	ldrb	r3, [r7, #14]
 8002922:	3b01      	subs	r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800292c:	2b00      	cmp	r3, #0
 800292e:	dce9      	bgt.n	8002904 <prvUnlockQueue+0x60>
 8002930:	e000      	b.n	8002934 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002932:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	22ff      	movs	r2, #255	@ 0xff
 8002938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800293c:	f001 f910 	bl	8003b60 <vPortExitCritical>
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002950:	f001 f8da 	bl	8003b08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800295c:	2301      	movs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e001      	b.n	8002966 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002966:	f001 f8fb 	bl	8003b60 <vPortExitCritical>

    return xReturn;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800297c:	f001 f8c4 	bl	8003b08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002988:	429a      	cmp	r2, r3
 800298a:	d102      	bne.n	8002992 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800298c:	2301      	movs	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e001      	b.n	8002996 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002996:	f001 f8e3 	bl	8003b60 <vPortExitCritical>

    return xReturn;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	@ 0x30
 80029a8:	af04      	add	r7, sp, #16
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80029b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d104      	bne.n	80029c2 <xTaskCreateStatic+0x1e>
 80029b8:	f240 2143 	movw	r1, #579	@ 0x243
 80029bc:	4821      	ldr	r0, [pc, #132]	@ (8002a44 <xTaskCreateStatic+0xa0>)
 80029be:	f7fd fd05 	bl	80003cc <assert_failed>
        configASSERT( pxTaskBuffer != NULL );
 80029c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <xTaskCreateStatic+0x2e>
 80029c8:	f44f 7111 	mov.w	r1, #580	@ 0x244
 80029cc:	481d      	ldr	r0, [pc, #116]	@ (8002a44 <xTaskCreateStatic+0xa0>)
 80029ce:	f7fd fcfd 	bl	80003cc <assert_failed>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80029d2:	234c      	movs	r3, #76	@ 0x4c
 80029d4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b4c      	cmp	r3, #76	@ 0x4c
 80029da:	d004      	beq.n	80029e6 <xTaskCreateStatic+0x42>
 80029dc:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80029e0:	4818      	ldr	r0, [pc, #96]	@ (8002a44 <xTaskCreateStatic+0xa0>)
 80029e2:	f7fd fcf3 	bl	80003cc <assert_failed>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029e6:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d023      	beq.n	8002a36 <xTaskCreateStatic+0x92>
 80029ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <xTaskCreateStatic+0x92>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029f8:	224c      	movs	r2, #76	@ 0x4c
 80029fa:	2100      	movs	r1, #0
 80029fc:	69f8      	ldr	r0, [r7, #28]
 80029fe:	f003 fb99 	bl	8006134 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a10:	2300      	movs	r3, #0
 8002a12:	9303      	str	r3, [sp, #12]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	9302      	str	r3, [sp, #8]
 8002a18:	f107 0318 	add.w	r3, r7, #24
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f80d 	bl	8002a48 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a2e:	69f8      	ldr	r0, [r7, #28]
 8002a30:	f000 f88e 	bl	8002b50 <prvAddNewTaskToReadyList>
 8002a34:	e001      	b.n	8002a3a <xTaskCreateStatic+0x96>
        }
        else
        {
            xReturn = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
    }
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	08006220 	.word	0x08006220

08002a48 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	461a      	mov	r2, r3
 8002a60:	21a5      	movs	r1, #165	@ 0xa5
 8002a62:	f003 fb67 	bl	8006134 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002a70:	440b      	add	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 0307 	bic.w	r3, r3, #7
 8002a7e:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <prvInitialiseNewTask+0x4c>
 8002a8a:	f240 3161 	movw	r1, #865	@ 0x361
 8002a8e:	482f      	ldr	r0, [pc, #188]	@ (8002b4c <prvInitialiseNewTask+0x104>)
 8002a90:	f7fd fc9c 	bl	80003cc <assert_failed>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01e      	beq.n	8002ad8 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e012      	b.n	8002ac6 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	7819      	ldrb	r1, [r3, #0]
 8002aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4413      	add	r3, r2
 8002aae:	3334      	adds	r3, #52	@ 0x34
 8002ab0:	460a      	mov	r2, r1
 8002ab2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	4413      	add	r3, r2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b07      	cmp	r3, #7
 8002aca:	d9e9      	bls.n	8002aa0 <prvInitialiseNewTask+0x58>
 8002acc:	e000      	b.n	8002ad0 <prvInitialiseNewTask+0x88>
            {
                break;
 8002ace:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	2b1f      	cmp	r3, #31
 8002adc:	d904      	bls.n	8002ae8 <prvInitialiseNewTask+0xa0>
 8002ade:	f240 3196 	movw	r1, #918	@ 0x396
 8002ae2:	481a      	ldr	r0, [pc, #104]	@ (8002b4c <prvInitialiseNewTask+0x104>)
 8002ae4:	f7fd fc72 	bl	80003cc <assert_failed>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2b1f      	cmp	r3, #31
 8002aec:	d901      	bls.n	8002af2 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002aee:	231f      	movs	r3, #31
 8002af0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afa:	6a3a      	ldr	r2, [r7, #32]
 8002afc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	3304      	adds	r3, #4
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fa83 	bl	800200e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	3318      	adds	r3, #24
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fa7e 	bl	800200e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b16:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f1c3 0220 	rsb	r2, r3, #32
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	6938      	ldr	r0, [r7, #16]
 8002b2e:	f000 fed7 	bl	80038e0 <pxPortInitialiseStack>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b42:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	08006220 	.word	0x08006220

08002b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b58:	f000 ffd6 	bl	8003b08 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c58 <prvAddNewTaskToReadyList+0x108>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a3d      	ldr	r2, [pc, #244]	@ (8002c58 <prvAddNewTaskToReadyList+0x108>)
 8002b64:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b66:	4b3d      	ldr	r3, [pc, #244]	@ (8002c5c <prvAddNewTaskToReadyList+0x10c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c5c <prvAddNewTaskToReadyList+0x10c>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b74:	4b38      	ldr	r3, [pc, #224]	@ (8002c58 <prvAddNewTaskToReadyList+0x108>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d110      	bne.n	8002b9e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b7c:	f000 fcf6 	bl	800356c <prvInitialiseTaskLists>
 8002b80:	e00d      	b.n	8002b9e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b82:	4b37      	ldr	r3, [pc, #220]	@ (8002c60 <prvAddNewTaskToReadyList+0x110>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b8a:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <prvAddNewTaskToReadyList+0x10c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d802      	bhi.n	8002b9e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b98:	4a30      	ldr	r2, [pc, #192]	@ (8002c5c <prvAddNewTaskToReadyList+0x10c>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b9e:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <prvAddNewTaskToReadyList+0x114>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8002c64 <prvAddNewTaskToReadyList+0x114>)
 8002ba6:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	2201      	movs	r2, #1
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c68 <prvAddNewTaskToReadyList+0x118>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c68 <prvAddNewTaskToReadyList+0x118>)
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbe:	492b      	ldr	r1, [pc, #172]	@ (8002c6c <prvAddNewTaskToReadyList+0x11c>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3304      	adds	r3, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	3204      	adds	r2, #4
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	1d1a      	adds	r2, r3, #4
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <prvAddNewTaskToReadyList+0x11c>)
 8002bfe:	441a      	add	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	615a      	str	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c08:	4918      	ldr	r1, [pc, #96]	@ (8002c6c <prvAddNewTaskToReadyList+0x11c>)
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1c59      	adds	r1, r3, #1
 8002c18:	4814      	ldr	r0, [pc, #80]	@ (8002c6c <prvAddNewTaskToReadyList+0x11c>)
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4403      	add	r3, r0
 8002c24:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c26:	f000 ff9b 	bl	8003b60 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <prvAddNewTaskToReadyList+0x110>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00e      	beq.n	8002c50 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <prvAddNewTaskToReadyList+0x10c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d207      	bcs.n	8002c50 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <prvAddNewTaskToReadyList+0x120>)
 8002c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	2400255c 	.word	0x2400255c
 8002c5c:	2400227c 	.word	0x2400227c
 8002c60:	24002568 	.word	0x24002568
 8002c64:	24002578 	.word	0x24002578
 8002c68:	24002564 	.word	0x24002564
 8002c6c:	24002280 	.word	0x24002280
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	@ 0x28
 8002c78:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c82:	1d3a      	adds	r2, r7, #4
 8002c84:	f107 0108 	add.w	r1, r7, #8
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fc69 	bl	8000564 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	9202      	str	r2, [sp, #8]
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	491d      	ldr	r1, [pc, #116]	@ (8002d1c <vTaskStartScheduler+0xa8>)
 8002ca6:	481e      	ldr	r0, [pc, #120]	@ (8002d20 <vTaskStartScheduler+0xac>)
 8002ca8:	f7ff fe7c 	bl	80029a4 <xTaskCreateStatic>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4a1d      	ldr	r2, [pc, #116]	@ (8002d24 <vTaskStartScheduler+0xb0>)
 8002cb0:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d24 <vTaskStartScheduler+0xb0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <vTaskStartScheduler+0x4c>
        {
            xReturn = pdPASS;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e001      	b.n	8002cc4 <vTaskStartScheduler+0x50>
        }
        else
        {
            xReturn = pdFAIL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d118      	bne.n	8002cfc <vTaskStartScheduler+0x88>
        __asm volatile
 8002cca:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002cce:	b672      	cpsid	i
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	b662      	cpsie	i
 8002cde:	613b      	str	r3, [r7, #16]
    }
 8002ce0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <vTaskStartScheduler+0xb4>)
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <vTaskStartScheduler+0xb8>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <vTaskStartScheduler+0xbc>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002cf6:	f000 fe7d 	bl	80039f4 <xPortStartScheduler>
 8002cfa:	e008      	b.n	8002d0e <vTaskStartScheduler+0x9a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d104      	bne.n	8002d0e <vTaskStartScheduler+0x9a>
 8002d04:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 8002d08:	480a      	ldr	r0, [pc, #40]	@ (8002d34 <vTaskStartScheduler+0xc0>)
 8002d0a:	f7fd fb5f 	bl	80003cc <assert_failed>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <vTaskStartScheduler+0xc4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	0800624c 	.word	0x0800624c
 8002d20:	08003559 	.word	0x08003559
 8002d24:	24002580 	.word	0x24002580
 8002d28:	2400257c 	.word	0x2400257c
 8002d2c:	24002568 	.word	0x24002568
 8002d30:	24002560 	.word	0x24002560
 8002d34:	08006220 	.word	0x08006220
 8002d38:	24000020 	.word	0x24000020

08002d3c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <vTaskSuspendAll+0x18>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3301      	adds	r3, #1
 8002d46:	4a03      	ldr	r2, [pc, #12]	@ (8002d54 <vTaskSuspendAll+0x18>)
 8002d48:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	24002584 	.word	0x24002584

08002d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8002d66:	4b6e      	ldr	r3, [pc, #440]	@ (8002f20 <xTaskResumeAll+0x1c8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <xTaskResumeAll+0x20>
 8002d6e:	f640 0193 	movw	r1, #2195	@ 0x893
 8002d72:	486c      	ldr	r0, [pc, #432]	@ (8002f24 <xTaskResumeAll+0x1cc>)
 8002d74:	f7fd fb2a 	bl	80003cc <assert_failed>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d78:	f000 fec6 	bl	8003b08 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d7c:	4b68      	ldr	r3, [pc, #416]	@ (8002f20 <xTaskResumeAll+0x1c8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	4a67      	ldr	r2, [pc, #412]	@ (8002f20 <xTaskResumeAll+0x1c8>)
 8002d84:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002d86:	4b66      	ldr	r3, [pc, #408]	@ (8002f20 <xTaskResumeAll+0x1c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 80c0 	bne.w	8002f10 <xTaskResumeAll+0x1b8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d90:	4b65      	ldr	r3, [pc, #404]	@ (8002f28 <xTaskResumeAll+0x1d0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80bb 	beq.w	8002f10 <xTaskResumeAll+0x1b8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d9a:	e08a      	b.n	8002eb2 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d9c:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <xTaskResumeAll+0x1d4>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	6a12      	ldr	r2, [r2, #32]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	69d2      	ldr	r2, [r2, #28]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3318      	adds	r3, #24
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d103      	bne.n	8002dd2 <xTaskResumeAll+0x7a>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	6a1a      	ldr	r2, [r3, #32]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	1e5a      	subs	r2, r3, #1
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	68d2      	ldr	r2, [r2, #12]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	6892      	ldr	r2, [r2, #8]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3304      	adds	r3, #4
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d103      	bne.n	8002e10 <xTaskResumeAll+0xb8>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	615a      	str	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	1e5a      	subs	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	2201      	movs	r2, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	4b41      	ldr	r3, [pc, #260]	@ (8002f30 <xTaskResumeAll+0x1d8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	4a40      	ldr	r2, [pc, #256]	@ (8002f30 <xTaskResumeAll+0x1d8>)
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e36:	493f      	ldr	r1, [pc, #252]	@ (8002f34 <xTaskResumeAll+0x1dc>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3304      	adds	r3, #4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	3204      	adds	r2, #4
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1d1a      	adds	r2, r3, #4
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4a2f      	ldr	r2, [pc, #188]	@ (8002f34 <xTaskResumeAll+0x1dc>)
 8002e76:	441a      	add	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	615a      	str	r2, [r3, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e80:	492c      	ldr	r1, [pc, #176]	@ (8002f34 <xTaskResumeAll+0x1dc>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	4828      	ldr	r0, [pc, #160]	@ (8002f34 <xTaskResumeAll+0x1dc>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4403      	add	r3, r0
 8002e9c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea2:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <xTaskResumeAll+0x1e0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d902      	bls.n	8002eb2 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8002eac:	4b23      	ldr	r3, [pc, #140]	@ (8002f3c <xTaskResumeAll+0x1e4>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f2c <xTaskResumeAll+0x1d4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f47f af70 	bne.w	8002d9c <xTaskResumeAll+0x44>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ec2:	f000 fbe7 	bl	8003694 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f40 <xTaskResumeAll+0x1e8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ed2:	f000 f845 	bl	8002f60 <xTaskIncrementTick>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8002edc:	4b17      	ldr	r3, [pc, #92]	@ (8002f3c <xTaskResumeAll+0x1e4>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f1      	bne.n	8002ed2 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8002eee:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <xTaskResumeAll+0x1e8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ef4:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <xTaskResumeAll+0x1e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <xTaskResumeAll+0x1b8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f00:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <xTaskResumeAll+0x1ec>)
 8002f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f10:	f000 fe26 	bl	8003b60 <vPortExitCritical>

    return xAlreadyYielded;
 8002f14:	693b      	ldr	r3, [r7, #16]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	24002584 	.word	0x24002584
 8002f24:	08006220 	.word	0x08006220
 8002f28:	2400255c 	.word	0x2400255c
 8002f2c:	24002530 	.word	0x24002530
 8002f30:	24002564 	.word	0x24002564
 8002f34:	24002280 	.word	0x24002280
 8002f38:	2400227c 	.word	0x2400227c
 8002f3c:	24002570 	.word	0x24002570
 8002f40:	2400256c 	.word	0x2400256c
 8002f44:	e000ed04 	.word	0xe000ed04

08002f48 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <uxTaskGetNumberOfTasks+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	2400255c 	.word	0x2400255c

08002f60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8003164 <xTaskIncrementTick+0x204>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 80ec 	bne.w	800314c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f74:	4b7c      	ldr	r3, [pc, #496]	@ (8003168 <xTaskIncrementTick+0x208>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f7c:	4a7a      	ldr	r2, [pc, #488]	@ (8003168 <xTaskIncrementTick+0x208>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11a      	bne.n	8002fbe <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f88:	4b78      	ldr	r3, [pc, #480]	@ (800316c <xTaskIncrementTick+0x20c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <xTaskIncrementTick+0x3c>
 8002f92:	f640 21f4 	movw	r1, #2804	@ 0xaf4
 8002f96:	4876      	ldr	r0, [pc, #472]	@ (8003170 <xTaskIncrementTick+0x210>)
 8002f98:	f7fd fa18 	bl	80003cc <assert_failed>
 8002f9c:	4b73      	ldr	r3, [pc, #460]	@ (800316c <xTaskIncrementTick+0x20c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	4b74      	ldr	r3, [pc, #464]	@ (8003174 <xTaskIncrementTick+0x214>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a71      	ldr	r2, [pc, #452]	@ (800316c <xTaskIncrementTick+0x20c>)
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4a72      	ldr	r2, [pc, #456]	@ (8003174 <xTaskIncrementTick+0x214>)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b71      	ldr	r3, [pc, #452]	@ (8003178 <xTaskIncrementTick+0x218>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	4a70      	ldr	r2, [pc, #448]	@ (8003178 <xTaskIncrementTick+0x218>)
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	f000 fb6b 	bl	8003694 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800317c <xTaskIncrementTick+0x21c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	f0c0 80a6 	bcc.w	8003116 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fca:	4b68      	ldr	r3, [pc, #416]	@ (800316c <xTaskIncrementTick+0x20c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd4:	4b69      	ldr	r3, [pc, #420]	@ (800317c <xTaskIncrementTick+0x21c>)
 8002fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fda:	601a      	str	r2, [r3, #0]
                    break;
 8002fdc:	e09b      	b.n	8003116 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fde:	4b63      	ldr	r3, [pc, #396]	@ (800316c <xTaskIncrementTick+0x20c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d203      	bcs.n	8002ffe <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ff6:	4a61      	ldr	r2, [pc, #388]	@ (800317c <xTaskIncrementTick+0x21c>)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002ffc:	e08b      	b.n	8003116 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68d2      	ldr	r2, [r2, #12]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	6892      	ldr	r2, [r2, #8]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	3304      	adds	r3, #4
 8003020:	429a      	cmp	r2, r3
 8003022:	d103      	bne.n	800302c <xTaskIncrementTick+0xcc>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2200      	movs	r2, #0
 8003030:	615a      	str	r2, [r3, #20]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01e      	beq.n	8003082 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6a12      	ldr	r2, [r2, #32]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	69d2      	ldr	r2, [r2, #28]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3318      	adds	r3, #24
 8003066:	429a      	cmp	r2, r3
 8003068:	d103      	bne.n	8003072 <xTaskIncrementTick+0x112>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2200      	movs	r2, #0
 8003076:	629a      	str	r2, [r3, #40]	@ 0x28
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1e5a      	subs	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	2201      	movs	r2, #1
 8003088:	409a      	lsls	r2, r3
 800308a:	4b3d      	ldr	r3, [pc, #244]	@ (8003180 <xTaskIncrementTick+0x220>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	4a3b      	ldr	r2, [pc, #236]	@ (8003180 <xTaskIncrementTick+0x220>)
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003098:	493a      	ldr	r1, [pc, #232]	@ (8003184 <xTaskIncrementTick+0x224>)
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3304      	adds	r3, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	60da      	str	r2, [r3, #12]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	3204      	adds	r2, #4
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1d1a      	adds	r2, r3, #4
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <xTaskIncrementTick+0x224>)
 80030d8:	441a      	add	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	615a      	str	r2, [r3, #20]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e2:	4928      	ldr	r1, [pc, #160]	@ (8003184 <xTaskIncrementTick+0x224>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	1c59      	adds	r1, r3, #1
 80030f2:	4824      	ldr	r0, [pc, #144]	@ (8003184 <xTaskIncrementTick+0x224>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4403      	add	r3, r0
 80030fe:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003104:	4b20      	ldr	r3, [pc, #128]	@ (8003188 <xTaskIncrementTick+0x228>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	429a      	cmp	r2, r3
 800310c:	f67f af5d 	bls.w	8002fca <xTaskIncrementTick+0x6a>
                        {
                            xSwitchRequired = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003114:	e759      	b.n	8002fca <xTaskIncrementTick+0x6a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003116:	4b1c      	ldr	r3, [pc, #112]	@ (8003188 <xTaskIncrementTick+0x228>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311c:	4919      	ldr	r1, [pc, #100]	@ (8003184 <xTaskIncrementTick+0x224>)
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d901      	bls.n	8003132 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800312e:	2301      	movs	r3, #1
 8003130:	61fb      	str	r3, [r7, #28]

        #if ( configUSE_TICK_HOOK == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks == ( TickType_t ) 0 )
 8003132:	4b16      	ldr	r3, [pc, #88]	@ (800318c <xTaskIncrementTick+0x22c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <xTaskIncrementTick+0x1de>
            {
                vApplicationTickHook();
 800313a:	f7fd f97b 	bl	8000434 <vApplicationTickHook>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800313e:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <xTaskIncrementTick+0x230>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <xTaskIncrementTick+0x1fa>
            {
                xSwitchRequired = pdTRUE;
 8003146:	2301      	movs	r3, #1
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e006      	b.n	800315a <xTaskIncrementTick+0x1fa>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800314c:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <xTaskIncrementTick+0x22c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	4a0e      	ldr	r2, [pc, #56]	@ (800318c <xTaskIncrementTick+0x22c>)
 8003154:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
 8003156:	f7fd f96d 	bl	8000434 <vApplicationTickHook>
        }
        #endif
    }

    return xSwitchRequired;
 800315a:	69fb      	ldr	r3, [r7, #28]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	24002584 	.word	0x24002584
 8003168:	24002560 	.word	0x24002560
 800316c:	24002528 	.word	0x24002528
 8003170:	08006220 	.word	0x08006220
 8003174:	2400252c 	.word	0x2400252c
 8003178:	24002574 	.word	0x24002574
 800317c:	2400257c 	.word	0x2400257c
 8003180:	24002564 	.word	0x24002564
 8003184:	24002280 	.word	0x24002280
 8003188:	2400227c 	.word	0x2400227c
 800318c:	2400256c 	.word	0x2400256c
 8003190:	24002570 	.word	0x24002570

08003194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800319a:	4b36      	ldr	r3, [pc, #216]	@ (8003274 <vTaskSwitchContext+0xe0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031a2:	4b35      	ldr	r3, [pc, #212]	@ (8003278 <vTaskSwitchContext+0xe4>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80031a8:	e05f      	b.n	800326a <vTaskSwitchContext+0xd6>
        xYieldPending = pdFALSE;
 80031aa:	4b33      	ldr	r3, [pc, #204]	@ (8003278 <vTaskSwitchContext+0xe4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80031b0:	4b32      	ldr	r3, [pc, #200]	@ (800327c <vTaskSwitchContext+0xe8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d111      	bne.n	80031ec <vTaskSwitchContext+0x58>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3304      	adds	r3, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d10b      	bne.n	80031ec <vTaskSwitchContext+0x58>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3308      	adds	r3, #8
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d105      	bne.n	80031ec <vTaskSwitchContext+0x58>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	330c      	adds	r3, #12
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d008      	beq.n	80031fe <vTaskSwitchContext+0x6a>
 80031ec:	4b23      	ldr	r3, [pc, #140]	@ (800327c <vTaskSwitchContext+0xe8>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b22      	ldr	r3, [pc, #136]	@ (800327c <vTaskSwitchContext+0xe8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3334      	adds	r3, #52	@ 0x34
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f7fd f9a5 	bl	8000548 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031fe:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <vTaskSwitchContext+0xec>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f1c3 031f 	rsb	r3, r3, #31
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	491b      	ldr	r1, [pc, #108]	@ (8003284 <vTaskSwitchContext+0xf0>)
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <vTaskSwitchContext+0x9e>
 8003228:	f640 4133 	movw	r1, #3123	@ 0xc33
 800322c:	4816      	ldr	r0, [pc, #88]	@ (8003288 <vTaskSwitchContext+0xf4>)
 800322e:	f7fd f8cd 	bl	80003cc <assert_failed>
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4a11      	ldr	r2, [pc, #68]	@ (8003284 <vTaskSwitchContext+0xf0>)
 800323e:	4413      	add	r3, r2
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	3308      	adds	r3, #8
 8003254:	429a      	cmp	r2, r3
 8003256:	d103      	bne.n	8003260 <vTaskSwitchContext+0xcc>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4a05      	ldr	r2, [pc, #20]	@ (800327c <vTaskSwitchContext+0xe8>)
 8003268:	6013      	str	r3, [r2, #0]
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	24002584 	.word	0x24002584
 8003278:	24002570 	.word	0x24002570
 800327c:	2400227c 	.word	0x2400227c
 8003280:	24002564 	.word	0x24002564
 8003284:	24002280 	.word	0x24002280
 8003288:	08006220 	.word	0x08006220

0800328c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <vTaskPlaceOnEventList+0x1a>
 800329c:	f640 414b 	movw	r1, #3147	@ 0xc4b
 80032a0:	4808      	ldr	r0, [pc, #32]	@ (80032c4 <vTaskPlaceOnEventList+0x38>)
 80032a2:	f7fd f893 	bl	80003cc <assert_failed>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <vTaskPlaceOnEventList+0x3c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3318      	adds	r3, #24
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe feba 	bl	8002028 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032b4:	2101      	movs	r1, #1
 80032b6:	6838      	ldr	r0, [r7, #0]
 80032b8:	f000 fabe 	bl	8003838 <prvAddCurrentTaskToDelayedList>
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	08006220 	.word	0x08006220
 80032c8:	2400227c 	.word	0x2400227c

080032cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <xTaskRemoveFromEventList+0x20>
 80032e2:	f640 41b1 	movw	r1, #3249	@ 0xcb1
 80032e6:	485a      	ldr	r0, [pc, #360]	@ (8003450 <xTaskRemoveFromEventList+0x184>)
 80032e8:	f7fd f870 	bl	80003cc <assert_failed>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	6a12      	ldr	r2, [r2, #32]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	69d2      	ldr	r2, [r2, #28]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3318      	adds	r3, #24
 800330e:	429a      	cmp	r2, r3
 8003310:	d103      	bne.n	800331a <xTaskRemoveFromEventList+0x4e>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2200      	movs	r2, #0
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1e5a      	subs	r2, r3, #1
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800332a:	4b4a      	ldr	r3, [pc, #296]	@ (8003454 <xTaskRemoveFromEventList+0x188>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d15e      	bne.n	80033f0 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	68d2      	ldr	r2, [r2, #12]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	6892      	ldr	r2, [r2, #8]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	3304      	adds	r3, #4
 8003354:	429a      	cmp	r2, r3
 8003356:	d103      	bne.n	8003360 <xTaskRemoveFromEventList+0x94>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2200      	movs	r2, #0
 8003364:	615a      	str	r2, [r3, #20]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	2201      	movs	r2, #1
 8003376:	409a      	lsls	r2, r3
 8003378:	4b37      	ldr	r3, [pc, #220]	@ (8003458 <xTaskRemoveFromEventList+0x18c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	4a36      	ldr	r2, [pc, #216]	@ (8003458 <xTaskRemoveFromEventList+0x18c>)
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003386:	4935      	ldr	r1, [pc, #212]	@ (800345c <xTaskRemoveFromEventList+0x190>)
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3304      	adds	r3, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	3204      	adds	r2, #4
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1d1a      	adds	r2, r3, #4
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4a25      	ldr	r2, [pc, #148]	@ (800345c <xTaskRemoveFromEventList+0x190>)
 80033c6:	441a      	add	r2, r3
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	615a      	str	r2, [r3, #20]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d0:	4922      	ldr	r1, [pc, #136]	@ (800345c <xTaskRemoveFromEventList+0x190>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1c59      	adds	r1, r3, #1
 80033e0:	481e      	ldr	r0, [pc, #120]	@ (800345c <xTaskRemoveFromEventList+0x190>)
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4403      	add	r3, r0
 80033ec:	6019      	str	r1, [r3, #0]
 80033ee:	e01b      	b.n	8003428 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <xTaskRemoveFromEventList+0x194>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	61da      	str	r2, [r3, #28]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	621a      	str	r2, [r3, #32]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	3218      	adds	r2, #24
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f103 0218 	add.w	r2, r3, #24
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4a11      	ldr	r2, [pc, #68]	@ (8003460 <xTaskRemoveFromEventList+0x194>)
 800341c:	629a      	str	r2, [r3, #40]	@ 0x28
 800341e:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <xTaskRemoveFromEventList+0x194>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	4a0e      	ldr	r2, [pc, #56]	@ (8003460 <xTaskRemoveFromEventList+0x194>)
 8003426:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800342c:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <xTaskRemoveFromEventList+0x198>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	429a      	cmp	r2, r3
 8003434:	d905      	bls.n	8003442 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003436:	2301      	movs	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800343a:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <xTaskRemoveFromEventList+0x19c>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e001      	b.n	8003446 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8003446:	69fb      	ldr	r3, [r7, #28]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	08006220 	.word	0x08006220
 8003454:	24002584 	.word	0x24002584
 8003458:	24002564 	.word	0x24002564
 800345c:	24002280 	.word	0x24002280
 8003460:	24002530 	.word	0x24002530
 8003464:	2400227c 	.word	0x2400227c
 8003468:	24002570 	.word	0x24002570

0800346c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003474:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <vTaskInternalSetTimeOutState+0x24>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <vTaskInternalSetTimeOutState+0x28>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	605a      	str	r2, [r3, #4]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	24002574 	.word	0x24002574
 8003494:	24002560 	.word	0x24002560

08003498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <xTaskCheckForTimeOut+0x1a>
 80034a8:	f640 512c 	movw	r1, #3372	@ 0xd2c
 80034ac:	4821      	ldr	r0, [pc, #132]	@ (8003534 <xTaskCheckForTimeOut+0x9c>)
 80034ae:	f7fc ff8d 	bl	80003cc <assert_failed>
    configASSERT( pxTicksToWait );
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d104      	bne.n	80034c2 <xTaskCheckForTimeOut+0x2a>
 80034b8:	f640 512d 	movw	r1, #3373	@ 0xd2d
 80034bc:	481d      	ldr	r0, [pc, #116]	@ (8003534 <xTaskCheckForTimeOut+0x9c>)
 80034be:	f7fc ff85 	bl	80003cc <assert_failed>

    taskENTER_CRITICAL();
 80034c2:	f000 fb21 	bl	8003b08 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003538 <xTaskCheckForTimeOut+0xa0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b18      	ldr	r3, [pc, #96]	@ (800353c <xTaskCheckForTimeOut+0xa4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d00a      	beq.n	80034f8 <xTaskCheckForTimeOut+0x60>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d305      	bcc.n	80034f8 <xTaskCheckForTimeOut+0x60>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e015      	b.n	8003524 <xTaskCheckForTimeOut+0x8c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d20b      	bcs.n	800351a <xTaskCheckForTimeOut+0x82>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad2      	subs	r2, r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffac 	bl	800346c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e004      	b.n	8003524 <xTaskCheckForTimeOut+0x8c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003524:	f000 fb1c 	bl	8003b60 <vPortExitCritical>

    return xReturn;
 8003528:	697b      	ldr	r3, [r7, #20]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	08006220 	.word	0x08006220
 8003538:	24002560 	.word	0x24002560
 800353c:	24002574 	.word	0x24002574

08003540 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003544:	4b03      	ldr	r3, [pc, #12]	@ (8003554 <vTaskMissedYield+0x14>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	24002570 	.word	0x24002570

08003558 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003560:	f000 f83e 	bl	80035e0 <prvCheckTasksWaitingTermination>
        #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */

        #if ( configUSE_IDLE_HOOK == 1 )
        {
            /* Call the user defined function from within the idle task. */
            vApplicationIdleHook();
 8003564:	f7fc ffc0 	bl	80004e8 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003568:	bf00      	nop
 800356a:	e7f9      	b.n	8003560 <prvIdleTask+0x8>

0800356c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	e00c      	b.n	8003592 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4a10      	ldr	r2, [pc, #64]	@ (80035c4 <prvInitialiseTaskLists+0x58>)
 8003584:	4413      	add	r3, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fd21 	bl	8001fce <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3301      	adds	r3, #1
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b1f      	cmp	r3, #31
 8003596:	d9ef      	bls.n	8003578 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003598:	480b      	ldr	r0, [pc, #44]	@ (80035c8 <prvInitialiseTaskLists+0x5c>)
 800359a:	f7fe fd18 	bl	8001fce <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800359e:	480b      	ldr	r0, [pc, #44]	@ (80035cc <prvInitialiseTaskLists+0x60>)
 80035a0:	f7fe fd15 	bl	8001fce <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035a4:	480a      	ldr	r0, [pc, #40]	@ (80035d0 <prvInitialiseTaskLists+0x64>)
 80035a6:	f7fe fd12 	bl	8001fce <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80035aa:	480a      	ldr	r0, [pc, #40]	@ (80035d4 <prvInitialiseTaskLists+0x68>)
 80035ac:	f7fe fd0f 	bl	8001fce <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035b0:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <prvInitialiseTaskLists+0x6c>)
 80035b2:	4a05      	ldr	r2, [pc, #20]	@ (80035c8 <prvInitialiseTaskLists+0x5c>)
 80035b4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035b6:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <prvInitialiseTaskLists+0x70>)
 80035b8:	4a04      	ldr	r2, [pc, #16]	@ (80035cc <prvInitialiseTaskLists+0x60>)
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	24002280 	.word	0x24002280
 80035c8:	24002500 	.word	0x24002500
 80035cc:	24002514 	.word	0x24002514
 80035d0:	24002530 	.word	0x24002530
 80035d4:	24002544 	.word	0x24002544
 80035d8:	24002528 	.word	0x24002528
 80035dc:	2400252c 	.word	0x2400252c

080035e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035e6:	e019      	b.n	800361c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80035e8:	f000 fa8e 	bl	8003b08 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ec:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <prvCheckTasksWaitingTermination+0x50>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe fd4e 	bl	800209a <uxListRemove>
                --uxCurrentNumberOfTasks;
 80035fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003634 <prvCheckTasksWaitingTermination+0x54>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3b01      	subs	r3, #1
 8003604:	4a0b      	ldr	r2, [pc, #44]	@ (8003634 <prvCheckTasksWaitingTermination+0x54>)
 8003606:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003608:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <prvCheckTasksWaitingTermination+0x58>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3b01      	subs	r3, #1
 800360e:	4a0a      	ldr	r2, [pc, #40]	@ (8003638 <prvCheckTasksWaitingTermination+0x58>)
 8003610:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003612:	f000 faa5 	bl	8003b60 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f810 	bl	800363c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800361c:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <prvCheckTasksWaitingTermination+0x58>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e1      	bne.n	80035e8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	24002544 	.word	0x24002544
 8003634:	2400255c 	.word	0x2400255c
 8003638:	24002558 	.word	0x24002558

0800363c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fb68 	bl	8003d28 <vPortFree>
                vPortFree( pxTCB );
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fb65 	bl	8003d28 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800365e:	e012      	b.n	8003686 <prvDeleteTCB+0x4a>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003666:	2b01      	cmp	r3, #1
 8003668:	d103      	bne.n	8003672 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fb5c 	bl	8003d28 <vPortFree>
    }
 8003670:	e009      	b.n	8003686 <prvDeleteTCB+0x4a>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003678:	2b02      	cmp	r3, #2
 800367a:	d004      	beq.n	8003686 <prvDeleteTCB+0x4a>
 800367c:	f640 71d9 	movw	r1, #4057	@ 0xfd9
 8003680:	4803      	ldr	r0, [pc, #12]	@ (8003690 <prvDeleteTCB+0x54>)
 8003682:	f7fc fea3 	bl	80003cc <assert_failed>
    }
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	08006220 	.word	0x08006220

08003694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003698:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036a2:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <prvResetNextTaskUnblockTime+0x34>)
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036aa:	e005      	b.n	80036b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a04      	ldr	r2, [pc, #16]	@ (80036c8 <prvResetNextTaskUnblockTime+0x34>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	24002528 	.word	0x24002528
 80036c8:	2400257c 	.word	0x2400257c

080036cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <xTaskGetSchedulerState+0x34>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80036da:	2301      	movs	r3, #1
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	e008      	b.n	80036f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80036e0:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <xTaskGetSchedulerState+0x38>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80036e8:	2302      	movs	r3, #2
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	e001      	b.n	80036f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036f2:	687b      	ldr	r3, [r7, #4]
    }
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	24002568 	.word	0x24002568
 8003704:	24002584 	.word	0x24002584

08003708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d07f      	beq.n	800381e <xTaskPriorityDisinherit+0x116>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800371e:	4b42      	ldr	r3, [pc, #264]	@ (8003828 <xTaskPriorityDisinherit+0x120>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	429a      	cmp	r2, r3
 8003726:	d004      	beq.n	8003732 <xTaskPriorityDisinherit+0x2a>
 8003728:	f241 018c 	movw	r1, #4236	@ 0x108c
 800372c:	483f      	ldr	r0, [pc, #252]	@ (800382c <xTaskPriorityDisinherit+0x124>)
 800372e:	f7fc fe4d 	bl	80003cc <assert_failed>
            configASSERT( pxTCB->uxMutexesHeld );
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <xTaskPriorityDisinherit+0x3c>
 800373a:	f241 018d 	movw	r1, #4237	@ 0x108d
 800373e:	483b      	ldr	r0, [pc, #236]	@ (800382c <xTaskPriorityDisinherit+0x124>)
 8003740:	f7fc fe44 	bl	80003cc <assert_failed>
            ( pxTCB->uxMutexesHeld )--;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	1e5a      	subs	r2, r3, #1
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003756:	429a      	cmp	r2, r3
 8003758:	d061      	beq.n	800381e <xTaskPriorityDisinherit+0x116>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d15d      	bne.n	800381e <xTaskPriorityDisinherit+0x116>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3304      	adds	r3, #4
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe fc97 	bl	800209a <uxListRemove>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003776:	2201      	movs	r2, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43da      	mvns	r2, r3
 800377e:	4b2c      	ldr	r3, [pc, #176]	@ (8003830 <xTaskPriorityDisinherit+0x128>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4013      	ands	r3, r2
 8003784:	4a2a      	ldr	r2, [pc, #168]	@ (8003830 <xTaskPriorityDisinherit+0x128>)
 8003786:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	f1c3 0220 	rsb	r2, r3, #32
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	2201      	movs	r2, #1
 80037a2:	409a      	lsls	r2, r3
 80037a4:	4b22      	ldr	r3, [pc, #136]	@ (8003830 <xTaskPriorityDisinherit+0x128>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	4a21      	ldr	r2, [pc, #132]	@ (8003830 <xTaskPriorityDisinherit+0x128>)
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b2:	4920      	ldr	r1, [pc, #128]	@ (8003834 <xTaskPriorityDisinherit+0x12c>)
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3304      	adds	r3, #4
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	3204      	adds	r2, #4
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1d1a      	adds	r2, r3, #4
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4a10      	ldr	r2, [pc, #64]	@ (8003834 <xTaskPriorityDisinherit+0x12c>)
 80037f2:	441a      	add	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	615a      	str	r2, [r3, #20]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fc:	490d      	ldr	r1, [pc, #52]	@ (8003834 <xTaskPriorityDisinherit+0x12c>)
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	4809      	ldr	r0, [pc, #36]	@ (8003834 <xTaskPriorityDisinherit+0x12c>)
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4403      	add	r3, r0
 8003818:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800381a:	2301      	movs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800381e:	697b      	ldr	r3, [r7, #20]
    }
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	2400227c 	.word	0x2400227c
 800382c:	08006220 	.word	0x08006220
 8003830:	24002564 	.word	0x24002564
 8003834:	24002280 	.word	0x24002280

08003838 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003842:	4b21      	ldr	r3, [pc, #132]	@ (80038c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003848:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <prvAddCurrentTaskToDelayedList+0x94>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3304      	adds	r3, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fc23 	bl	800209a <uxListRemove>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800385a:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <prvAddCurrentTaskToDelayedList+0x94>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	2201      	movs	r2, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	4b19      	ldr	r3, [pc, #100]	@ (80038d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4013      	ands	r3, r2
 800386e:	4a18      	ldr	r2, [pc, #96]	@ (80038d0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003870:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800387a:	4b14      	ldr	r3, [pc, #80]	@ (80038cc <prvAddCurrentTaskToDelayedList+0x94>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	429a      	cmp	r2, r3
 8003888:	d209      	bcs.n	800389e <prvAddCurrentTaskToDelayedList+0x66>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800388a:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <prvAddCurrentTaskToDelayedList+0x94>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3304      	adds	r3, #4
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f7fe fbc6 	bl	8002028 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800389c:	e010      	b.n	80038c0 <prvAddCurrentTaskToDelayedList+0x88>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <prvAddCurrentTaskToDelayedList+0x94>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f7fe fbbc 	bl	8002028 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d202      	bcs.n	80038c0 <prvAddCurrentTaskToDelayedList+0x88>
                xNextTaskUnblockTime = xTimeToWake;
 80038ba:	4a08      	ldr	r2, [pc, #32]	@ (80038dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	24002560 	.word	0x24002560
 80038cc:	2400227c 	.word	0x2400227c
 80038d0:	24002564 	.word	0x24002564
 80038d4:	2400252c 	.word	0x2400252c
 80038d8:	24002528 	.word	0x24002528
 80038dc:	2400257c 	.word	0x2400257c

080038e0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3b04      	subs	r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3b04      	subs	r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f023 0201 	bic.w	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3b04      	subs	r3, #4
 800390e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003910:	4a0c      	ldr	r2, [pc, #48]	@ (8003944 <pxPortInitialiseStack+0x64>)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3b14      	subs	r3, #20
 800391a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3b04      	subs	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f06f 0202 	mvn.w	r2, #2
 800392e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b20      	subs	r3, #32
 8003934:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003936:	68fb      	ldr	r3, [r7, #12]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	08003949 	.word	0x08003949

08003948 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003952:	4b0f      	ldr	r3, [pc, #60]	@ (8003990 <prvTaskExitError+0x48>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d003      	beq.n	8003964 <prvTaskExitError+0x1c>
 800395c:	21e5      	movs	r1, #229	@ 0xe5
 800395e:	480d      	ldr	r0, [pc, #52]	@ (8003994 <prvTaskExitError+0x4c>)
 8003960:	f7fc fd34 	bl	80003cc <assert_failed>
        __asm volatile
 8003964:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003968:	b672      	cpsid	i
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	b662      	cpsie	i
 8003978:	607b      	str	r3, [r7, #4]
    }
 800397a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800397c:	bf00      	nop
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0fc      	beq.n	800397e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	24000024 	.word	0x24000024
 8003994:	08006254 	.word	0x08006254
	...

080039a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <pxCurrentTCBConst2>)
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	6808      	ldr	r0, [r1, #0]
 80039a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039aa:	f380 8809 	msr	PSP, r0
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f380 8811 	msr	BASEPRI, r0
 80039ba:	4770      	bx	lr
 80039bc:	f3af 8000 	nop.w

080039c0 <pxCurrentTCBConst2>:
 80039c0:	2400227c 	.word	0x2400227c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop

080039c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80039c8:	4808      	ldr	r0, [pc, #32]	@ (80039ec <prvPortStartFirstTask+0x24>)
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	f380 8808 	msr	MSP, r0
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f380 8814 	msr	CONTROL, r0
 80039da:	b662      	cpsie	i
 80039dc:	b661      	cpsie	f
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	df00      	svc	0
 80039e8:	bf00      	nop
 80039ea:	0000      	.short	0x0000
 80039ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop

080039f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039fe:	4b3b      	ldr	r3, [pc, #236]	@ (8003aec <xPortStartScheduler+0xf8>)
 8003a00:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	72fb      	strb	r3, [r7, #11]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	22ff      	movs	r2, #255	@ 0xff
 8003a0e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b33      	ldr	r3, [pc, #204]	@ (8003af0 <xPortStartScheduler+0xfc>)
 8003a24:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003a26:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <xPortStartScheduler+0xfc>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <xPortStartScheduler+0x44>
 8003a2e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8003a32:	4830      	ldr	r0, [pc, #192]	@ (8003af4 <xPortStartScheduler+0x100>)
 8003a34:	f7fc fcca 	bl	80003cc <assert_failed>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <xPortStartScheduler+0x6e>
 8003a46:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8003a4a:	482a      	ldr	r0, [pc, #168]	@ (8003af4 <xPortStartScheduler+0x100>)
 8003a4c:	f7fc fcbe 	bl	80003cc <assert_failed>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a50:	e007      	b.n	8003a62 <xPortStartScheduler+0x6e>
        {
            ulImplementedPrioBits++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3301      	adds	r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	2b80      	cmp	r3, #128	@ 0x80
 8003a6c:	d0f1      	beq.n	8003a52 <xPortStartScheduler+0x5e>
        }

        if( ulImplementedPrioBits == 8 )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d103      	bne.n	8003a7c <xPortStartScheduler+0x88>
            *
            * The following assert ensures that the sub-priority bit in the
            * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
            * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <xPortStartScheduler+0x104>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e004      	b.n	8003a86 <xPortStartScheduler+0x92>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1c3 0307 	rsb	r3, r3, #7
 8003a82:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <xPortStartScheduler+0x104>)
 8003a84:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a86:	4b1c      	ldr	r3, [pc, #112]	@ (8003af8 <xPortStartScheduler+0x104>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003af8 <xPortStartScheduler+0x104>)
 8003a8e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a90:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <xPortStartScheduler+0x104>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a98:	4a17      	ldr	r2, [pc, #92]	@ (8003af8 <xPortStartScheduler+0x104>)
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003a9c:	7afb      	ldrb	r3, [r7, #11]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003aa4:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <xPortStartScheduler+0x108>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a14      	ldr	r2, [pc, #80]	@ (8003afc <xPortStartScheduler+0x108>)
 8003aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ab0:	4b12      	ldr	r3, [pc, #72]	@ (8003afc <xPortStartScheduler+0x108>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a11      	ldr	r2, [pc, #68]	@ (8003afc <xPortStartScheduler+0x108>)
 8003ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003abc:	f000 f8d0 	bl	8003c60 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <xPortStartScheduler+0x10c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ac6:	f000 f8ef 	bl	8003ca8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003aca:	4b0e      	ldr	r3, [pc, #56]	@ (8003b04 <xPortStartScheduler+0x110>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a0d      	ldr	r2, [pc, #52]	@ (8003b04 <xPortStartScheduler+0x110>)
 8003ad0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003ad4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ad6:	f7ff ff77 	bl	80039c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ada:	f7ff fb5b 	bl	8003194 <vTaskSwitchContext>
    prvTaskExitError();
 8003ade:	f7ff ff33 	bl	8003948 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	e000e400 	.word	0xe000e400
 8003af0:	24002588 	.word	0x24002588
 8003af4:	08006254 	.word	0x08006254
 8003af8:	2400258c 	.word	0x2400258c
 8003afc:	e000ed20 	.word	0xe000ed20
 8003b00:	24000024 	.word	0x24000024
 8003b04:	e000ef34 	.word	0xe000ef34

08003b08 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
        __asm volatile
 8003b0e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b12:	b672      	cpsid	i
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	b662      	cpsie	i
 8003b22:	607b      	str	r3, [r7, #4]
    }
 8003b24:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003b26:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <vPortEnterCritical+0x4c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a09      	ldr	r2, [pc, #36]	@ (8003b54 <vPortEnterCritical+0x4c>)
 8003b2e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003b30:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <vPortEnterCritical+0x4c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d109      	bne.n	8003b4c <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b38:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <vPortEnterCritical+0x50>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <vPortEnterCritical+0x44>
 8003b42:	f240 11af 	movw	r1, #431	@ 0x1af
 8003b46:	4805      	ldr	r0, [pc, #20]	@ (8003b5c <vPortEnterCritical+0x54>)
 8003b48:	f7fc fc40 	bl	80003cc <assert_failed>
    }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	24000024 	.word	0x24000024
 8003b58:	e000ed04 	.word	0xe000ed04
 8003b5c:	08006254 	.word	0x08006254

08003b60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003b66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <vPortExitCritical+0x40>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <vPortExitCritical+0x18>
 8003b6e:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8003b72:	480c      	ldr	r0, [pc, #48]	@ (8003ba4 <vPortExitCritical+0x44>)
 8003b74:	f7fc fc2a 	bl	80003cc <assert_failed>
    uxCriticalNesting--;
 8003b78:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <vPortExitCritical+0x40>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ba0 <vPortExitCritical+0x40>)
 8003b80:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003b82:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <vPortExitCritical+0x40>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <vPortExitCritical+0x36>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
        __asm volatile
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f383 8811 	msr	BASEPRI, r3
    }
 8003b94:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	24000024 	.word	0x24000024
 8003ba4:	08006254 	.word	0x08006254
	...

08003bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003bb0:	f3ef 8009 	mrs	r0, PSP
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <pxCurrentTCBConst>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	f01e 0f10 	tst.w	lr, #16
 8003bc0:	bf08      	it	eq
 8003bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bca:	6010      	str	r0, [r2, #0]
 8003bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003bd0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8003bd4:	b672      	cpsid	i
 8003bd6:	f380 8811 	msr	BASEPRI, r0
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	b662      	cpsie	i
 8003be4:	f7ff fad6 	bl	8003194 <vTaskSwitchContext>
 8003be8:	f04f 0000 	mov.w	r0, #0
 8003bec:	f380 8811 	msr	BASEPRI, r0
 8003bf0:	bc09      	pop	{r0, r3}
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	6808      	ldr	r0, [r1, #0]
 8003bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfa:	f01e 0f10 	tst.w	lr, #16
 8003bfe:	bf08      	it	eq
 8003c00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c04:	f380 8809 	msr	PSP, r0
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop

08003c10 <pxCurrentTCBConst>:
 8003c10:	2400227c 	.word	0x2400227c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop

08003c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c1e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c22:	b672      	cpsid	i
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	b662      	cpsie	i
 8003c32:	607b      	str	r3, [r7, #4]
    }
 8003c34:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003c36:	f7ff f993 	bl	8002f60 <xTaskIncrementTick>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c40:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <SysTick_Handler+0x44>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f383 8811 	msr	BASEPRI, r3
    }
 8003c52:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	e000ed04 	.word	0xe000ed04

08003c60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <vPortSetupTimerInterrupt+0x34>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <vPortSetupTimerInterrupt+0x38>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c70:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <vPortSetupTimerInterrupt+0x3c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <vPortSetupTimerInterrupt+0x40>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <vPortSetupTimerInterrupt+0x44>)
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c82:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <vPortSetupTimerInterrupt+0x34>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	601a      	str	r2, [r3, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000e010 	.word	0xe000e010
 8003c98:	e000e018 	.word	0xe000e018
 8003c9c:	24000000 	.word	0x24000000
 8003ca0:	10624dd3 	.word	0x10624dd3
 8003ca4:	e000e014 	.word	0xe000e014

08003ca8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ca8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003cb8 <vPortEnableVFP+0x10>
 8003cac:	6801      	ldr	r1, [r0, #0]
 8003cae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003cb2:	6001      	str	r1, [r0, #0]
 8003cb4:	4770      	bx	lr
 8003cb6:	0000      	.short	0x0000
 8003cb8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop

08003cc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003cc6:	f3ef 8305 	mrs	r3, IPSR
 8003cca:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b0f      	cmp	r3, #15
 8003cd0:	d90e      	bls.n	8003cf0 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003cd2:	4a10      	ldr	r2, [pc, #64]	@ (8003d14 <vPortValidateInterruptPriority+0x54>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <vPortValidateInterruptPriority+0x58>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d204      	bcs.n	8003cf0 <vPortValidateInterruptPriority+0x30>
 8003ce6:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 8003cea:	480c      	ldr	r0, [pc, #48]	@ (8003d1c <vPortValidateInterruptPriority+0x5c>)
 8003cec:	f7fc fb6e 	bl	80003cc <assert_failed>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <vPortValidateInterruptPriority+0x60>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <vPortValidateInterruptPriority+0x64>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d904      	bls.n	8003d0a <vPortValidateInterruptPriority+0x4a>
 8003d00:	f44f 7153 	mov.w	r1, #844	@ 0x34c
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <vPortValidateInterruptPriority+0x5c>)
 8003d06:	f7fc fb61 	bl	80003cc <assert_failed>
    }
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	e000e3f0 	.word	0xe000e3f0
 8003d18:	24002588 	.word	0x24002588
 8003d1c:	08006254 	.word	0x08006254
 8003d20:	e000ed0c 	.word	0xe000ed0c
 8003d24:	2400258c 	.word	0x2400258c

08003d28 <vPortFree>:
    return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d03d      	beq.n	8003db6 <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	425b      	negs	r3, r3
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	db04      	blt.n	8003d5a <vPortFree+0x32>
 8003d50:	f240 1141 	movw	r1, #321	@ 0x141
 8003d54:	481a      	ldr	r0, [pc, #104]	@ (8003dc0 <vPortFree+0x98>)
 8003d56:	f7fc fb39 	bl	80003cc <assert_failed>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <vPortFree+0x44>
 8003d62:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8003d66:	4816      	ldr	r0, [pc, #88]	@ (8003dc0 <vPortFree+0x98>)
 8003d68:	f7fc fb30 	bl	80003cc <assert_failed>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0fdb      	lsrs	r3, r3, #31
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01c      	beq.n	8003db6 <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d118      	bne.n	8003db6 <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003d90:	f7fe ffd4 	bl	8002d3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc4 <vPortFree+0x9c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4a09      	ldr	r2, [pc, #36]	@ (8003dc4 <vPortFree+0x9c>)
 8003da0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003da2:	68b8      	ldr	r0, [r7, #8]
 8003da4:	f000 f812 	bl	8003dcc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003da8:	4b07      	ldr	r3, [pc, #28]	@ (8003dc8 <vPortFree+0xa0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a06      	ldr	r2, [pc, #24]	@ (8003dc8 <vPortFree+0xa0>)
 8003db0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003db2:	f7fe ffd1 	bl	8002d58 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	0800629c 	.word	0x0800629c
 8003dc4:	2400259c 	.word	0x2400259c
 8003dc8:	240025a0 	.word	0x240025a0

08003dcc <prvInsertBlockIntoFreeList>:
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003dd4:	4b28      	ldr	r3, [pc, #160]	@ (8003e78 <prvInsertBlockIntoFreeList+0xac>)
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e002      	b.n	8003de0 <prvInsertBlockIntoFreeList+0x14>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d8f7      	bhi.n	8003dda <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d108      	bne.n	8003e0e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	441a      	add	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d118      	bne.n	8003e54 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <prvInsertBlockIntoFreeList+0xb0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d00d      	beq.n	8003e4a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	441a      	add	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e008      	b.n	8003e5c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e7c <prvInsertBlockIntoFreeList+0xb0>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e003      	b.n	8003e5c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d002      	beq.n	8003e6a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	24002590 	.word	0x24002590
 8003e7c:	24002598 	.word	0x24002598

08003e80 <QEvt_verify_>:

// private:

#ifndef Q_UNSAFE
//! @private @memberof QEvt
static inline bool QEvt_verify_(QEvt const * const me) {
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	78db      	ldrb	r3, [r3, #3]
 8003e8c:	73fb      	strb	r3, [r7, #15]
    return (rc <= 2U*QF_MAX_ACTIVE)
           && (((me->evtTag_ ^ rc) & 0x0FU) == 0x0FU);
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	d80a      	bhi.n	8003eaa <QEvt_verify_+0x2a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	789a      	ldrb	r2, [r3, #2]
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	4053      	eors	r3, r2
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	2b0f      	cmp	r3, #15
 8003ea4:	d101      	bne.n	8003eaa <QEvt_verify_+0x2a>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <QEvt_verify_+0x2c>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <QEvt_getPoolNum_>:
#endif // ndef Q_UNSAFE

//! @private @memberof QEvt
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)(me->evtTag_ >> 4U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	789b      	ldrb	r3, [r3, #2]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	b2db      	uxtb	r3, r3
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <QPSet_notEmpty>:
    return (me->bits[0] == 0U) ? (me->bits[1] == 0U) : false;
    #endif
}

//! @public @memberof QPSet
static inline bool QPSet_notEmpty(QPSet const * const me) {
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32U)
    return (me->bits[0] != 0U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bf14      	ite	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	2300      	moveq	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] != 0U) ? true : (me->bits[1] != 0U);
    #endif
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <QPSet_remove>:
}

//! @public @memberof QPSet
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f303 	lsl.w	r3, r1, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	401a      	ands	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
    }
    else {
        (me->bits[1] = (me->bits[1] & ~((QPSetBits)1U << (n - 33U))));
    }
    #endif
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <QPSet_findMax>:

//! @public @memberof QPSet
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32U)
    return QF_LOG2(me->bits[0]);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 f9c3 	bl	80052c0 <QF_LOG2>
 8003f3a:	4603      	mov	r3, r0
    #else
    return (me->bits[1] != 0U)
        ? (QF_LOG2(me->bits[1]) + 32U)
        : (QF_LOG2(me->bits[0]));
    #endif
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <QPSet_verify_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline bool QPSet_verify_(QPSet const * const me,
    QPSet const * const dis)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] == (QPSetBits)(~dis->bits[0]))
           && (me->bits[1] == (QPSetBits)(~dis->bits[1]));
    #endif
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <QEvt_refCtr_inc_>:
// Bitmasks are for the QTimeEvt::flags attribute
#define QTE_FLAG_IS_LINKED      (1U << 7U)
#define QTE_FLAG_WAS_DISARMED   (1U << 6U)

//! @private @memberof QEvt
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_ + 1U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	78db      	ldrb	r3, [r3, #3]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	70da      	strb	r2, [r3, #3]
#ifndef Q_UNSAFE
    ((QEvt *)me)->evtTag_ = (me->evtTag_ & 0xF0U) | ((~rc) & 0x0FU);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	789b      	ldrb	r3, [r3, #2]
 8003f8a:	f023 030f 	bic.w	r3, r3, #15
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	709a      	strb	r2, [r3, #2]
#endif // ndef Q_UNSAFE
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <QEvt_refCtr_dec_>:

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_ - 1U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	78db      	ldrb	r3, [r3, #3]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	70da      	strb	r2, [r3, #3]
#ifndef Q_UNSAFE
    ((QEvt *)me)->evtTag_ = (me->evtTag_ & 0xF0U) | ((~rc) & 0x0FU);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	789b      	ldrb	r3, [r3, #2]
 8003fcc:	f023 030f 	bic.w	r3, r3, #15
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	709a      	strb	r2, [r3, #2]
#endif // ndef Q_UNSAFE
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <QF_init>:
//
#define FREERTOS_QUEUE_GET_FREE(me_) \
    ((me_)->osObject.uxDummy4[1] - (me_)->osObject.uxDummy4[0])

//============================================================================
void QF_init(void) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,             sizeof(QF_priv_));
 8003ff8:	2158      	movs	r1, #88	@ 0x58
 8003ffa:	4805      	ldr	r0, [pc, #20]	@ (8004010 <QF_init+0x1c>)
 8003ffc:	f001 f942 	bl	8005284 <QF_bzero_>
    QF_bzero_(&QActive_registry_[0], sizeof(QActive_registry_));
 8004000:	2184      	movs	r1, #132	@ 0x84
 8004002:	4804      	ldr	r0, [pc, #16]	@ (8004014 <QF_init+0x20>)
 8004004:	f001 f93e 	bl	8005284 <QF_bzero_>
    QTimeEvt_init(); // initialize QTimeEvts
 8004008:	f002 f86a 	bl	80060e0 <QTimeEvt_init>
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	24002628 	.word	0x24002628
 8004014:	240025a4 	.word	0x240025a4

08004018 <QF_run>:
//............................................................................
int_t QF_run(void) {
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
    QF_onStartup(); // the startup callback (configure/enable interrupts)
 800401c:	f7fc fc2c 	bl	8000878 <QF_onStartup>
    QS_BEGIN_PRE(QS_QF_RUN, 0U)
    QS_END_PRE()
    QF_CRIT_EXIT();
#endif

    vTaskStartScheduler(); // start the FreeRTOS scheduler
 8004020:	f7fe fe28 	bl	8002c74 <vTaskStartScheduler>

    QF_CRIT_ENTRY();
 8004024:	f7ff fd70 	bl	8003b08 <vPortEnterCritical>
    Q_ERROR_INCRIT(110); // the FreeRTOS scheduler should never return
 8004028:	216e      	movs	r1, #110	@ 0x6e
 800402a:	4801      	ldr	r0, [pc, #4]	@ (8004030 <QF_run+0x18>)
 800402c:	f7fc f9c4 	bl	80003b8 <Q_onError>
 8004030:	08006358 	.word	0x08006358

08004034 <task_function>:
void QF_stop(void) {
    QF_onCleanup(); // cleanup callback
}

//............................................................................
static void task_function(void *pvParameters) { // FreeRTOS task signature
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    QActive *act = (QActive *)pvParameters;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60fb      	str	r3, [r7, #12]
    while (act->eQueue != (QueueHandle_t)0)
#else
    for (;;) // for-ever
#endif
    {
        QEvt const *e = QActive_get_(act); // wait for event
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f919 	bl	8004278 <QActive_get_>
 8004046:	60b8      	str	r0, [r7, #8]
        QASM_DISPATCH(&act->super, e, act->prio); // dispatch to the SM
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	4798      	blx	r3
        QF_gc(e); // check if the event is garbage, and collect it if so
 8004056:	68b8      	ldr	r0, [r7, #8]
 8004058:	f001 fa6c 	bl	8005534 <QF_gc>
    {
 800405c:	bf00      	nop
 800405e:	e7ef      	b.n	8004040 <task_function+0xc>

08004060 <QActive_start>:
    QEvtPtr * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	@ 0x30
 8004064:	af04      	add	r7, sp, #16
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	460b      	mov	r3, r1
 800406e:	817b      	strh	r3, [r7, #10]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004070:	f7ff fd4a 	bl	8003b08 <vPortEnterCritical>
    // precondition:
    // - queue storage must be provided
    // - queue size must be provided
    // - stack storage must be provided
    // - stack size must be provided
    Q_REQUIRE_INCRIT(100,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <QActive_start+0x2c>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <QActive_start+0x2c>
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <QActive_start+0x2c>
 8004086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <QActive_start+0x34>
 800408c:	2164      	movs	r1, #100	@ 0x64
 800408e:	4831      	ldr	r0, [pc, #196]	@ (8004154 <QActive_start+0xf4>)
 8004090:	f7fc f992 	bl	80003b8 <Q_onError>
        (qSto != (QEvtPtr *)0) && (qLen > 0U)
        && (stkSto != (void *)0) && (stkSize > 0U));
    QF_CRIT_EXIT();
 8004094:	f7ff fd64 	bl	8003b60 <vPortExitCritical>

    // create FreeRTOS message queue
    me->eQueue = xQueueCreateStatic(
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	335c      	adds	r3, #92	@ 0x5c
 800409c:	2200      	movs	r2, #0
 800409e:	9200      	str	r2, [sp, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	2104      	movs	r1, #4
 80040a4:	6838      	ldr	r0, [r7, #0]
 80040a6:	f7fe f8a9 	bl	80021fc <xQueueGenericCreateStatic>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        (UBaseType_t)qLen,     // length of the queue
        (UBaseType_t)sizeof(QEvtPtr), // item size
        (uint8_t *)qSto,       // storage buffer
        &me->osObject);        // static queue buffer
    QF_CRIT_ENTRY();
 80040b2:	f7ff fd29 	bl	8003b08 <vPortEnterCritical>
    Q_ASSERT_INCRIT(110, me->eQueue != (QueueHandle_t)0);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d103      	bne.n	80040c8 <QActive_start+0x68>
 80040c0:	216e      	movs	r1, #110	@ 0x6e
 80040c2:	4824      	ldr	r0, [pc, #144]	@ (8004154 <QActive_start+0xf4>)
 80040c4:	f7fc f978 	bl	80003b8 <Q_onError>
    QF_CRIT_EXIT();
 80040c8:	f7ff fd4a 	bl	8003b60 <vPortExitCritical>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); // QF-priority of the AO
 80040cc:	897b      	ldrh	r3, [r7, #10]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	731a      	strb	r2, [r3, #12]
    me->pthre = 0U; // preemption-threshold (not used for AO registration)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	735a      	strb	r2, [r3, #13]
    QActive_register_(me); // make QF aware of this AO
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f001 fe24 	bl	8005d28 <QActive_register_>

    // top-most initial tran. (virtual call)
    (*me->super.vptr->init)(&me->super, par, me->prio);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	7b12      	ldrb	r2, [r2, #12]
 80040ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040ee:	4798      	blx	r3
    QS_FLUSH(); // flush the trace buffer to the host

    // task name provided by the user in QActive_setAttr() or default name
    char const *taskName = (me->thread.pxDummy1 != (void *)0)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
                             ? (char const *)me->thread.pxDummy1
                             : (char const *)"AO";
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <QActive_start+0x9e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	e000      	b.n	8004100 <QActive_start+0xa0>
 80040fe:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <QActive_start+0xf8>)
    char const *taskName = (me->thread.pxDummy1 != (void *)0)
 8004100:	61bb      	str	r3, [r7, #24]
    //    it is consistent with the AO's priority. An example of
    //    inconsistent setting would be assigning FreeRTOS priorities that
    //    would result in a different relative priritization of AO's threads
    //    than indicated by the AO priorities assigned.
    //
    UBaseType_t freertos_prio = (prioSpec >> 8U);
 8004102:	897b      	ldrh	r3, [r7, #10]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	b29b      	uxth	r3, r3
 8004108:	61fb      	str	r3, [r7, #28]
    if (freertos_prio == 0U) {
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <QActive_start+0xb6>
        freertos_prio = FREERTOS_TASK_PRIO(me->prio);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	7b1b      	ldrb	r3, [r3, #12]
 8004114:	61fb      	str	r3, [r7, #28]

    // statically create the FreeRTOS task for the AO
    TaskHandle_t task = xTaskCreateStatic(
        &task_function, // the task function
        taskName ,      // the name of the task
        stkSize/sizeof(portSTACK_TYPE), // stack length
 8004116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004118:	089a      	lsrs	r2, r3, #2
    TaskHandle_t task = xTaskCreateStatic(
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3310      	adds	r3, #16
 800411e:	9302      	str	r3, [sp, #8]
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	69b9      	ldr	r1, [r7, #24]
 800412c:	480b      	ldr	r0, [pc, #44]	@ (800415c <QActive_start+0xfc>)
 800412e:	f7fe fc39 	bl	80029a4 <xTaskCreateStatic>
 8004132:	6178      	str	r0, [r7, #20]
        (void *)me,     // the 'pvParameters' parameter
        freertos_prio,  // FreeRTOS priority
        (StackType_t *)stkSto,        // stack storage
        &me->thread);   // task buffer

    QF_CRIT_ENTRY();
 8004134:	f7ff fce8 	bl	8003b08 <vPortEnterCritical>
    Q_ASSERT_INCRIT(120, task != (TaskHandle_t)0);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d103      	bne.n	8004146 <QActive_start+0xe6>
 800413e:	2178      	movs	r1, #120	@ 0x78
 8004140:	4804      	ldr	r0, [pc, #16]	@ (8004154 <QActive_start+0xf4>)
 8004142:	f7fc f939 	bl	80003b8 <Q_onError>
    QF_CRIT_EXIT();
 8004146:	f7ff fd0b 	bl	8003b60 <vPortExitCritical>

#ifdef Q_UNSAFE
    Q_UNUSED_PAR(task);
#endif
}
 800414a:	bf00      	nop
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	08006358 	.word	0x08006358
 8004158:	080062dc 	.word	0x080062dc
 800415c:	08004035 	.word	0x08004035

08004160 <QActive_setAttr>:
    QActive_unsubscribeAll(me); // unsubscribe from all events
    me->eQueue = (QueueHandle_t)0; // stop thread (see task_function())
}
#endif
//............................................................................
void QActive_setAttr(QActive *const me, uint32_t attr1, void const *attr2) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800416c:	f7ff fccc 	bl	8003b08 <vPortEnterCritical>
    // this function must be called before QActive_start(),
    // which implies that me->thread.pxDummy1 must not be used yet;
    Q_REQUIRE_INCRIT(150, me->thread.pxDummy1 == (void *)0);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <QActive_setAttr+0x20>
 8004178:	2196      	movs	r1, #150	@ 0x96
 800417a:	4808      	ldr	r0, [pc, #32]	@ (800419c <QActive_setAttr+0x3c>)
 800417c:	f7fc f91c 	bl	80003b8 <Q_onError>
    switch (attr1) {
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <QActive_setAttr+0x2e>
        case TASK_NAME_ATTR:
            // temporarily store the name, cast 'const' away
            me->thread.pxDummy1 = (void *)attr2;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	611a      	str	r2, [r3, #16]
            break;
 800418c:	e000      	b.n	8004190 <QActive_setAttr+0x30>
        // ...
        default:
            break;
 800418e:	bf00      	nop
    }
    QF_CRIT_EXIT();
 8004190:	f7ff fce6 	bl	8003b60 <vPortExitCritical>
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	08006358 	.word	0x08006358

080041a0 <QActive_post_>:

//============================================================================
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin, void const * const sender)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80041ae:	f7ff fcab 	bl	8003b08 <vPortEnterCritical>

    Q_REQUIRE_INCRIT(200, e != (QEvt *)0);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <QActive_post_+0x20>
 80041b8:	21c8      	movs	r1, #200	@ 0xc8
 80041ba:	482e      	ldr	r0, [pc, #184]	@ (8004274 <QActive_post_+0xd4>)
 80041bc:	f7fc f8fc 	bl	80003b8 <Q_onError>
#ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(201, QEvt_verify_(e));
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fe5c 	bl	8003e80 <QEvt_verify_>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <QActive_post_+0x36>
 80041ce:	21c9      	movs	r1, #201	@ 0xc9
 80041d0:	4828      	ldr	r0, [pc, #160]	@ (8004274 <QActive_post_+0xd4>)
 80041d2:	f7fc f8f1 	bl	80003b8 <Q_onError>
#endif // ndef Q_UNSAFE

    // the number of free slots available in the queue
    uint_fast16_t const nFree =
        (uint_fast16_t)FREERTOS_QUEUE_GET_FREE(me);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
    uint_fast16_t const nFree =
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	61bb      	str	r3, [r7, #24]

    bool status;
    if (margin == QF_NO_MARGIN) {
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10b      	bne.n	8004208 <QActive_post_+0x68>
        if (nFree > 0U) {
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <QActive_post_+0x5c>
            status = true; // can post
 80041f6:	2301      	movs	r3, #1
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e010      	b.n	800421e <QActive_post_+0x7e>
        }
        else {
            status = false; // cannot post
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
            Q_ERROR_INCRIT(210); // must be able to post the event
 8004200:	21d2      	movs	r1, #210	@ 0xd2
 8004202:	481c      	ldr	r0, [pc, #112]	@ (8004274 <QActive_post_+0xd4>)
 8004204:	f7fc f8d8 	bl	80003b8 <Q_onError>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4293      	cmp	r3, r2
 8004212:	d902      	bls.n	800421a <QActive_post_+0x7a>
        status = true; // can post
 8004214:	2301      	movs	r3, #1
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e001      	b.n	800421e <QActive_post_+0x7e>
    }
    else {
        status = false; // cannot post
 800421a:	2300      	movs	r3, #0
 800421c:	77fb      	strb	r3, [r7, #31]
    }

    if (status) { // can post the event?
 800421e:	7ffb      	ldrb	r3, [r7, #31]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01f      	beq.n	8004264 <QActive_post_+0xc4>
            QS_2U8_PRE(QEvt_getPoolNum_(e), e->refCtr_);
            QS_EQC_PRE((QEQueueCtr)nFree); // # free entries
            QS_EQC_PRE(0U);     // min # free entries (unknown)
        QS_END_PRE()

        if (QEvt_getPoolNum_(e) != 0U) { // is it a pool event?
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fe49 	bl	8003ebe <QEvt_getPoolNum_>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <QActive_post_+0x9a>
            QEvt_refCtr_inc_(e); // increment the reference counter
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fe9a 	bl	8003f6e <QEvt_refCtr_inc_>
        }
        QF_CRIT_EXIT();
 800423a:	f7ff fc91 	bl	8003b60 <vPortExitCritical>

        BaseType_t err = xQueueSendToBack(
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004244:	f107 0108 	add.w	r1, r7, #8
 8004248:	2300      	movs	r3, #0
 800424a:	2200      	movs	r2, #0
 800424c:	f7fe f844 	bl	80022d8 <xQueueGenericSend>
 8004250:	6178      	str	r0, [r7, #20]
                             me->eQueue, (void const *)&e, (TickType_t)0);

        QF_CRIT_ENTRY();
 8004252:	f7ff fc59 	bl	8003b08 <vPortEnterCritical>
        // posting to the FreeRTOS message queue must succeed, see NOTE3
        Q_ASSERT_INCRIT(220, err == pdPASS);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d003      	beq.n	8004264 <QActive_post_+0xc4>
 800425c:	21dc      	movs	r1, #220	@ 0xdc
 800425e:	4805      	ldr	r0, [pc, #20]	@ (8004274 <QActive_post_+0xd4>)
 8004260:	f7fc f8aa 	bl	80003b8 <Q_onError>
            QS_2U8_PRE(QEvt_getPoolNum_(e), e->refCtr_);
            QS_EQC_PRE(nFree);  // # free entries
            QS_EQC_PRE(margin); // margin requested
        QS_END_PRE()
    }
    QF_CRIT_EXIT();
 8004264:	f7ff fc7c 	bl	8003b60 <vPortExitCritical>

    return status;
 8004268:	7ffb      	ldrb	r3, [r7, #31]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	08006358 	.word	0x08006358

08004278 <QActive_get_>:
#ifdef Q_UNSAFE
    Q_UNUSED_PAR(err);
#endif
}
//............................................................................
QEvt const *QActive_get_(QActive * const me) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
    QEvtPtr e;
    xQueueReceive(me->eQueue, (void *)&e, portMAX_DELAY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004286:	f107 010c 	add.w	r1, r7, #12
 800428a:	f04f 32ff 	mov.w	r2, #4294967295
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe f9a8 	bl	80025e4 <xQueueReceive>
        QS_2U8_PRE(QEvt_getPoolNum_(e), e->refCtr_);
        QS_EQC_PRE((QEQueueCtr)FREERTOS_QUEUE_GET_FREE(me)); // # free
    QS_END_PRE()
    QS_CRIT_EXIT();

    return e;
 8004294:	68fb      	ldr	r3, [r7, #12]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <QActive_postFromISR_>:
// The "FromISR" QP APIs for the FreeRTOS port...
bool QActive_postFromISR_(QActive * const me, QEvt const * const e,
                          uint_fast16_t const margin,
                          BaseType_t * const pxHigherPriorityTaskWoken,
                          void const * const sender)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b090      	sub	sp, #64	@ 0x40
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
        __asm volatile
 80042ae:	f3ef 8211 	mrs	r2, BASEPRI
 80042b2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80042b6:	b672      	cpsid	i
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	b662      	cpsie	i
 80042c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        return ulOriginalBASEPRI;
 80042ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    Q_REQUIRE_INCRIT(500, e != (QEvt *)0);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <QActive_postFromISR_+0x3e>
 80042d4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80042d8:	4841      	ldr	r0, [pc, #260]	@ (80043e0 <QActive_postFromISR_+0x140>)
 80042da:	f7fc f86d 	bl	80003b8 <Q_onError>
#ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(501, QEvt_verify_(e));
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fdcd 	bl	8003e80 <QEvt_verify_>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <QActive_postFromISR_+0x56>
 80042ec:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80042f0:	483b      	ldr	r0, [pc, #236]	@ (80043e0 <QActive_postFromISR_+0x140>)
 80042f2:	f7fc f861 	bl	80003b8 <Q_onError>
#endif // ndef Q_UNSAFE

    // find the number of free slots available in the queue
    uint_fast16_t const nFree = (uint_fast16_t)FREERTOS_QUEUE_GET_FREE(me);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	637b      	str	r3, [r7, #52]	@ 0x34

    bool status;
    if (margin == QF_NO_MARGIN) {
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800430c:	4293      	cmp	r3, r2
 800430e:	d10e      	bne.n	800432e <QActive_postFromISR_+0x8e>
        if (nFree > 0U) {
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <QActive_postFromISR_+0x7e>
            status = true; // can post
 8004316:	2301      	movs	r3, #1
 8004318:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800431c:	e012      	b.n	8004344 <QActive_postFromISR_+0xa4>
        }
        else {
            status = false; // cannot post
 800431e:	2300      	movs	r3, #0
 8004320:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            Q_ERROR_INCRIT(510); // must be able to post the event
 8004324:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8004328:	482d      	ldr	r0, [pc, #180]	@ (80043e0 <QActive_postFromISR_+0x140>)
 800432a:	f7fc f845 	bl	80003b8 <Q_onError>
        }
    }
    else if (nFree > margin) {
 800432e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d903      	bls.n	800433e <QActive_postFromISR_+0x9e>
        status = true; // can post
 8004336:	2301      	movs	r3, #1
 8004338:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800433c:	e002      	b.n	8004344 <QActive_postFromISR_+0xa4>
    }
    else {
        status = false; // cannot post
 800433e:	2300      	movs	r3, #0
 8004340:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }

    if (status) { // can post the event?
 8004344:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004348:	2b00      	cmp	r3, #0
 800434a:	d038      	beq.n	80043be <QActive_postFromISR_+0x11e>
            QS_2U8_PRE(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
            QS_EQC_PRE(nFree);  // # free entries available
            QS_EQC_PRE(0U);     // min # free entries (unknown)
        QS_END_PRE()

        if (QEvt_getPoolNum_(e) != 0U) { // is it a pool event?
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fdb5 	bl	8003ebe <QEvt_getPoolNum_>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <QActive_postFromISR_+0xc2>
            QEvt_refCtr_inc_(e); // increment the reference counter
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fe06 	bl	8003f6e <QEvt_refCtr_inc_>
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	61fb      	str	r3, [r7, #28]
        __asm volatile
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f383 8811 	msr	BASEPRI, r3
    }
 800436c:	bf00      	nop
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

        BaseType_t err = xQueueSendToBackFromISR(me->eQueue,
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004374:	f107 0108 	add.w	r1, r7, #8
 8004378:	2300      	movs	r3, #0
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	f7fe f894 	bl	80024a8 <xQueueGenericSendFromISR>
 8004380:	6338      	str	r0, [r7, #48]	@ 0x30
        __asm volatile
 8004382:	f3ef 8211 	mrs	r2, BASEPRI
 8004386:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800438a:	b672      	cpsid	i
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	b662      	cpsie	i
 800439a:	627a      	str	r2, [r7, #36]	@ 0x24
 800439c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                              (void const *)&e,
                              pxHigherPriorityTaskWoken);

        // posting to the FreeRTOS message queue must succeed
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043a0:	63bb      	str	r3, [r7, #56]	@ 0x38
        Q_ASSERT_INCRIT(520, err == pdPASS);
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d004      	beq.n	80043b2 <QActive_postFromISR_+0x112>
 80043a8:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80043ac:	480c      	ldr	r0, [pc, #48]	@ (80043e0 <QActive_postFromISR_+0x140>)
 80043ae:	f7fc f803 	bl	80003b8 <Q_onError>
 80043b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b4:	61bb      	str	r3, [r7, #24]
        __asm volatile
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f383 8811 	msr	BASEPRI, r3
    }
 80043bc:	e009      	b.n	80043d2 <QActive_postFromISR_+0x132>
 80043be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c0:	617b      	str	r3, [r7, #20]
        __asm volatile
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f383 8811 	msr	BASEPRI, r3
    }
 80043c8:	bf00      	nop
            QS_EQC_PRE(nFree);  // # free entries available
            QS_EQC_PRE(margin); // margin requested
        QS_END_PRE()
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

        QF_gcFromISR(e); // recycle the event to avoid a leak
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fa9b 	bl	8004908 <QF_gcFromISR>
    }

    return status;
 80043d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3740      	adds	r7, #64	@ 0x40
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	08006358 	.word	0x08006358

080043e4 <QActive_publishFromISR_>:
//............................................................................
void QActive_publishFromISR_(QEvt const * const e,
                          BaseType_t * const pxHigherPriorityTaskWoken,
                          void const * const sender)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b090      	sub	sp, #64	@ 0x40
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
    Q_REQUIRE_INCRIT(600, e != (QEvt *)0);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <QActive_publishFromISR_+0x1c>
 80043f6:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80043fa:	485a      	ldr	r0, [pc, #360]	@ (8004564 <QActive_publishFromISR_+0x180>)
 80043fc:	f7fb ffdc 	bl	80003b8 <Q_onError>
#ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(601, QEvt_verify_(e));
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff fd3d 	bl	8003e80 <QEvt_verify_>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <QActive_publishFromISR_+0x32>
 800440c:	f240 2159 	movw	r1, #601	@ 0x259
 8004410:	4854      	ldr	r0, [pc, #336]	@ (8004564 <QActive_publishFromISR_+0x180>)
 8004412:	f7fb ffd1 	bl	80003b8 <Q_onError>
#endif // ndef Q_UNSAFE

    QSignal const sig = e->sig;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	867b      	strh	r3, [r7, #50]	@ 0x32
        __asm volatile
 800441c:	f3ef 8211 	mrs	r2, BASEPRI
 8004420:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004424:	b672      	cpsid	i
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	b662      	cpsie	i
 8004434:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
        return ulOriginalBASEPRI;
 8004438:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // the published signal must be within the configured range
    Q_REQUIRE_INCRIT(610, sig < (QSignal)QActive_maxPubSignal_);
 800443c:	4b4a      	ldr	r3, [pc, #296]	@ (8004568 <QActive_publishFromISR_+0x184>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8004444:	429a      	cmp	r2, r3
 8004446:	d304      	bcc.n	8004452 <QActive_publishFromISR_+0x6e>
 8004448:	f240 2162 	movw	r1, #610	@ 0x262
 800444c:	4845      	ldr	r0, [pc, #276]	@ (8004564 <QActive_publishFromISR_+0x180>)
 800444e:	f7fb ffb3 	bl	80003b8 <Q_onError>
    Q_REQUIRE_INCRIT(611,
 8004452:	4b46      	ldr	r3, [pc, #280]	@ (800456c <QActive_publishFromISR_+0x188>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	4618      	mov	r0, r3
 800445e:	4b43      	ldr	r3, [pc, #268]	@ (800456c <QActive_publishFromISR_+0x188>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	f7ff fd6a 	bl	8003f44 <QPSet_verify_>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <QActive_publishFromISR_+0x9c>
 8004476:	f240 2163 	movw	r1, #611	@ 0x263
 800447a:	483a      	ldr	r0, [pc, #232]	@ (8004564 <QActive_publishFromISR_+0x180>)
 800447c:	f7fb ff9c 	bl	80003b8 <Q_onError>
        QS_SIG_PRE(sig);        // the signal of the event
        QS_2U8_PRE(QEvt_getPoolNum_(e), e->refCtr_);// pool-Id & ref-Count
    QS_END_PRE()

    // is it a dynamic event?
    if (QEvt_getPoolNum_(e) != 0U) {
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff fd1c 	bl	8003ebe <QEvt_getPoolNum_>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <QActive_publishFromISR_+0xae>
        // prevent premature recycling of the event while the multicasting
        // is still in progress. At the end of the function, the garbage
        // collector step (QF_gcFromISR()) decrements the reference counter
        // and recycles the event if the counter drops to zero. This covers
        // the case when the event was published without any subscribers.
        QEvt_refCtr_inc_(e);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff fd6e 	bl	8003f6e <QEvt_refCtr_inc_>
    }

    // make a local, modifiable copy of the subscriber list
    QPSet subscrSet = QActive_subscrList_[sig].set;
 8004492:	4b36      	ldr	r3, [pc, #216]	@ (800456c <QActive_publishFromISR_+0x188>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4413      	add	r3, r2
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	623b      	str	r3, [r7, #32]
        __asm volatile
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f383 8811 	msr	BASEPRI, r3
    }
 80044aa:	bf00      	nop
    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    if (QPSet_notEmpty(&subscrSet)) { // any subscribers?
 80044ac:	f107 0310 	add.w	r3, r7, #16
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fd12 	bl	8003eda <QPSet_notEmpty>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d04c      	beq.n	8004556 <QActive_publishFromISR_+0x172>
        // the highest-prio subscriber
        uint_fast8_t p = QPSet_findMax(&subscrSet);
 80044bc:	f107 0310 	add.w	r3, r7, #16
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fd31 	bl	8003f28 <QPSet_findMax>
 80044c6:	6378      	str	r0, [r7, #52]	@ 0x34
        __asm volatile
 80044c8:	f3ef 8211 	mrs	r2, BASEPRI
 80044cc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044d0:	b672      	cpsid	i
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	b662      	cpsie	i
 80044e0:	61fa      	str	r2, [r7, #28]
 80044e2:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80044e4:	69fb      	ldr	r3, [r7, #28]

        // no need to lock the scheduler in the ISR context
        do { // loop over all subscribers
            // the prio of the AO must be registered with the framework
            uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            Q_ASSERT_INCRIT(620, QActive_registry_[p] != (QActive *)0);
 80044e8:	4a21      	ldr	r2, [pc, #132]	@ (8004570 <QActive_publishFromISR_+0x18c>)
 80044ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <QActive_publishFromISR_+0x11a>
 80044f4:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 80044f8:	481a      	ldr	r0, [pc, #104]	@ (8004564 <QActive_publishFromISR_+0x180>)
 80044fa:	f7fb ff5d 	bl	80003b8 <Q_onError>
 80044fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004500:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f383 8811 	msr	BASEPRI, r3
    }
 8004508:	bf00      	nop
            portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

            // QACTIVE_POST_FROM_ISR() asserts if the queue overflows
            QACTIVE_POST_FROM_ISR(QActive_registry_[p], e,
 800450a:	4a19      	ldr	r2, [pc, #100]	@ (8004570 <QActive_publishFromISR_+0x18c>)
 800450c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004512:	2300      	movs	r3, #0
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	f7ff febf 	bl	80042a0 <QActive_postFromISR_>
                                  pxHigherPriorityTaskWoken, sender);

            QPSet_remove(&subscrSet, p); // remove the handled subscriber
 8004522:	f107 0310 	add.w	r3, r7, #16
 8004526:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fce7 	bl	8003efc <QPSet_remove>
            if (QPSet_notEmpty(&subscrSet)) { // still more subscribers?
 800452e:	f107 0310 	add.w	r3, r7, #16
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fcd1 	bl	8003eda <QPSet_notEmpty>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <QActive_publishFromISR_+0x168>
                p = QPSet_findMax(&subscrSet); // the highest-prio subscriber
 800453e:	f107 0310 	add.w	r3, r7, #16
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fcf0 	bl	8003f28 <QPSet_findMax>
 8004548:	6378      	str	r0, [r7, #52]	@ 0x34
 800454a:	e001      	b.n	8004550 <QActive_publishFromISR_+0x16c>
            }
            else {
                p = 0U; // no more subscribers
 800454c:	2300      	movs	r3, #0
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        } while (p != 0U);
 8004550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1b8      	bne.n	80044c8 <QActive_publishFromISR_+0xe4>
    }

    // The following garbage collection step decrements the reference counter
    // and recycles the event if the counter drops to zero. This covers both
    // cases when the event was published with or without any subscribers.
    QF_gcFromISR(e);
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f9d6 	bl	8004908 <QF_gcFromISR>
}
 800455c:	bf00      	nop
 800455e:	3738      	adds	r7, #56	@ 0x38
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	08006358 	.word	0x08006358
 8004568:	24002684 	.word	0x24002684
 800456c:	24002680 	.word	0x24002680
 8004570:	240025a4 	.word	0x240025a4

08004574 <QTimeEvt_tickFromISR_>:
//............................................................................
void QTimeEvt_tickFromISR_(uint_fast8_t const tickRate,
                          BaseType_t * const pxHigherPriorityTaskWoken,
                          void const * const sender)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b094      	sub	sp, #80	@ 0x50
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
        __asm volatile
 8004580:	f3ef 8211 	mrs	r2, BASEPRI
 8004584:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004588:	b672      	cpsid	i
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	b662      	cpsie	i
 8004598:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800459a:	62bb      	str	r3, [r7, #40]	@ 0x28
        return ulOriginalBASEPRI;
 800459c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800459e:	647b      	str	r3, [r7, #68]	@ 0x44

    Q_REQUIRE_INCRIT(700, tickRate < Q_DIM(QTimeEvt_timeEvtHead_));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <QTimeEvt_tickFromISR_+0x3c>
 80045a6:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 80045aa:	4889      	ldr	r0, [pc, #548]	@ (80047d0 <QTimeEvt_tickFromISR_+0x25c>)
 80045ac:	f7fb ff04 	bl	80003b8 <Q_onError>

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	015b      	lsls	r3, r3, #5
 80045b4:	4a87      	ldr	r2, [pc, #540]	@ (80047d4 <QTimeEvt_tickFromISR_+0x260>)
 80045b6:	4413      	add	r3, r2
 80045b8:	643b      	str	r3, [r7, #64]	@ 0x40
        QS_TEC_PRE(prev->ctr);   // tick ctr
        QS_U8_PRE(tickRate);     // tick rate
    QS_END_PRE()

    // scan the linked-list of time events at this rate...
    uint_fast8_t lbound = 2U*QF_MAX_ACTIVE; // fixed upper loop bound
 80045ba:	2340      	movs	r3, #64	@ 0x40
 80045bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (; lbound > 0U; --lbound) {
 80045be:	e0ee      	b.n	800479e <QTimeEvt_tickFromISR_+0x22a>
        Q_ASSERT_INCRIT(710, prev != (QTimeEvt *)0); // sanity check
 80045c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d104      	bne.n	80045d0 <QTimeEvt_tickFromISR_+0x5c>
 80045c6:	f240 21c6 	movw	r1, #710	@ 0x2c6
 80045ca:	4881      	ldr	r0, [pc, #516]	@ (80047d0 <QTimeEvt_tickFromISR_+0x25c>)
 80045cc:	f7fb fef4 	bl	80003b8 <Q_onError>

        QTimeEvt *te = prev->next; // advance down the time evt. list
 80045d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	63bb      	str	r3, [r7, #56]	@ 0x38
#ifndef Q_UNSAFE
        Q_INVARIANT_INCRIT(711,
 80045d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	43da      	mvns	r2, r3
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	429a      	cmp	r2, r3
 80045e0:	d004      	beq.n	80045ec <QTimeEvt_tickFromISR_+0x78>
 80045e2:	f240 21c7 	movw	r1, #711	@ 0x2c7
 80045e6:	487a      	ldr	r0, [pc, #488]	@ (80047d0 <QTimeEvt_tickFromISR_+0x25c>)
 80045e8:	f7fb fee6 	bl	80003b8 <Q_onError>
                           Q_PTR2UINT_CAST_(te) == (uintptr_t)~prev->next_dis);
#endif // ndef Q_UNSAFE

        if (te == (QTimeEvt *)0) { // end of the list?
 80045ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d138      	bne.n	8004664 <QTimeEvt_tickFromISR_+0xf0>

            // any new time events armed since the last QTimeEvt_tick_()?
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 80045f2:	4a78      	ldr	r2, [pc, #480]	@ (80047d4 <QTimeEvt_tickFromISR_+0x260>)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	015b      	lsls	r3, r3, #5
 80045f8:	4413      	add	r3, r2
 80045fa:	330c      	adds	r3, #12
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80d2 	beq.w	80047a8 <QTimeEvt_tickFromISR_+0x234>
#ifndef Q_UNSAFE
                Q_INVARIANT_INCRIT(712,
 8004604:	4a73      	ldr	r2, [pc, #460]	@ (80047d4 <QTimeEvt_tickFromISR_+0x260>)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015b      	lsls	r3, r3, #5
 800460a:	4413      	add	r3, r2
 800460c:	330c      	adds	r3, #12
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4619      	mov	r1, r3
 8004612:	4a71      	ldr	r2, [pc, #452]	@ (80047d8 <QTimeEvt_tickFromISR_+0x264>)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461a:	43db      	mvns	r3, r3
 800461c:	4299      	cmp	r1, r3
 800461e:	d004      	beq.n	800462a <QTimeEvt_tickFromISR_+0xb6>
 8004620:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
 8004624:	486a      	ldr	r0, [pc, #424]	@ (80047d0 <QTimeEvt_tickFromISR_+0x25c>)
 8004626:	f7fb fec7 	bl	80003b8 <Q_onError>
                    Q_PTR2UINT_CAST_(QTimeEvt_timeEvtHead_[tickRate].act)
                    == (uintptr_t)~QTimeEvt_timeEvtHead_dis_[tickRate]);
#endif // ndef Q_UNSAFE
                prev->next = QTimeEvt_timeEvtHead_[tickRate].act;
 800462a:	4a6a      	ldr	r2, [pc, #424]	@ (80047d4 <QTimeEvt_tickFromISR_+0x260>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	015b      	lsls	r3, r3, #5
 8004630:	4413      	add	r3, r2
 8004632:	330c      	adds	r3, #12
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004638:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 800463a:	4a66      	ldr	r2, [pc, #408]	@ (80047d4 <QTimeEvt_tickFromISR_+0x260>)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	015b      	lsls	r3, r3, #5
 8004640:	4413      	add	r3, r2
 8004642:	330c      	adds	r3, #12
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
#ifndef Q_UNSAFE
                prev->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(prev->next);
 8004648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	43da      	mvns	r2, r3
 800464e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004650:	609a      	str	r2, [r3, #8]
                QTimeEvt_timeEvtHead_dis_[tickRate] =
 8004652:	4a61      	ldr	r2, [pc, #388]	@ (80047d8 <QTimeEvt_tickFromISR_+0x264>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f04f 31ff 	mov.w	r1, #4294967295
 800465a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    (uintptr_t)~Q_PTR2UINT_CAST_((void *)0);
#endif // ndef Q_UNSAFE

                te = prev->next; // switch to the new list
 800465e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	63bb      	str	r3, [r7, #56]	@ 0x38
                break; // terminate the for-loop
            }
        }

        // the time event 'te' must be valid
        Q_ASSERT_INCRIT(720, te != (QTimeEvt *)0);
 8004664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d104      	bne.n	8004674 <QTimeEvt_tickFromISR_+0x100>
 800466a:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800466e:	4858      	ldr	r0, [pc, #352]	@ (80047d0 <QTimeEvt_tickFromISR_+0x25c>)
 8004670:	f7fb fea2 	bl	80003b8 <Q_onError>

        QTimeEvtCtr ctr = te->ctr;
 8004674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	637b      	str	r3, [r7, #52]	@ 0x34
#ifndef Q_UNSAFE
        Q_INVARIANT_INCRIT(721, QEvt_verify_(&te->super));
 800467a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fbff 	bl	8003e80 <QEvt_verify_>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <QTimeEvt_tickFromISR_+0x11e>
 8004688:	f240 21d1 	movw	r1, #721	@ 0x2d1
 800468c:	4850      	ldr	r0, [pc, #320]	@ (80047d0 <QTimeEvt_tickFromISR_+0x25c>)
 800468e:	f7fb fe93 	bl	80003b8 <Q_onError>
        Q_INVARIANT_INCRIT(722, ctr == (QTimeEvtCtr)~te->ctr_dis);
 8004692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	43db      	mvns	r3, r3
 8004698:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800469a:	429a      	cmp	r2, r3
 800469c:	d004      	beq.n	80046a8 <QTimeEvt_tickFromISR_+0x134>
 800469e:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80046a2:	484b      	ldr	r0, [pc, #300]	@ (80047d0 <QTimeEvt_tickFromISR_+0x25c>)
 80046a4:	f7fb fe88 	bl	80003b8 <Q_onError>
#endif // ndef Q_UNSAFE

        if (ctr == 0U) { // time event scheduled for removal?
 80046a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d115      	bne.n	80046da <QTimeEvt_tickFromISR_+0x166>
            prev->next = te->next;
 80046ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b4:	605a      	str	r2, [r3, #4]
#ifndef Q_UNSAFE
            prev->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(te->next);
 80046b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	43da      	mvns	r2, r3
 80046bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046be:	609a      	str	r2, [r3, #8]
#endif // ndef Q_UNSAFE

            // mark time event 'te' as NOT linked
            te->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	7f5b      	ldrb	r3, [r3, #29]
 80046c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	775a      	strb	r2, [r3, #29]
 80046ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
        __asm volatile
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	f383 8811 	msr	BASEPRI, r3
    }
 80046d8:	e04e      	b.n	8004778 <QTimeEvt_tickFromISR_+0x204>
            // do NOT advance the prev pointer

            // exit crit. section to reduce latency
            portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
        }
        else if (ctr == 1U) { // is time event about to expire?
 80046da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d139      	bne.n	8004754 <QTimeEvt_tickFromISR_+0x1e0>
            QActive * const act = (QActive *)te->act;
 80046e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	633b      	str	r3, [r7, #48]	@ 0x30
            if (te->interval != 0U) { // periodic time evt?
 80046e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <QTimeEvt_tickFromISR_+0x192>
                te->ctr = te->interval; // rearm the time event
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	611a      	str	r2, [r3, #16]
#ifndef Q_UNSAFE
                te->ctr_dis = (QTimeEvtCtr)~te->interval;
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	43da      	mvns	r2, r3
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	615a      	str	r2, [r3, #20]
#endif // ndef Q_UNSAFE
                prev = te; // advance to this time event
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	643b      	str	r3, [r7, #64]	@ 0x40
 8004704:	e016      	b.n	8004734 <QTimeEvt_tickFromISR_+0x1c0>
            }
            else { // one-shot time event: automatically disarm
                te->ctr = 0U;
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	2200      	movs	r2, #0
 800470a:	611a      	str	r2, [r3, #16]
                prev->next = te->next;
 800470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004712:	605a      	str	r2, [r3, #4]
#ifndef Q_UNSAFE
                te->ctr_dis = (QTimeEvtCtr)~0U;
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	f04f 32ff 	mov.w	r2, #4294967295
 800471a:	615a      	str	r2, [r3, #20]
                prev->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(te->next);
 800471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	43da      	mvns	r2, r3
 8004722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004724:	609a      	str	r2, [r3, #8]
#endif // ndef Q_UNSAFE

                // mark time event 'e' as NOT linked
                te->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	7f5b      	ldrb	r3, [r3, #29]
 800472a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800472e:	b2da      	uxtb	r2, r3
 8004730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004732:	775a      	strb	r2, [r3, #29]
 8004734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004736:	623b      	str	r3, [r7, #32]
        __asm volatile
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	f383 8811 	msr	BASEPRI, r3
    }
 800473e:	bf00      	nop
            QS_END_PRE()

            portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

            // QACTIVE_POST_FROM_ISR() asserts if the queue overflows
            QACTIVE_POST_FROM_ISR(act, &te->super,
 8004740:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004742:	2300      	movs	r3, #0
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800474c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800474e:	f7ff fda7 	bl	80042a0 <QActive_postFromISR_>
 8004752:	e011      	b.n	8004778 <QTimeEvt_tickFromISR_+0x204>
                                  pxHigherPriorityTaskWoken,
                                  sender);
        }
        else { // time event keeps timing out
            --ctr; // decrement the tick counter
 8004754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004756:	3b01      	subs	r3, #1
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
            te->ctr = ctr; // update the original
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800475e:	611a      	str	r2, [r3, #16]
#ifndef Q_UNSAFE
            te->ctr_dis = (QTimeEvtCtr)~ctr;
 8004760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004762:	43da      	mvns	r2, r3
 8004764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004766:	615a      	str	r2, [r3, #20]
#endif // ndef Q_UNSAFE

            prev = te; // advance to this time event
 8004768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476a:	643b      	str	r3, [r7, #64]	@ 0x40
 800476c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476e:	61fb      	str	r3, [r7, #28]
        __asm volatile
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f383 8811 	msr	BASEPRI, r3
    }
 8004776:	bf00      	nop
        __asm volatile
 8004778:	f3ef 8211 	mrs	r2, BASEPRI
 800477c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004780:	b672      	cpsid	i
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	b662      	cpsie	i
 8004790:	61ba      	str	r2, [r7, #24]
 8004792:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8004794:	69bb      	ldr	r3, [r7, #24]

            portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
        }
        // re-enter crit. section to continue the loop
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004796:	647b      	str	r3, [r7, #68]	@ 0x44
    for (; lbound > 0U; --lbound) {
 8004798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479a:	3b01      	subs	r3, #1
 800479c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800479e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f47f af0d 	bne.w	80045c0 <QTimeEvt_tickFromISR_+0x4c>
 80047a6:	e000      	b.n	80047aa <QTimeEvt_tickFromISR_+0x236>
                break; // terminate the for-loop
 80047a8:	bf00      	nop
    }

    Q_ENSURE_INCRIT(890, lbound > 0U);
 80047aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <QTimeEvt_tickFromISR_+0x246>
 80047b0:	f240 317a 	movw	r1, #890	@ 0x37a
 80047b4:	4806      	ldr	r0, [pc, #24]	@ (80047d0 <QTimeEvt_tickFromISR_+0x25c>)
 80047b6:	f7fb fdff 	bl	80003b8 <Q_onError>
 80047ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047bc:	613b      	str	r3, [r7, #16]
        __asm volatile
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f383 8811 	msr	BASEPRI, r3
    }
 80047c4:	bf00      	nop

    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
}
 80047c6:	bf00      	nop
 80047c8:	3748      	adds	r7, #72	@ 0x48
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	08006358 	.word	0x08006358
 80047d4:	24002688 	.word	0x24002688
 80047d8:	240026a8 	.word	0x240026a8

080047dc <QF_newXFromISR_>:
//............................................................................
QEvt *QF_newXFromISR_(uint_fast16_t const evtSize,
                      uint_fast16_t const margin, enum_t const sig)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	@ 0x38
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
    // find the pool index that fits the requested event size...
    uint_fast8_t poolNum = 0U; // zero-based poolNum initially
 80047e8:	2300      	movs	r3, #0
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 80047ec:	e00f      	b.n	800480e <QF_newXFromISR_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum])) {
 80047ee:	4944      	ldr	r1, [pc, #272]	@ (8004900 <QF_newXFromISR_+0x124>)
 80047f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	330c      	adds	r3, #12
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4293      	cmp	r3, r2
 8004806:	d908      	bls.n	800481a <QF_newXFromISR_+0x3e>
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	3301      	adds	r3, #1
 800480c:	637b      	str	r3, [r7, #52]	@ 0x34
 800480e:	4b3c      	ldr	r3, [pc, #240]	@ (8004900 <QF_newXFromISR_+0x124>)
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004814:	429a      	cmp	r2, r3
 8004816:	d3ea      	bcc.n	80047ee <QF_newXFromISR_+0x12>
 8004818:	e000      	b.n	800481c <QF_newXFromISR_+0x40>
            break;
 800481a:	bf00      	nop
        __asm volatile
 800481c:	f3ef 8211 	mrs	r2, BASEPRI
 8004820:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004824:	b672      	cpsid	i
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	b662      	cpsie	i
 8004834:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
        return ulOriginalBASEPRI;
 8004838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        }
    }

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800483a:	633b      	str	r3, [r7, #48]	@ 0x30

    // precondition:
    // - cannot run out of registered pools
    Q_REQUIRE_INCRIT(800, poolNum < QF_priv_.maxPool_);
 800483c:	4b30      	ldr	r3, [pc, #192]	@ (8004900 <QF_newXFromISR_+0x124>)
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004842:	429a      	cmp	r2, r3
 8004844:	d304      	bcc.n	8004850 <QF_newXFromISR_+0x74>
 8004846:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800484a:	482e      	ldr	r0, [pc, #184]	@ (8004904 <QF_newXFromISR_+0x128>)
 800484c:	f7fb fdb4 	bl	80003b8 <Q_onError>

    ++poolNum; // convert to 1-based poolNum
 8004850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004852:	3301      	adds	r3, #1
 8004854:	637b      	str	r3, [r7, #52]	@ 0x34
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	623b      	str	r3, [r7, #32]
        __asm volatile
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f383 8811 	msr	BASEPRI, r3
    }
 8004860:	bf00      	nop
#ifdef Q_SPY
    QEvt *e = QMPool_getFromISR(&QF_priv_.ePool_[poolNum - 1U],
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + poolNum);
#else
    QEvt *e = QMPool_getFromISR(&QF_priv_.ePool_[poolNum - 1U],
 8004862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004864:	1e5a      	subs	r2, r3, #1
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4a24      	ldr	r2, [pc, #144]	@ (8004900 <QF_newXFromISR_+0x124>)
 8004870:	1898      	adds	r0, r3, r2
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004878:	4293      	cmp	r3, r2
 800487a:	d001      	beq.n	8004880 <QF_newXFromISR_+0xa4>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	e000      	b.n	8004882 <QF_newXFromISR_+0xa6>
 8004880:	2300      	movs	r3, #0
 8004882:	2200      	movs	r2, #0
 8004884:	4619      	mov	r1, r3
 8004886:	f000 f8ab 	bl	80049e0 <QMPool_getFromISR>
 800488a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                      ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    if (e != (QEvt *)0) { // was e allocated correctly?
 800488c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <QF_newXFromISR_+0xd8>
        e->sig     = (QSignal)sig; // set the signal
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	b29a      	uxth	r2, r3
 8004896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004898:	801a      	strh	r2, [r3, #0]
        e->refCtr_ = 0U; // initialize the reference counter to 0
 800489a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489c:	2200      	movs	r2, #0
 800489e:	70da      	strb	r2, [r3, #3]
        e->evtTag_ = (uint8_t)((poolNum << 4U) | 0x0FU);
 80048a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f043 030f 	orr.w	r3, r3, #15
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b0:	709a      	strb	r2, [r3, #2]
 80048b2:	e01f      	b.n	80048f4 <QF_newXFromISR_+0x118>
        __asm volatile
 80048b4:	f3ef 8211 	mrs	r2, BASEPRI
 80048b8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048bc:	b672      	cpsid	i
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	b662      	cpsie	i
 80048cc:	61fa      	str	r2, [r7, #28]
 80048ce:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80048d0:	69fb      	ldr	r3, [r7, #28]
        QS_END_PRE()
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
#endif // def Q_SPY
    }
    else { // event was not allocated
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048d2:	633b      	str	r3, [r7, #48]	@ 0x30

        // This assertion means that the event allocation failed,
        // and this failure cannot be tolerated. The most frequent
        // reason is an event leak in the application.
        Q_ASSERT_INCRIT(820, margin != QF_NO_MARGIN);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048da:	4293      	cmp	r3, r2
 80048dc:	d104      	bne.n	80048e8 <QF_newXFromISR_+0x10c>
 80048de:	f44f 714d 	mov.w	r1, #820	@ 0x334
 80048e2:	4808      	ldr	r0, [pc, #32]	@ (8004904 <QF_newXFromISR_+0x128>)
 80048e4:	f7fb fd68 	bl	80003b8 <Q_onError>
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	617b      	str	r3, [r7, #20]
        __asm volatile
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f383 8811 	msr	BASEPRI, r3
    }
 80048f2:	bf00      	nop
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    }

    // the returned event e is guaranteed to be valid (not NULL)
    // if we can't tolerate failed allocation
    return e;
 80048f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3738      	adds	r7, #56	@ 0x38
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	24002628 	.word	0x24002628
 8004904:	08006358 	.word	0x08006358

08004908 <QF_gcFromISR>:
//............................................................................
void QF_gcFromISR(QEvt const * const e) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
        __asm volatile
 8004910:	f3ef 8211 	mrs	r2, BASEPRI
 8004914:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004918:	b672      	cpsid	i
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	b662      	cpsie	i
 8004928:	61fa      	str	r2, [r7, #28]
 800492a:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 800492c:	69fb      	ldr	r3, [r7, #28]
    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24

    Q_REQUIRE_INCRIT(700, e != (QEvt *)0);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <QF_gcFromISR+0x38>
 8004936:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800493a:	4827      	ldr	r0, [pc, #156]	@ (80049d8 <QF_gcFromISR+0xd0>)
 800493c:	f7fb fd3c 	bl	80003b8 <Q_onError>
#ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(701, QEvt_verify_(e));
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff fa9d 	bl	8003e80 <QEvt_verify_>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <QF_gcFromISR+0x4e>
 800494c:	f240 21bd 	movw	r1, #701	@ 0x2bd
 8004950:	4821      	ldr	r0, [pc, #132]	@ (80049d8 <QF_gcFromISR+0xd0>)
 8004952:	f7fb fd31 	bl	80003b8 <Q_onError>
#endif

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff fab1 	bl	8003ebe <QEvt_getPoolNum_>
 800495c:	6238      	str	r0, [r7, #32]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02e      	beq.n	80049c2 <QF_gcFromISR+0xba>

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	78db      	ldrb	r3, [r3, #3]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d908      	bls.n	8004980 <QF_gcFromISR+0x78>
                QS_TIME_PRE();       // timestamp
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            QEvt_refCtr_dec_(e); // decrement the ref counter
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fb1e 	bl	8003fb0 <QEvt_refCtr_dec_>
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f383 8811 	msr	BASEPRI, r3
    }
 800497e:	e026      	b.n	80049ce <QF_gcFromISR+0xc6>
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            // pool number must be in range
            Q_ASSERT_INCRIT(710, (poolNum <= QF_priv_.maxPool_)
 8004980:	4b16      	ldr	r3, [pc, #88]	@ (80049dc <QF_gcFromISR+0xd4>)
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	429a      	cmp	r2, r3
 8004988:	d802      	bhi.n	8004990 <QF_gcFromISR+0x88>
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d904      	bls.n	800499a <QF_gcFromISR+0x92>
 8004990:	f240 21c6 	movw	r1, #710	@ 0x2c6
 8004994:	4810      	ldr	r0, [pc, #64]	@ (80049d8 <QF_gcFromISR+0xd0>)
 8004996:	f7fb fd0f 	bl	80003b8 <Q_onError>
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	613b      	str	r3, [r7, #16]
        __asm volatile
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f383 8811 	msr	BASEPRI, r3
    }
 80049a4:	bf00      	nop
#ifdef Q_SPY
            // cast 'const' away in (QEvt *)e is OK because it's a pool event
            QMPool_putFromISR(&QF_priv_.ePool_[poolNum - 1U], (QEvt *)e,
                              (uint_fast8_t)QS_EP_ID + QEvt_getPoolNum_(e));
#else
            QMPool_putFromISR(&QF_priv_.ePool_[poolNum - 1U], (QEvt *)e, 0U);
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	1e5a      	subs	r2, r3, #1
 80049aa:	4613      	mov	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4a0a      	ldr	r2, [pc, #40]	@ (80049dc <QF_gcFromISR+0xd4>)
 80049b4:	4413      	add	r3, r2
 80049b6:	2200      	movs	r2, #0
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f8ae 	bl	8004b1c <QMPool_putFromISR>
        }
    }
    else {
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    }
}
 80049c0:	e005      	b.n	80049ce <QF_gcFromISR+0xc6>
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f383 8811 	msr	BASEPRI, r3
    }
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	3728      	adds	r7, #40	@ 0x28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	08006358 	.word	0x08006358
 80049dc:	24002628 	.word	0x24002628

080049e0 <QMPool_getFromISR>:
//............................................................................
void *QMPool_getFromISR(QMPool * const me, uint_fast16_t const margin,
                        uint_fast8_t const qsId)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	@ 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
        __asm volatile
 80049ec:	f3ef 8211 	mrs	r2, BASEPRI
 80049f0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80049f4:	b672      	cpsid	i
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	b662      	cpsie	i
 8004a04:	61fa      	str	r2, [r7, #28]
 8004a06:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004a08:	69fb      	ldr	r3, [r7, #28]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

    // get volatile into temporaries
    QFreeBlock *fb = me->free_head;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    QMPoolCtr nFree = me->nFree;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8a1b      	ldrh	r3, [r3, #16]
 8004a16:	84fb      	strh	r3, [r7, #38]	@ 0x26

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(801, Q_PTR2UINT_CAST_(fb)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	43da      	mvns	r2, r3
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d004      	beq.n	8004a2e <QMPool_getFromISR+0x4e>
 8004a24:	f240 3121 	movw	r1, #801	@ 0x321
 8004a28:	483b      	ldr	r0, [pc, #236]	@ (8004b18 <QMPool_getFromISR+0x138>)
 8004a2a:	f7fb fcc5 	bl	80003b8 <Q_onError>
                            == (uintptr_t)~me->free_head_dis);
    Q_INVARIANT_INCRIT(802, nFree == (QMPoolCtr)~me->nFree_dis);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8b1b      	ldrh	r3, [r3, #24]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d004      	beq.n	8004a46 <QMPool_getFromISR+0x66>
 8004a3c:	f240 3122 	movw	r1, #802	@ 0x322
 8004a40:	4835      	ldr	r0, [pc, #212]	@ (8004b18 <QMPool_getFromISR+0x138>)
 8004a42:	f7fb fcb9 	bl	80003b8 <Q_onError>
    #endif // ndef Q_UNSAFE

    // have more free blocks than the requested margin?
    if (nFree > (QMPoolCtr)margin) {
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d955      	bls.n	8004afc <QMPool_getFromISR+0x11c>
        Q_ASSERT_INCRIT(810, fb != (QFreeBlock *)0);
 8004a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <QMPool_getFromISR+0x80>
 8004a56:	f240 312a 	movw	r1, #810	@ 0x32a
 8004a5a:	482f      	ldr	r0, [pc, #188]	@ (8004b18 <QMPool_getFromISR+0x138>)
 8004a5c:	f7fb fcac 	bl	80003b8 <Q_onError>

        QFreeBlock * const fb_next = fb->next; // fast temporary
 8004a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	623b      	str	r3, [r7, #32]

    #ifndef Q_UNSAFE
        // the free block must have integrity (duplicate inverse storage)
        Q_INVARIANT_INCRIT(811, Q_PTR2UINT_CAST_(fb_next)
 8004a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d004      	beq.n	8004a7c <QMPool_getFromISR+0x9c>
 8004a72:	f240 312b 	movw	r1, #811	@ 0x32b
 8004a76:	4828      	ldr	r0, [pc, #160]	@ (8004b18 <QMPool_getFromISR+0x138>)
 8004a78:	f7fb fc9e 	bl	80003b8 <Q_onError>
                                == (uintptr_t)~fb->next_dis);
    #endif // ndef Q_UNSAFE

        --nFree; // one less free block
 8004a7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (nFree == 0U) { // is the pool becoming empty?
 8004a82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d112      	bne.n	8004aae <QMPool_getFromISR+0xce>
            // pool is becoming empty, so the next free block must be NULL
            Q_ASSERT_INCRIT(820, fb_next == (QFreeBlock *)0);
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <QMPool_getFromISR+0xb8>
 8004a8e:	f44f 714d 	mov.w	r1, #820	@ 0x334
 8004a92:	4821      	ldr	r0, [pc, #132]	@ (8004b18 <QMPool_getFromISR+0x138>)
 8004a94:	f7fb fc90 	bl	80003b8 <Q_onError>

            me->nFree = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	821a      	strh	r2, [r3, #16]
    #ifndef Q_UNSAFE
            me->nFree_dis = (QMPoolCtr)~0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004aa4:	831a      	strh	r2, [r3, #24]
            me->nMin = 0U; // remember that the pool got empty
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	825a      	strh	r2, [r3, #18]
 8004aac:	e01e      	b.n	8004aec <QMPool_getFromISR+0x10c>
    #endif // ndef Q_UNSAFE
        }
        else {
            me->nFree = nFree;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004ab2:	821a      	strh	r2, [r3, #16]
    #ifndef Q_UNSAFE
            me->nFree_dis = (QMPoolCtr)~nFree;
 8004ab4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	831a      	strh	r2, [r3, #24]

            // The pool is not empty, so the next free-block pointer
            // must be in range.
            Q_INVARIANT_INCRIT(830,
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d304      	bcc.n	8004ad2 <QMPool_getFromISR+0xf2>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d904      	bls.n	8004adc <QMPool_getFromISR+0xfc>
 8004ad2:	f240 313e 	movw	r1, #830	@ 0x33e
 8004ad6:	4810      	ldr	r0, [pc, #64]	@ (8004b18 <QMPool_getFromISR+0x138>)
 8004ad8:	f7fb fc6e 	bl	80003b8 <Q_onError>
                (me->start <= fb_next) && (fb_next <= me->end));

            // is the # free blocks the new minimum so far?
            if (me->nMin > nFree) {
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8a5b      	ldrh	r3, [r3, #18]
 8004ae0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d202      	bcs.n	8004aec <QMPool_getFromISR+0x10c>
                me->nMin = nFree; // remember the minimum so far
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004aea:	825a      	strh	r2, [r3, #18]
            }
    #endif // ndef Q_UNSAFE
        }

        me->free_head = fb_next; // set the head to the next free block
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	609a      	str	r2, [r3, #8]
    #ifndef Q_UNSAFE
        me->free_head_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb_next));
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	43da      	mvns	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	615a      	str	r2, [r3, #20]
 8004afa:	e001      	b.n	8004b00 <QMPool_getFromISR+0x120>
            QS_MPC_PRE(0U);        // min # free blocks (not available)
    #endif // ndef Q_UNSAFE
        QS_END_PRE()
    }
    else { // don't have enough free blocks at this point
        fb = (QFreeBlock *)0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f383 8811 	msr	BASEPRI, r3
    }
 8004b0a:	bf00      	nop
        QS_END_PRE()
    }

    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    return fb; // return the block or NULL pointer to the caller
 8004b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3730      	adds	r7, #48	@ 0x30
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	08006358 	.word	0x08006358

08004b1c <QMPool_putFromISR>:
//............................................................................
void QMPool_putFromISR(QMPool * const me, void *block,
                       uint_fast8_t const qsId)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	@ 0x30
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        __asm volatile
 8004b2c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b30:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b34:	b672      	cpsid	i
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	b662      	cpsie	i
 8004b44:	61fa      	str	r2, [r7, #28]
 8004b46:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004b48:	69fb      	ldr	r3, [r7, #28]

    UBaseType_t uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

    // get volatile into temporaries
    QFreeBlock *free_head = me->free_head;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
    QMPoolCtr nFree = me->nFree;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8a1b      	ldrh	r3, [r3, #16]
 8004b56:	847b      	strh	r3, [r7, #34]	@ 0x22

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(901, Q_PTR2UINT_CAST_(free_head)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d004      	beq.n	8004b6e <QMPool_putFromISR+0x52>
 8004b64:	f240 3185 	movw	r1, #901	@ 0x385
 8004b68:	4825      	ldr	r0, [pc, #148]	@ (8004c00 <QMPool_putFromISR+0xe4>)
 8004b6a:	f7fb fc25 	bl	80003b8 <Q_onError>
                            == (uintptr_t)~me->free_head_dis);
    Q_INVARIANT_INCRIT(902, nFree == (QMPoolCtr)~me->nFree_dis);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8b1b      	ldrh	r3, [r3, #24]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d004      	beq.n	8004b86 <QMPool_putFromISR+0x6a>
 8004b7c:	f240 3186 	movw	r1, #902	@ 0x386
 8004b80:	481f      	ldr	r0, [pc, #124]	@ (8004c00 <QMPool_putFromISR+0xe4>)
 8004b82:	f7fb fc19 	bl	80003b8 <Q_onError>
    #endif // ndef Q_UNSAFE

    Q_REQUIRE_INCRIT(910, nFree < me->nTot);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	89db      	ldrh	r3, [r3, #14]
 8004b8a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d304      	bcc.n	8004b9a <QMPool_putFromISR+0x7e>
 8004b90:	f240 318e 	movw	r1, #910	@ 0x38e
 8004b94:	481a      	ldr	r0, [pc, #104]	@ (8004c00 <QMPool_putFromISR+0xe4>)
 8004b96:	f7fb fc0f 	bl	80003b8 <Q_onError>
    Q_REQUIRE_INCRIT(911, (me->start <= fb) && (fb <= me->end));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d304      	bcc.n	8004bae <QMPool_putFromISR+0x92>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d904      	bls.n	8004bb8 <QMPool_putFromISR+0x9c>
 8004bae:	f240 318f 	movw	r1, #911	@ 0x38f
 8004bb2:	4813      	ldr	r0, [pc, #76]	@ (8004c00 <QMPool_putFromISR+0xe4>)
 8004bb4:	f7fb fc00 	bl	80003b8 <Q_onError>

    ++nFree; // one more free block in this pool
 8004bb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004bba:	3301      	adds	r3, #1
 8004bbc:	847b      	strh	r3, [r7, #34]	@ 0x22

    me->free_head = fb; // set as new head of the free list
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bc2:	609a      	str	r2, [r3, #8]
    me->nFree     = nFree;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004bc8:	821a      	strh	r2, [r3, #16]
    fb->next      = free_head; // link into list
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bce:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    me->free_head_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb));
 8004bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	615a      	str	r2, [r3, #20]
    me->nFree_dis     = (QMPoolCtr)~nFree;
 8004bd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	831a      	strh	r2, [r3, #24]
    fb->next_dis      = (uintptr_t)(~Q_PTR2UINT_CAST_(free_head));
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	43da      	mvns	r2, r3
 8004be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f383 8811 	msr	BASEPRI, r3
    }
 8004bf4:	bf00      	nop
        QS_OBJ_PRE(me);        // this memory pool
        QS_MPC_PRE(nFree);     // the # free blocks in the pool
    QS_END_PRE()

    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
}
 8004bf6:	bf00      	nop
 8004bf8:	3730      	adds	r7, #48	@ 0x30
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	08006358 	.word	0x08006358

08004c04 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	78db      	ldrb	r3, [r3, #3]
 8004c10:	73fb      	strb	r3, [r7, #15]
           && (((me->evtTag_ ^ rc) & 0x0FU) == 0x0FU);
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b40      	cmp	r3, #64	@ 0x40
 8004c16:	d80a      	bhi.n	8004c2e <QEvt_verify_+0x2a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	789a      	ldrb	r2, [r3, #2]
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	4053      	eors	r3, r2
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	d101      	bne.n	8004c2e <QEvt_verify_+0x2a>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <QEvt_verify_+0x2c>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	b2db      	uxtb	r3, r3
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <QHsm_ctor>:

//${QEP::QHsm::ctor} .........................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a06      	ldr	r2, [pc, #24]	@ (8004c6c <QHsm_ctor+0x28>)
 8004c52:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a06      	ldr	r2, [pc, #24]	@ (8004c70 <QHsm_ctor+0x2c>)
 8004c58:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	08006378 	.word	0x08006378
 8004c70:	0800526d 	.word	0x0800526d

08004c74 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08e      	sub	sp, #56	@ 0x38
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
    }
    #else
    Q_UNUSED_PAR(qsId);
    #endif // def Q_SPY

    QStateHandler t = me->state.fun;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	637b      	str	r3, [r7, #52]	@ 0x34

    QF_CRIT_ENTRY();
 8004c86:	f7fe ff3f 	bl	8003b08 <vPortEnterCritical>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <QHsm_init_+0x2e>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <QHsm_init_+0x2e>
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d90 <QHsm_init_+0x11c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <QHsm_init_+0x36>
 8004ca2:	21c8      	movs	r1, #200	@ 0xc8
 8004ca4:	483b      	ldr	r0, [pc, #236]	@ (8004d94 <QHsm_init_+0x120>)
 8004ca6:	f7fb fb87 	bl	80003b8 <Q_onError>
        && (me->temp.fun != Q_STATE_CAST(0))
        && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 8004caa:	f7fe ff59 	bl	8003b60 <vPortExitCritical>

    // execute the top-most initial tran.
    r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	4798      	blx	r3
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    QF_CRIT_ENTRY();
 8004cbe:	f7fe ff23 	bl	8003b08 <vPortEnterCritical>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 8004cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004cc6:	2b07      	cmp	r3, #7
 8004cc8:	d003      	beq.n	8004cd2 <QHsm_init_+0x5e>
 8004cca:	21d2      	movs	r1, #210	@ 0xd2
 8004ccc:	4831      	ldr	r0, [pc, #196]	@ (8004d94 <QHsm_init_+0x120>)
 8004cce:	f7fb fb73 	bl	80003b8 <Q_onError>
        QS_FUN_PRE(t);            // the source state
        QS_FUN_PRE(me->temp.fun); // the target of the initial tran.
    QS_END_PRE()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8004cd2:	f7fe ff45 	bl	8003b60 <vPortExitCritical>

    // drill down into the state hierarchy with initial transitions...
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran. entry path array
        int_fast8_t ip = 0; // tran. entry path index
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	633b      	str	r3, [r7, #48]	@ 0x30

        path[0] = me->temp.fun;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	617b      	str	r3, [r7, #20]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	492c      	ldr	r1, [pc, #176]	@ (8004d98 <QHsm_init_+0x124>)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	4798      	blx	r3
        // note: ip is the fixed upper loop bound
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8004cea:	e00f      	b.n	8004d0c <QHsm_init_+0x98>
            ++ip;
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	3301      	adds	r3, #1
 8004cf0:	633b      	str	r3, [r7, #48]	@ 0x30
            path[ip] = me->temp.fun;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	3338      	adds	r3, #56	@ 0x38
 8004cfc:	443b      	add	r3, r7
 8004cfe:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4924      	ldr	r1, [pc, #144]	@ (8004d98 <QHsm_init_+0x124>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d002      	beq.n	8004d1c <QHsm_init_+0xa8>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	dde7      	ble.n	8004cec <QHsm_init_+0x78>
        }
        QF_CRIT_ENTRY();
 8004d1c:	f7fe fef4 	bl	8003b08 <vPortEnterCritical>
        // too many state nesting levels or "malformed" HSM
        Q_ENSURE_INCRIT(220, ip < QHSM_MAX_NEST_DEPTH_);
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	dd03      	ble.n	8004d2e <QHsm_init_+0xba>
 8004d26:	21dc      	movs	r1, #220	@ 0xdc
 8004d28:	481a      	ldr	r0, [pc, #104]	@ (8004d94 <QHsm_init_+0x120>)
 8004d2a:	f7fb fb45 	bl	80003b8 <Q_onError>
        QF_CRIT_EXIT();
 8004d2e:	f7fe ff17 	bl	8003b60 <vPortExitCritical>

        me->temp.fun = path[0];
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (desired) order...
        // note: ip is the fixed upper loop bound
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	3338      	adds	r3, #56	@ 0x38
 8004d3e:	443b      	add	r3, r7
 8004d40:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004d44:	4915      	ldr	r1, [pc, #84]	@ (8004d9c <QHsm_init_+0x128>)
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	4798      	blx	r3
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
            --ip;
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	633b      	str	r3, [r7, #48]	@ 0x30
        } while (ip >= 0);
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	daf0      	bge.n	8004d38 <QHsm_init_+0xc4>

        t = path[0]; // current state becomes the new source
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34

        r = QHSM_RESERVED_EVT_(t, Q_INIT_SIG); // execute initial tran.
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5c:	4910      	ldr	r1, [pc, #64]	@ (8004da0 <QHsm_init_+0x12c>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	4798      	blx	r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            QS_END_PRE()
            QS_MEM_APP();
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY
    } while (r == Q_RET_TRAN);
 8004d68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d6c:	2b07      	cmp	r3, #7
 8004d6e:	d0b2      	beq.n	8004cd6 <QHsm_init_+0x62>

    QF_CRIT_ENTRY();
 8004d70:	f7fe feca 	bl	8003b08 <vPortEnterCritical>
        QS_OBJ_PRE(me);   // this state machine object
        QS_FUN_PRE(t);    // the new active state
    QS_END_PRE()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8004d74:	f7fe fef4 	bl	8003b60 <vPortExitCritical>

    me->state.fun = t;   // change the current active state
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d7c:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]
    #endif
}
 8004d88:	bf00      	nop
 8004d8a:	3738      	adds	r7, #56	@ 0x38
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	0800526d 	.word	0x0800526d
 8004d94:	08006360 	.word	0x08006360
 8004d98:	08006368 	.word	0x08006368
 8004d9c:	0800636c 	.word	0x0800636c
 8004da0:	08006374 	.word	0x08006374

08004da4 <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08e      	sub	sp, #56	@ 0x38
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler s = me->state.fun;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    QStateHandler t = s;
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8004dba:	f7fe fea5 	bl	8003b08 <vPortEnterCritical>
    Q_REQUIRE_INCRIT(300,
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <QHsm_dispatch_+0x34>
 8004dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d006      	beq.n	8004dd8 <QHsm_dispatch_+0x34>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d004      	beq.n	8004de2 <QHsm_dispatch_+0x3e>
 8004dd8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004ddc:	4873      	ldr	r0, [pc, #460]	@ (8004fac <QHsm_dispatch_+0x208>)
 8004dde:	f7fb faeb 	bl	80003b8 <Q_onError>
        (e != (QEvt *)0)
        && (s != Q_STATE_CAST(0))
        && (me->state.uint == (uintptr_t)(~me->temp.uint)));
    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(301, QEvt_verify_(e));
 8004de2:	68b8      	ldr	r0, [r7, #8]
 8004de4:	f7ff ff0e 	bl	8004c04 <QEvt_verify_>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <QHsm_dispatch_+0x54>
 8004dee:	f240 112d 	movw	r1, #301	@ 0x12d
 8004df2:	486e      	ldr	r0, [pc, #440]	@ (8004fac <QHsm_dispatch_+0x208>)
 8004df4:	f7fb fae0 	bl	80003b8 <Q_onError>
        QS_OBJ_PRE(me);     // this state machine object
        QS_FUN_PRE(s);      // the current state
    QS_END_PRE()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8004df8:	f7fe feb2 	bl	8003b60 <vPortExitCritical>

    // process the event hierarchically...
    QState r;
    me->temp.fun = s;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e00:	609a      	str	r2, [r3, #8]
    int_fast8_t ip = QHSM_MAX_NEST_DEPTH_; // fixed upper loop bound
 8004e02:	2306      	movs	r3, #6
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    do {
        s = me->temp.fun;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
        r = (*s)(me, e); // invoke state handler s
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	4798      	blx	r3
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 8004e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d106      	bne.n	8004e30 <QHsm_dispatch_+0x8c>
                QS_FUN_PRE(s);      // the current state
            QS_END_PRE()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 8004e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e24:	4962      	ldr	r1, [pc, #392]	@ (8004fb0 <QHsm_dispatch_+0x20c>)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	4798      	blx	r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        --ip;
 8004e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e32:	3b01      	subs	r3, #1
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    } while ((r == Q_RET_SUPER) && (ip > 0));
 8004e36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <QHsm_dispatch_+0xa0>
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	dce0      	bgt.n	8004e06 <QHsm_dispatch_+0x62>

    QF_CRIT_ENTRY();
 8004e44:	f7fe fe60 	bl	8003b08 <vPortEnterCritical>
    Q_ENSURE_INCRIT(310, ip > 0);
 8004e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	dc04      	bgt.n	8004e58 <QHsm_dispatch_+0xb4>
 8004e4e:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8004e52:	4856      	ldr	r0, [pc, #344]	@ (8004fac <QHsm_dispatch_+0x208>)
 8004e54:	f7fb fab0 	bl	80003b8 <Q_onError>
    QF_CRIT_EXIT();
 8004e58:	f7fe fe82 	bl	8003b60 <vPortExitCritical>

    if (r >= Q_RET_TRAN) { // tran. (regular or history) taken?
 8004e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e60:	2b06      	cmp	r3, #6
 8004e62:	f240 8096 	bls.w	8004f92 <QHsm_dispatch_+0x1ee>
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        path[0] = me->temp.fun; // tran. target
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	613b      	str	r3, [r7, #16]
        path[1] = t; // current state
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6e:	617b      	str	r3, [r7, #20]
        path[2] = s; // tran. source
 8004e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e72:	61bb      	str	r3, [r7, #24]

        // exit current state to tran. source s...
        ip = QHSM_MAX_NEST_DEPTH_; // fixed upper loop bound
 8004e74:	2306      	movs	r3, #6
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (; (t != s) && (ip > 0); t = me->temp.fun) {
 8004e78:	e010      	b.n	8004e9c <QHsm_dispatch_+0xf8>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7c:	494d      	ldr	r1, [pc, #308]	@ (8004fb4 <QHsm_dispatch_+0x210>)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	4798      	blx	r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d103      	bne.n	8004e90 <QHsm_dispatch_+0xec>
                QS_STATE_EXIT_(t, qsId);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8004e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8a:	4949      	ldr	r1, [pc, #292]	@ (8004fb0 <QHsm_dispatch_+0x20c>)
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	4798      	blx	r3
            }
            --ip;
 8004e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e92:	3b01      	subs	r3, #1
 8004e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (; (t != s) && (ip > 0); t = me->temp.fun) {
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d002      	beq.n	8004eaa <QHsm_dispatch_+0x106>
 8004ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dce7      	bgt.n	8004e7a <QHsm_dispatch_+0xd6>
        }
        QF_CRIT_ENTRY();
 8004eaa:	f7fe fe2d 	bl	8003b08 <vPortEnterCritical>
        Q_ENSURE_INCRIT(320, ip > 0);
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	dc04      	bgt.n	8004ebe <QHsm_dispatch_+0x11a>
 8004eb4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8004eb8:	483c      	ldr	r0, [pc, #240]	@ (8004fac <QHsm_dispatch_+0x208>)
 8004eba:	f7fb fa7d 	bl	80003b8 <Q_onError>
        QF_CRIT_EXIT();
 8004ebe:	f7fe fe4f 	bl	8003b60 <vPortExitCritical>

        ip = QHsm_tran_(me, path, qsId); // take the tran.
 8004ec2:	f107 0310 	add.w	r3, r7, #16
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f8ca 	bl	8005064 <QHsm_tran_>
 8004ed0:	62f8      	str	r0, [r7, #44]	@ 0x2c

        // execute state entry actions in the desired order...
        // note: ip is the fixed upper loop bound
        for (; ip >= 0; --ip) {
 8004ed2:	e00b      	b.n	8004eec <QHsm_dispatch_+0x148>
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	3338      	adds	r3, #56	@ 0x38
 8004eda:	443b      	add	r3, r7
 8004edc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004ee0:	4935      	ldr	r1, [pc, #212]	@ (8004fb8 <QHsm_dispatch_+0x214>)
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	daf0      	bge.n	8004ed4 <QHsm_dispatch_+0x130>
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
        }
        t = path[0];      // stick the target into register
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        me->temp.fun = t; // update the next state
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004efa:	609a      	str	r2, [r3, #8]

        // drill into the target hierarchy...
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8004efc:	e042      	b.n	8004f84 <QHsm_dispatch_+0x1e0>
                QS_FUN_PRE(me->temp.fun); // the target of the tran.
            QS_END_PRE()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            ip = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
            path[0] = me->temp.fun;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	613b      	str	r3, [r7, #16]

            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4928      	ldr	r1, [pc, #160]	@ (8004fb0 <QHsm_dispatch_+0x20c>)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	4798      	blx	r3

            // note: ip is the fixed upper loop bound
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8004f12:	e00f      	b.n	8004f34 <QHsm_dispatch_+0x190>
                ++ip;
 8004f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f16:	3301      	adds	r3, #1
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                path[ip] = me->temp.fun;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	3338      	adds	r3, #56	@ 0x38
 8004f24:	443b      	add	r3, r7
 8004f26:	f843 2c28 	str.w	r2, [r3, #-40]
                // find superstate
                (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4920      	ldr	r1, [pc, #128]	@ (8004fb0 <QHsm_dispatch_+0x20c>)
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	4798      	blx	r3
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d002      	beq.n	8004f44 <QHsm_dispatch_+0x1a0>
 8004f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	dde7      	ble.n	8004f14 <QHsm_dispatch_+0x170>
            }
            QF_CRIT_ENTRY();
 8004f44:	f7fe fde0 	bl	8003b08 <vPortEnterCritical>
            // too many state nesting levels or "malformed" HSM
            Q_ENSURE_INCRIT(330, ip < QHSM_MAX_NEST_DEPTH_);
 8004f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	dd04      	ble.n	8004f58 <QHsm_dispatch_+0x1b4>
 8004f4e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004f52:	4816      	ldr	r0, [pc, #88]	@ (8004fac <QHsm_dispatch_+0x208>)
 8004f54:	f7fb fa30 	bl	80003b8 <Q_onError>
            QF_CRIT_EXIT();
 8004f58:	f7fe fe02 	bl	8003b60 <vPortExitCritical>

            me->temp.fun = path[0];
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	609a      	str	r2, [r3, #8]

            // retrace the entry path in reverse (correct) order...
            // note: ip is the fixed upper loop bound
            do {
                // enter path[ip]
                if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8004f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	3338      	adds	r3, #56	@ 0x38
 8004f68:	443b      	add	r3, r7
 8004f6a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004f6e:	4912      	ldr	r1, [pc, #72]	@ (8004fb8 <QHsm_dispatch_+0x214>)
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	4798      	blx	r3
                    == Q_RET_HANDLED)
                {
                    QS_STATE_ENTRY_(path[ip], qsId);
                }
                --ip;
 8004f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f76:	3b01      	subs	r3, #1
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
            } while (ip >= 0);
 8004f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	daf0      	bge.n	8004f62 <QHsm_dispatch_+0x1be>

            t = path[0]; // current state becomes the new source
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8004f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f86:	490d      	ldr	r1, [pc, #52]	@ (8004fbc <QHsm_dispatch_+0x218>)
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	4798      	blx	r3
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b07      	cmp	r3, #7
 8004f90:	d0b5      	beq.n	8004efe <QHsm_dispatch_+0x15a>
        QS_MEM_APP();
        QS_CRIT_EXIT();
    }
    #endif // Q_SPY

    me->state.fun = t; // change the current active state
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f96:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	43da      	mvns	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	609a      	str	r2, [r3, #8]
    #endif
}
 8004fa2:	bf00      	nop
 8004fa4:	3738      	adds	r7, #56	@ 0x38
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	08006360 	.word	0x08006360
 8004fb0:	08006368 	.word	0x08006368
 8004fb4:	08006370 	.word	0x08006370
 8004fb8:	0800636c 	.word	0x0800636c
 8004fbc:	08006374 	.word	0x08006374

08004fc0 <QHsm_isIn_>:
//${QEP::QHsm::isIn_} ........................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004fca:	f7fe fd9d 	bl	8003b08 <vPortEnterCritical>
    Q_INVARIANT_INCRIT(602,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d004      	beq.n	8004fe6 <QHsm_isIn_+0x26>
 8004fdc:	f240 215a 	movw	r1, #602	@ 0x25a
 8004fe0:	481e      	ldr	r0, [pc, #120]	@ (800505c <QHsm_isIn_+0x9c>)
 8004fe2:	f7fb f9e9 	bl	80003b8 <Q_onError>
        me->state.uint == (uintptr_t)(~me->temp.uint));
    QF_CRIT_EXIT();
 8004fe6:	f7fe fdbb 	bl	8003b60 <vPortExitCritical>

    bool inState = false; // assume that this HSM is not in 'state'
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	613b      	str	r3, [r7, #16]
    int_fast8_t lbound = QHSM_MAX_NEST_DEPTH_ + 1; // fixed upper loop bound
 8004ff4:	2307      	movs	r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]
    QState r = Q_RET_SUPER;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	72fb      	strb	r3, [r7, #11]
    for (; (r != Q_RET_IGNORED) && (lbound > 0); --lbound) {
 8004ffc:	e012      	b.n	8005024 <QHsm_isIn_+0x64>
        if (s == state) { // do the states match?
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d102      	bne.n	800500c <QHsm_isIn_+0x4c>
            inState = true;  // 'true' means that match found
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 800500a:	e011      	b.n	8005030 <QHsm_isIn_+0x70>
        }
        else {
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4914      	ldr	r1, [pc, #80]	@ (8005060 <QHsm_isIn_+0xa0>)
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
 8005014:	4603      	mov	r3, r0
 8005016:	72fb      	strb	r3, [r7, #11]
            s = me->temp.fun;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	613b      	str	r3, [r7, #16]
    for (; (r != Q_RET_IGNORED) && (lbound > 0); --lbound) {
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3b01      	subs	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	7afb      	ldrb	r3, [r7, #11]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d002      	beq.n	8005030 <QHsm_isIn_+0x70>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	dce6      	bgt.n	8004ffe <QHsm_isIn_+0x3e>
        }
    }

    QF_CRIT_ENTRY();
 8005030:	f7fe fd6a 	bl	8003b08 <vPortEnterCritical>
    Q_ENSURE_INCRIT(690, lbound > 0);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	dc04      	bgt.n	8005044 <QHsm_isIn_+0x84>
 800503a:	f240 21b2 	movw	r1, #690	@ 0x2b2
 800503e:	4807      	ldr	r0, [pc, #28]	@ (800505c <QHsm_isIn_+0x9c>)
 8005040:	f7fb f9ba 	bl	80003b8 <Q_onError>
    QF_CRIT_EXIT();
 8005044:	f7fe fd8c 	bl	8003b60 <vPortExitCritical>

    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	43da      	mvns	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	609a      	str	r2, [r3, #8]
    #endif

    return inState; // return the status
 8005052:	7dfb      	ldrb	r3, [r7, #23]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	08006360 	.word	0x08006360
 8005060:	08006368 	.word	0x08006368

08005064 <QHsm_tran_>:
//! @private @memberof QHsm
int_fast8_t QHsm_tran_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	@ 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    int_fast8_t ip = -1; // tran. entry path index
 8005070:	f04f 33ff 	mov.w	r3, #4294967295
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
    QStateHandler t = path[0];
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	613b      	str	r3, [r7, #16]
    QF_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	429a      	cmp	r2, r3
 8005088:	d106      	bne.n	8005098 <QHsm_tran_+0x34>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4974      	ldr	r1, [pc, #464]	@ (8005260 <QHsm_tran_+0x1fc>)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	4798      	blx	r3
            QS_STATE_EXIT_(s, qsId);
        }
        ip = 0; // enter the target
 8005092:	2300      	movs	r3, #0
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
 8005096:	e0d1      	b.n	800523c <QHsm_tran_+0x1d8>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	4972      	ldr	r1, [pc, #456]	@ (8005264 <QHsm_tran_+0x200>)
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	4798      	blx	r3

        t = me->temp.fun;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	623b      	str	r3, [r7, #32]

        // (b) check source==target->super...
        if (s == t) {
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d102      	bne.n	80050b4 <QHsm_tran_+0x50>
            ip = 0; // enter the target
 80050ae:	2300      	movs	r3, #0
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b2:	e0c3      	b.n	800523c <QHsm_tran_+0x1d8>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	496b      	ldr	r1, [pc, #428]	@ (8005264 <QHsm_tran_+0x200>)
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	6a3a      	ldr	r2, [r7, #32]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d106      	bne.n	80050d4 <QHsm_tran_+0x70>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4965      	ldr	r1, [pc, #404]	@ (8005260 <QHsm_tran_+0x1fc>)
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	4798      	blx	r3
                    QS_STATE_EXIT_(s, qsId);
                }
                ip = 0; // enter the target
 80050ce:	2300      	movs	r3, #0
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d2:	e0b3      	b.n	800523c <QHsm_tran_+0x1d8>
            }
            else {
                // (d) check source->super==target...
                if (me->temp.fun == path[0]) {
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d104      	bne.n	80050ea <QHsm_tran_+0x86>
                    // exit source s
                    if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	495f      	ldr	r1, [pc, #380]	@ (8005260 <QHsm_tran_+0x1fc>)
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	4798      	blx	r3
 80050e8:	e0a8      	b.n	800523c <QHsm_tran_+0x1d8>
                    }
                }
                else {
                    // (e) check rest of source==target->super->super..
                    // and store the entry path along the way
                    int_fast8_t iq = 0; // indicate that LCA was found
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
                    ip = 1; // enter target and its superstate
 80050ee:	2301      	movs	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
                    path[1] = t;      // save the superstate of target
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3304      	adds	r3, #4
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; // save source->super
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	623b      	str	r3, [r7, #32]

                    // find target->super->super...
                    // note: ip is the fixed upper loop bound
                    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	3304      	adds	r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4957      	ldr	r1, [pc, #348]	@ (8005264 <QHsm_tran_+0x200>)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	4798      	blx	r3
 800510c:	4603      	mov	r3, r0
 800510e:	76fb      	strb	r3, [r7, #27]
                    while ((r == Q_RET_SUPER)
 8005110:	e01d      	b.n	800514e <QHsm_tran_+0xea>
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
                    {
                        ++ip;
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	3301      	adds	r3, #1
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
                        path[ip] = me->temp.fun; // store the entry path
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	4413      	add	r3, r2
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { // is it the source?
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	429a      	cmp	r2, r3
 800512e:	d107      	bne.n	8005140 <QHsm_tran_+0xdc>
                            iq = 1; // indicate that the LCA found
 8005130:	2301      	movs	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
                            --ip; // do not enter the source
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	3b01      	subs	r3, #1
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
                            r = Q_RET_HANDLED; // terminate the loop
 800513a:	2302      	movs	r3, #2
 800513c:	76fb      	strb	r3, [r7, #27]
 800513e:	e006      	b.n	800514e <QHsm_tran_+0xea>
                        }
                        else { // it is not the source, keep going up
                            r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4947      	ldr	r1, [pc, #284]	@ (8005264 <QHsm_tran_+0x200>)
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	4798      	blx	r3
 800514a:	4603      	mov	r3, r0
 800514c:	76fb      	strb	r3, [r7, #27]
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
 800514e:	7efb      	ldrb	r3, [r7, #27]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <QHsm_tran_+0xf6>
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	2b04      	cmp	r3, #4
 8005158:	dddb      	ble.n	8005112 <QHsm_tran_+0xae>
                        }
                    }
                    QF_CRIT_ENTRY();
 800515a:	f7fe fcd5 	bl	8003b08 <vPortEnterCritical>
                    // NOTE: The following postcondition succeeds only when
                    // ip < QHSM_MAX_NEST_DEPTH, so no additional check is necessary
                    // too many state nesting levels or "malformed" HSM.
                    Q_ENSURE_INCRIT(510, r != Q_RET_SUPER);
 800515e:	7efb      	ldrb	r3, [r7, #27]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <QHsm_tran_+0x10a>
 8005164:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8005168:	483f      	ldr	r0, [pc, #252]	@ (8005268 <QHsm_tran_+0x204>)
 800516a:	f7fb f925 	bl	80003b8 <Q_onError>
                    QF_CRIT_EXIT();
 800516e:	f7fe fcf7 	bl	8003b60 <vPortExitCritical>

                    // the LCA not found yet?
                    if (iq == 0) {
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d161      	bne.n	800523c <QHsm_tran_+0x1d8>
                        // exit source s
                        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4939      	ldr	r1, [pc, #228]	@ (8005260 <QHsm_tran_+0x1fc>)
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	4798      	blx	r3
                            QS_STATE_EXIT_(s, qsId);
                        }

                        // (f) check the rest of source->super
                        //                  == target->super->super...
                        iq = ip;
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 8005184:	2303      	movs	r3, #3
 8005186:	76fb      	strb	r3, [r7, #27]
                        // note: iq is the fixed upper loop bound
                        do {
                            if (t == path[iq]) { // is this the LCA?
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4413      	add	r3, r2
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a3a      	ldr	r2, [r7, #32]
 8005194:	429a      	cmp	r2, r3
 8005196:	d108      	bne.n	80051aa <QHsm_tran_+0x146>
                                r = Q_RET_HANDLED; // indicate the LCA found
 8005198:	2302      	movs	r3, #2
 800519a:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; // do not enter the LCA
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	3b01      	subs	r3, #1
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
                                iq = -1; // cause termination of the loop
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e002      	b.n	80051b0 <QHsm_tran_+0x14c>
                            }
                            else {
                                --iq; // try lower superstate of target
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dae8      	bge.n	8005188 <QHsm_tran_+0x124>

                        // the LCA not found yet?
                        if (r != Q_RET_HANDLED) {
 80051b6:	7efb      	ldrb	r3, [r7, #27]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d03f      	beq.n	800523c <QHsm_tran_+0x1d8>
                            // (g) check each source->super->...
                            // for each target->super...
                            r = Q_RET_IGNORED; // keep looping
 80051bc:	2303      	movs	r3, #3
 80051be:	76fb      	strb	r3, [r7, #27]
                            int_fast8_t lbound = QHSM_MAX_NEST_DEPTH_;
 80051c0:	2306      	movs	r3, #6
 80051c2:	617b      	str	r3, [r7, #20]
                            do {
                                // exit from t
                                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG)
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	4926      	ldr	r1, [pc, #152]	@ (8005260 <QHsm_tran_+0x1fc>)
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	4798      	blx	r3
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d103      	bne.n	80051da <QHsm_tran_+0x176>
                                    == Q_RET_HANDLED)
                                {
                                    QS_STATE_EXIT_(t, qsId);
                                    // find superstate of t
                                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	4923      	ldr	r1, [pc, #140]	@ (8005264 <QHsm_tran_+0x200>)
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	4798      	blx	r3
                                }
                                t = me->temp.fun; // set to super of t
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	623b      	str	r3, [r7, #32]
                                iq = ip;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	61fb      	str	r3, [r7, #28]
                                do {
                                    // is this the LCA?
                                    if (t == path[iq]) {
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	4413      	add	r3, r2
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a3a      	ldr	r2, [r7, #32]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d108      	bne.n	8005206 <QHsm_tran_+0x1a2>
                                        ip = iq - 1; // do not enter the LCA
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
                                        iq = -1;     // break out of inner loop
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	61fb      	str	r3, [r7, #28]
                                        r = Q_RET_HANDLED; // break outer loop
 8005200:	2302      	movs	r3, #2
 8005202:	76fb      	strb	r3, [r7, #27]
 8005204:	e002      	b.n	800520c <QHsm_tran_+0x1a8>
                                    }
                                    else {
                                        --iq;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3b01      	subs	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	dae8      	bge.n	80051e4 <QHsm_tran_+0x180>

                                --lbound;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	3b01      	subs	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
                            } while ((r != Q_RET_HANDLED) && (lbound > 0));
 8005218:	7efb      	ldrb	r3, [r7, #27]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d002      	beq.n	8005224 <QHsm_tran_+0x1c0>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	dccf      	bgt.n	80051c4 <QHsm_tran_+0x160>
                            QF_CRIT_ENTRY();
 8005224:	f7fe fc70 	bl	8003b08 <vPortEnterCritical>
                            Q_ENSURE_INCRIT(530, lbound > 0);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	dc04      	bgt.n	8005238 <QHsm_tran_+0x1d4>
 800522e:	f240 2112 	movw	r1, #530	@ 0x212
 8005232:	480d      	ldr	r0, [pc, #52]	@ (8005268 <QHsm_tran_+0x204>)
 8005234:	f7fb f8c0 	bl	80003b8 <Q_onError>
                            QF_CRIT_EXIT();
 8005238:	f7fe fc92 	bl	8003b60 <vPortExitCritical>
                    }
                }
            }
        }
    }
    QF_CRIT_ENTRY();
 800523c:	f7fe fc64 	bl	8003b08 <vPortEnterCritical>
    Q_ENSURE_INCRIT(590, ip < QHSM_MAX_NEST_DEPTH_);
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	2b05      	cmp	r3, #5
 8005244:	dd04      	ble.n	8005250 <QHsm_tran_+0x1ec>
 8005246:	f240 214e 	movw	r1, #590	@ 0x24e
 800524a:	4807      	ldr	r0, [pc, #28]	@ (8005268 <QHsm_tran_+0x204>)
 800524c:	f7fb f8b4 	bl	80003b8 <Q_onError>
    QF_CRIT_EXIT();
 8005250:	f7fe fc86 	bl	8003b60 <vPortExitCritical>
    return ip;
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005256:	4618      	mov	r0, r3
 8005258:	3728      	adds	r7, #40	@ 0x28
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	08006370 	.word	0x08006370
 8005264:	08006368 	.word	0x08006368
 8005268:	08006360 	.word	0x08006360

0800526c <QHsm_top>:

//${QEP::QHsm::top} ..........................................................
//! @protected @memberof QAsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 8005276:	2303      	movs	r3, #3
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <QF_bzero_>:
//${QF::QF-pkg::bzero_} ......................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	e008      	b.n	80052aa <QF_bzero_+0x26>
        *ptr = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
        ++ptr;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3301      	adds	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f3      	bne.n	8005298 <QF_bzero_+0x14>
    }
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <QF_LOG2>:

//$define${QF::types::QF_LOG2} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::types::QF_LOG2} ......................................................
#ifndef QF_LOG2
uint_fast8_t QF_LOG2(QPSetBits const bitmask) {
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
    static uint8_t const log2LUT[16] = {
        0U, 1U, 2U, 2U, 3U, 3U, 3U, 3U,
        4U, 4U, 4U, 4U, 4U, 4U, 4U, 4U
    };
    uint_fast8_t n = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
    QPSetBits tmp;
    QPSetBits x = bitmask;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	613b      	str	r3, [r7, #16]

    #if (QF_MAX_ACTIVE > 16U)
    tmp = (x >> 16U);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	60fb      	str	r3, [r7, #12]
    if (tmp != 0U) {
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <QF_LOG2+0x26>
        n += 16U;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3310      	adds	r3, #16
 80052e0:	617b      	str	r3, [r7, #20]
        x = tmp;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	613b      	str	r3, [r7, #16]
    }
    #endif
    #if (QF_MAX_ACTIVE > 8U)
    tmp = (x >> 8U);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	0a1b      	lsrs	r3, r3, #8
 80052ea:	60fb      	str	r3, [r7, #12]
    if (tmp != 0U) {
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <QF_LOG2+0x3c>
        n += 8U;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3308      	adds	r3, #8
 80052f6:	617b      	str	r3, [r7, #20]
        x = tmp;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	613b      	str	r3, [r7, #16]
    }
    #endif
    tmp = (x >> 4U);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	60fb      	str	r3, [r7, #12]
    if (tmp != 0U) {
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <QF_LOG2+0x52>
        n += 4U;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3304      	adds	r3, #4
 800530c:	617b      	str	r3, [r7, #20]
        x = tmp;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	613b      	str	r3, [r7, #16]
    }
    return n + log2LUT[x];
 8005312:	4a06      	ldr	r2, [pc, #24]	@ (800532c <QF_LOG2+0x6c>)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4413      	add	r3, r2
}
 8005320:	4618      	mov	r0, r3
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	08006384 	.word	0x08006384

08005330 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	78db      	ldrb	r3, [r3, #3]
 800533c:	73fb      	strb	r3, [r7, #15]
           && (((me->evtTag_ ^ rc) & 0x0FU) == 0x0FU);
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b40      	cmp	r3, #64	@ 0x40
 8005342:	d80a      	bhi.n	800535a <QEvt_verify_+0x2a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	789a      	ldrb	r2, [r3, #2]
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	4053      	eors	r3, r2
 800534c:	b2db      	uxtb	r3, r3
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d101      	bne.n	800535a <QEvt_verify_+0x2a>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <QEvt_verify_+0x2c>
 800535a:	2300      	movs	r3, #0
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	b2db      	uxtb	r3, r3
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <QEvt_getPoolNum_>:
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)(me->evtTag_ >> 4U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	789b      	ldrb	r3, [r3, #2]
 800537a:	091b      	lsrs	r3, r3, #4
 800537c:	b2db      	uxtb	r3, r3
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <QEvt_refCtr_dec_>:
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_ - 1U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	78db      	ldrb	r3, [r3, #3]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	7bfa      	ldrb	r2, [r7, #15]
 80053a0:	70da      	strb	r2, [r3, #3]
    ((QEvt *)me)->evtTag_ = (me->evtTag_ & 0xF0U) | ((~rc) & 0x0FU);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	789b      	ldrb	r3, [r3, #2]
 80053a6:	f023 030f 	bic.w	r3, r3, #15
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	43db      	mvns	r3, r3
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	4313      	orrs	r3, r2
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	709a      	strb	r2, [r3, #2]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <QF_poolInit>:
//! @static @public @memberof QF
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
    uint_fast8_t const poolNum = QF_priv_.maxPool_;
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <QF_poolInit+0x7c>)
 80053da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053dc:	617b      	str	r3, [r7, #20]

    // see precondition{qf_dyn,200} and precondition{qf_dyn,201}
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80053de:	f7fe fb93 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, poolNum < QF_MAX_EPOOL);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d903      	bls.n	80053f0 <QF_poolInit+0x24>
 80053e8:	21c8      	movs	r1, #200	@ 0xc8
 80053ea:	4818      	ldr	r0, [pc, #96]	@ (800544c <QF_poolInit+0x80>)
 80053ec:	f7fa ffe4 	bl	80003b8 <Q_onError>
    if (poolNum > 0U) {
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <QF_poolInit+0x4e>
        Q_REQUIRE_INCRIT(201,
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	4913      	ldr	r1, [pc, #76]	@ (8005448 <QF_poolInit+0x7c>)
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	330c      	adds	r3, #12
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4293      	cmp	r3, r2
 8005410:	d803      	bhi.n	800541a <QF_poolInit+0x4e>
 8005412:	21c9      	movs	r1, #201	@ 0xc9
 8005414:	480d      	ldr	r0, [pc, #52]	@ (800544c <QF_poolInit+0x80>)
 8005416:	f7fa ffcf 	bl	80003b8 <Q_onError>
            QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum - 1U]) < evtSize);
    }
    QF_priv_.maxPool_ = poolNum + 1U; // one more pool
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	3301      	adds	r3, #1
 800541e:	4a0a      	ldr	r2, [pc, #40]	@ (8005448 <QF_poolInit+0x7c>)
 8005420:	6553      	str	r3, [r2, #84]	@ 0x54

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8005422:	f7fe fb9d 	bl	8003b60 <vPortExitCritical>

    // perform the port-dependent initialization of the event-pool
    QF_EPOOL_INIT_(QF_priv_.ePool_[poolNum], poolSto, poolSize, evtSize);
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4613      	mov	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4a05      	ldr	r2, [pc, #20]	@ (8005448 <QF_poolInit+0x7c>)
 8005432:	1898      	adds	r0, r3, r2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	f000 f8cd 	bl	80055d8 <QMPool_init>
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)((uint8_t)'0' + poolNum + 1U);
        QS_obj_dict_pre_(&QF_priv_.ePool_[poolNum], (char const *)obj_name);
    }
    #endif // Q_SPY
}
 800543e:	bf00      	nop
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	24002628 	.word	0x24002628
 800544c:	08006394 	.word	0x08006394

08005450 <QF_newX_>:
//! @static @private @memberof QF
QEvt * QF_newX_(
    uint_fast16_t const evtSize,
    uint_fast16_t const margin,
    enum_t const sig)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800545c:	f7fe fb54 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    // find the pool id that fits the requested event size...
    uint_fast8_t poolNum = 0U; // zero-based poolNum initially
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 8005464:	e00f      	b.n	8005486 <QF_newX_+0x36>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum])) {
 8005466:	4931      	ldr	r1, [pc, #196]	@ (800552c <QF_newX_+0xdc>)
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	330c      	adds	r3, #12
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4293      	cmp	r3, r2
 800547e:	d908      	bls.n	8005492 <QF_newX_+0x42>
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	3301      	adds	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	4b29      	ldr	r3, [pc, #164]	@ (800552c <QF_newX_+0xdc>)
 8005488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	429a      	cmp	r2, r3
 800548e:	d3ea      	bcc.n	8005466 <QF_newX_+0x16>
 8005490:	e000      	b.n	8005494 <QF_newX_+0x44>
            break;
 8005492:	bf00      	nop
        }
    }

    // precondition:
    // - cannot run out of registered pools
    Q_REQUIRE_INCRIT(300, poolNum < QF_priv_.maxPool_);
 8005494:	4b25      	ldr	r3, [pc, #148]	@ (800552c <QF_newX_+0xdc>)
 8005496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	429a      	cmp	r2, r3
 800549c:	d304      	bcc.n	80054a8 <QF_newX_+0x58>
 800549e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80054a2:	4823      	ldr	r0, [pc, #140]	@ (8005530 <QF_newX_+0xe0>)
 80054a4:	f7fa ff88 	bl	80003b8 <Q_onError>

    ++poolNum; // convert to 1-based poolNum
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3301      	adds	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80054ae:	f7fe fb57 	bl	8003b60 <vPortExitCritical>
    #ifdef Q_SPY
    QF_EPOOL_GET_(QF_priv_.ePool_[poolNum - 1U], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + poolNum);
    #else
    QF_EPOOL_GET_(QF_priv_.ePool_[poolNum - 1U], e,
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	1e5a      	subs	r2, r3, #1
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4a1b      	ldr	r2, [pc, #108]	@ (800552c <QF_newX_+0xdc>)
 80054c0:	1898      	adds	r0, r3, r2
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d001      	beq.n	80054d0 <QF_newX_+0x80>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	e000      	b.n	80054d2 <QF_newX_+0x82>
 80054d0:	2300      	movs	r3, #0
 80054d2:	2200      	movs	r2, #0
 80054d4:	4619      	mov	r1, r3
 80054d6:	f000 f921 	bl	800571c <QMPool_get>
 80054da:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
    #endif

    if (e != (QEvt *)0) { // was e allocated correctly?
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d010      	beq.n	8005504 <QF_newX_+0xb4>
        e->sig     = (QSignal)sig; // set the signal
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	801a      	strh	r2, [r3, #0]
        e->refCtr_ = 0U; // initialize the reference counter to 0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2200      	movs	r2, #0
 80054ee:	70da      	strb	r2, [r3, #3]
        e->evtTag_ = (uint8_t)((poolNum << 4U) | 0x0FU);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f043 030f 	orr.w	r3, r3, #15
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	709a      	strb	r2, [r3, #2]
 8005502:	e00d      	b.n	8005520 <QF_newX_+0xd0>
        QS_MEM_APP();
        QS_CRIT_EXIT();
    }
    else { // event was not allocated

        QF_CRIT_ENTRY();
 8005504:	f7fe fb00 	bl	8003b08 <vPortEnterCritical>
        // This assertion means that the event allocation failed,
        // and this failure cannot be tolerated. The most frequent
        // reason is an event leak in the application.
        Q_ASSERT_INCRIT(320, margin != QF_NO_MARGIN);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800550e:	4293      	cmp	r3, r2
 8005510:	d104      	bne.n	800551c <QF_newX_+0xcc>
 8005512:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8005516:	4806      	ldr	r0, [pc, #24]	@ (8005530 <QF_newX_+0xe0>)
 8005518:	f7fa ff4e 	bl	80003b8 <Q_onError>
            QS_EVS_PRE(evtSize);  // the size of the event
            QS_SIG_PRE(sig);      // the signal of the event
        QS_END_PRE()
        QS_MEM_APP();

        QF_CRIT_EXIT();
 800551c:	f7fe fb20 	bl	8003b60 <vPortExitCritical>
    }

    // the returned event e is guaranteed to be valid (not NULL)
    // if we can't tolerate failed allocation
    return e;
 8005520:	693b      	ldr	r3, [r7, #16]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	24002628 	.word	0x24002628
 8005530:	08006394 	.word	0x08006394

08005534 <QF_gc>:

//${QF::QF-dyn::gc} ..........................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800553c:	f7fe fae4 	bl	8003b08 <vPortEnterCritical>

    Q_REQUIRE_INCRIT(400, e != (QEvt *)0);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <QF_gc+0x1c>
 8005546:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800554a:	4821      	ldr	r0, [pc, #132]	@ (80055d0 <QF_gc+0x9c>)
 800554c:	f7fa ff34 	bl	80003b8 <Q_onError>

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(401, QEvt_verify_(e));
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff feed 	bl	8005330 <QEvt_verify_>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <QF_gc+0x32>
 800555c:	f240 1191 	movw	r1, #401	@ 0x191
 8005560:	481b      	ldr	r0, [pc, #108]	@ (80055d0 <QF_gc+0x9c>)
 8005562:	f7fa ff29 	bl	80003b8 <Q_onError>
    #endif

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff ff01 	bl	800536e <QEvt_getPoolNum_>
 800556c:	60f8      	str	r0, [r7, #12]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d027      	beq.n	80055c4 <QF_gc+0x90>
        QF_MEM_SYS();

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	78db      	ldrb	r3, [r3, #3]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b01      	cmp	r3, #1
 800557c:	d905      	bls.n	800558a <QF_gc+0x56>
                QS_TIME_PRE();       // timestamp
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            QEvt_refCtr_dec_(e); // decrement the ref counter
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ff03 	bl	800538a <QEvt_refCtr_dec_>

            QF_MEM_APP();
            QF_CRIT_EXIT();
 8005584:	f7fe faec 	bl	8003b60 <vPortExitCritical>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 8005588:	e01e      	b.n	80055c8 <QF_gc+0x94>
            Q_ASSERT_INCRIT(410, (poolNum <= QF_priv_.maxPool_)
 800558a:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <QF_gc+0xa0>)
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	429a      	cmp	r2, r3
 8005592:	d802      	bhi.n	800559a <QF_gc+0x66>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d904      	bls.n	80055a4 <QF_gc+0x70>
 800559a:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800559e:	480c      	ldr	r0, [pc, #48]	@ (80055d0 <QF_gc+0x9c>)
 80055a0:	f7fa ff0a 	bl	80003b8 <Q_onError>
            QF_CRIT_EXIT();
 80055a4:	f7fe fadc 	bl	8003b60 <vPortExitCritical>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U],
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4a07      	ldr	r2, [pc, #28]	@ (80055d4 <QF_gc+0xa0>)
 80055b6:	4413      	add	r3, r2
 80055b8:	2200      	movs	r2, #0
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f939 	bl	8005834 <QMPool_put>
}
 80055c2:	e001      	b.n	80055c8 <QF_gc+0x94>
        QF_CRIT_EXIT();
 80055c4:	f7fe facc 	bl	8003b60 <vPortExitCritical>
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	08006394 	.word	0x08006394
 80055d4:	24002628 	.word	0x24002628

080055d8 <QMPool_init>:
//! @public @memberof QMPool
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const blockSize)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80055e6:	f7fe fa8f 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, poolSto != (void *)0);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d103      	bne.n	80055f8 <QMPool_init+0x20>
 80055f0:	2164      	movs	r1, #100	@ 0x64
 80055f2:	4849      	ldr	r0, [pc, #292]	@ (8005718 <QMPool_init+0x140>)
 80055f4:	f7fa fee0 	bl	80003b8 <Q_onError>
    Q_REQUIRE_INCRIT(101, poolSize >= (uint_fast32_t)sizeof(QFreeBlock));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	d803      	bhi.n	8005606 <QMPool_init+0x2e>
 80055fe:	2165      	movs	r1, #101	@ 0x65
 8005600:	4845      	ldr	r0, [pc, #276]	@ (8005718 <QMPool_init+0x140>)
 8005602:	f7fa fed9 	bl	80003b8 <Q_onError>
    Q_REQUIRE_INCRIT(102, (uint_fast16_t)(blockSize + sizeof(QFreeBlock))
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f113 0f09 	cmn.w	r3, #9
 800560c:	d903      	bls.n	8005616 <QMPool_init+0x3e>
 800560e:	2166      	movs	r1, #102	@ 0x66
 8005610:	4841      	ldr	r0, [pc, #260]	@ (8005718 <QMPool_init+0x140>)
 8005612:	f7fa fed1 	bl	80003b8 <Q_onError>
                          > blockSize);

    me->free_head = (QFreeBlock *)poolSto;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]

    // find # free blocks in a memory block, NO DIVISION
    me->blockSize = (QMPoolSize)(2U * sizeof(void *));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2208      	movs	r2, #8
 8005620:	819a      	strh	r2, [r3, #12]
    uint_fast16_t nblocks = 1U;
 8005622:	2301      	movs	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8005626:	e008      	b.n	800563a <QMPool_init+0x62>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	899b      	ldrh	r3, [r3, #12]
 800562c:	3308      	adds	r3, #8
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3301      	adds	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	899a      	ldrh	r2, [r3, #12]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	429a      	cmp	r2, r3
 8005644:	d3f0      	bcc.n	8005628 <QMPool_init+0x50>
    }

    // the pool buffer must fit at least one rounded-up block
    Q_ASSERT_INCRIT(110, poolSize >= me->blockSize);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	899b      	ldrh	r3, [r3, #12]
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4293      	cmp	r3, r2
 8005650:	d203      	bcs.n	800565a <QMPool_init+0x82>
 8005652:	216e      	movs	r1, #110	@ 0x6e
 8005654:	4830      	ldr	r0, [pc, #192]	@ (8005718 <QMPool_init+0x140>)
 8005656:	f7fa feaf 	bl	80003b8 <Q_onError>

    // start at the head of the free list
    QFreeBlock *fb = me->free_head;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	61bb      	str	r3, [r7, #24]
    uint32_t nTot = 1U; // the last block already in the list
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]

    // chain all blocks together in a free-list...
    for (uint_fast32_t size = poolSize - me->blockSize;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	899b      	ldrh	r3, [r3, #12]
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	e016      	b.n	80056a0 <QMPool_init+0xc8>
         size >= (uint_fast32_t)me->blockSize;
         size -= (uint_fast32_t)me->blockSize)
    {
        fb->next = &fb[nblocks]; // point next link to next block
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	441a      	add	r2, r3
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
        fb->next_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb->next));
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	43da      	mvns	r2, r3
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	605a      	str	r2, [r3, #4]
    #endif
        fb = fb->next;   // advance to the next block
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	61bb      	str	r3, [r7, #24]
        ++nTot;          // one more free block in the pool
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	3301      	adds	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
         size -= (uint_fast32_t)me->blockSize)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	899b      	ldrh	r3, [r3, #12]
 8005698:	461a      	mov	r2, r3
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	613b      	str	r3, [r7, #16]
         size >= (uint_fast32_t)me->blockSize;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	899b      	ldrh	r3, [r3, #12]
 80056a4:	461a      	mov	r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d2e2      	bcs.n	8005672 <QMPool_init+0x9a>

    // dynamic range check
    #if (QF_MPOOL_CTR_SIZE == 1U)
    Q_ENSURE_INCRIT(190, nTot < 0xFFU);
    #elif (QF_MPOOL_CTR_SIZE == 2U)
    Q_ENSURE_INCRIT(190, nTot < 0xFFFFU);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d903      	bls.n	80056be <QMPool_init+0xe6>
 80056b6:	21be      	movs	r1, #190	@ 0xbe
 80056b8:	4817      	ldr	r0, [pc, #92]	@ (8005718 <QMPool_init+0x140>)
 80056ba:	f7fa fe7d 	bl	80003b8 <Q_onError>
    #endif

    fb->next  = (QFreeBlock *)0; // the last link points to NULL
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

    me->nTot  = (QMPoolCtr)nTot;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	81da      	strh	r2, [r3, #14]
    me->nFree = me->nTot;        // all blocks are free
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	89da      	ldrh	r2, [r3, #14]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	821a      	strh	r2, [r3, #16]
    me->start = (QFreeBlock *)poolSto; // the original start this pool buffer
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	601a      	str	r2, [r3, #0]
    me->end   = fb;              // the last block in this pool
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	605a      	str	r2, [r3, #4]

    #ifndef Q_UNSAFE
    me->free_head_dis = (uintptr_t)~Q_PTR2UINT_CAST_(me->free_head);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	43da      	mvns	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	615a      	str	r2, [r3, #20]
    me->nFree_dis     = (QMPoolCtr)~me->nFree;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8a1b      	ldrh	r3, [r3, #16]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	831a      	strh	r2, [r3, #24]
    me->nMin          = me->nTot;  // the minimum # free blocks
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	89da      	ldrh	r2, [r3, #14]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	825a      	strh	r2, [r3, #18]
    fb->next_dis      = (uintptr_t)(~Q_PTR2UINT_CAST_(fb->next));
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	43da      	mvns	r2, r3
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	605a      	str	r2, [r3, #4]
    #endif

    QF_MEM_APP();
    QF_CRIT_EXIT();
 800570a:	f7fe fa29 	bl	8003b60 <vPortExitCritical>
}
 800570e:	bf00      	nop
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	0800639c 	.word	0x0800639c

0800571c <QMPool_get>:
//${QF::QMPool::get} .........................................................
//! @public @memberof QMPool
void * QMPool_get(QMPool * const me,
    uint_fast16_t const margin,
    uint_fast8_t const qsId)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8005728:	f7fe f9ee 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    // get volatile into temporaries
    QFreeBlock *fb = me->free_head;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	61fb      	str	r3, [r7, #28]
    QMPoolCtr nFree = me->nFree;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8a1b      	ldrh	r3, [r3, #16]
 8005736:	837b      	strh	r3, [r7, #26]

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(301, Q_PTR2UINT_CAST_(fb)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	43da      	mvns	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	429a      	cmp	r2, r3
 8005742:	d004      	beq.n	800574e <QMPool_get+0x32>
 8005744:	f240 112d 	movw	r1, #301	@ 0x12d
 8005748:	4839      	ldr	r0, [pc, #228]	@ (8005830 <QMPool_get+0x114>)
 800574a:	f7fa fe35 	bl	80003b8 <Q_onError>
                            == (uintptr_t)~me->free_head_dis);
    QMPoolCtr const dis = (QMPoolCtr)~me->nFree_dis;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8b1b      	ldrh	r3, [r3, #24]
 8005752:	43db      	mvns	r3, r3
 8005754:	833b      	strh	r3, [r7, #24]
    Q_INVARIANT_INCRIT(302, nFree == dis);
 8005756:	8b7a      	ldrh	r2, [r7, #26]
 8005758:	8b3b      	ldrh	r3, [r7, #24]
 800575a:	429a      	cmp	r2, r3
 800575c:	d004      	beq.n	8005768 <QMPool_get+0x4c>
 800575e:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8005762:	4833      	ldr	r0, [pc, #204]	@ (8005830 <QMPool_get+0x114>)
 8005764:	f7fa fe28 	bl	80003b8 <Q_onError>
    #endif // ndef Q_UNSAFE

    // have more free blocks than the requested margin?
    if (nFree > (QMPoolCtr)margin) {
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	b29b      	uxth	r3, r3
 800576c:	8b7a      	ldrh	r2, [r7, #26]
 800576e:	429a      	cmp	r2, r3
 8005770:	d955      	bls.n	800581e <QMPool_get+0x102>
        Q_ASSERT_INCRIT(310, fb != (QFreeBlock *)0);
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <QMPool_get+0x66>
 8005778:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800577c:	482c      	ldr	r0, [pc, #176]	@ (8005830 <QMPool_get+0x114>)
 800577e:	f7fa fe1b 	bl	80003b8 <Q_onError>

        QFreeBlock * const fb_next = fb->next; // fast temporary
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	617b      	str	r3, [r7, #20]

    #ifndef Q_UNSAFE
        // the free block must have integrity (duplicate inverse storage)
        Q_INVARIANT_INCRIT(311, Q_PTR2UINT_CAST_(fb_next)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	43da      	mvns	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	429a      	cmp	r2, r3
 8005792:	d004      	beq.n	800579e <QMPool_get+0x82>
 8005794:	f240 1137 	movw	r1, #311	@ 0x137
 8005798:	4825      	ldr	r0, [pc, #148]	@ (8005830 <QMPool_get+0x114>)
 800579a:	f7fa fe0d 	bl	80003b8 <Q_onError>
                                == (uintptr_t)~fb->next_dis);
    #endif // ndef Q_UNSAFE

        --nFree; // one less free block
 800579e:	8b7b      	ldrh	r3, [r7, #26]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	837b      	strh	r3, [r7, #26]
        if (nFree == 0U) { // is the pool becoming empty?
 80057a4:	8b7b      	ldrh	r3, [r7, #26]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d112      	bne.n	80057d0 <QMPool_get+0xb4>
            // pool is becoming empty, so the next free block must be NULL
            Q_ASSERT_INCRIT(320, fb_next == (QFreeBlock *)0);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <QMPool_get+0x9e>
 80057b0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80057b4:	481e      	ldr	r0, [pc, #120]	@ (8005830 <QMPool_get+0x114>)
 80057b6:	f7fa fdff 	bl	80003b8 <Q_onError>

            me->nFree = 0U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	821a      	strh	r2, [r3, #16]
    #ifndef Q_UNSAFE
            me->nFree_dis = (QMPoolCtr)~0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057c6:	831a      	strh	r2, [r3, #24]
            me->nMin = 0U; // remember that the pool got empty
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	825a      	strh	r2, [r3, #18]
 80057ce:	e01e      	b.n	800580e <QMPool_get+0xf2>
    #endif // ndef Q_UNSAFE
        }
        else {
            me->nFree = nFree; // update the original
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8b7a      	ldrh	r2, [r7, #26]
 80057d4:	821a      	strh	r2, [r3, #16]
    #ifndef Q_UNSAFE
            me->nFree_dis = (QMPoolCtr)~nFree;
 80057d6:	8b7b      	ldrh	r3, [r7, #26]
 80057d8:	43db      	mvns	r3, r3
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	831a      	strh	r2, [r3, #24]

            // The pool is not empty, so the next free-block pointer
            // must be in range.
            Q_INVARIANT_INCRIT(330,
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d304      	bcc.n	80057f4 <QMPool_get+0xd8>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d904      	bls.n	80057fe <QMPool_get+0xe2>
 80057f4:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80057f8:	480d      	ldr	r0, [pc, #52]	@ (8005830 <QMPool_get+0x114>)
 80057fa:	f7fa fddd 	bl	80003b8 <Q_onError>
                (me->start <= fb_next) && (fb_next <= me->end));

            // is the # free blocks the new minimum so far?
            if (me->nMin > nFree) {
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8a5b      	ldrh	r3, [r3, #18]
 8005802:	8b7a      	ldrh	r2, [r7, #26]
 8005804:	429a      	cmp	r2, r3
 8005806:	d202      	bcs.n	800580e <QMPool_get+0xf2>
                me->nMin = nFree; // remember the minimum so far
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8b7a      	ldrh	r2, [r7, #26]
 800580c:	825a      	strh	r2, [r3, #18]
            }
    #endif // ndef Q_UNSAFE
        }

        me->free_head = fb_next; // set the head to the next free block
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	609a      	str	r2, [r3, #8]
    #ifndef Q_UNSAFE
        me->free_head_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb_next));
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	43da      	mvns	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	615a      	str	r2, [r3, #20]
 800581c:	e001      	b.n	8005822 <QMPool_get+0x106>
            QS_MPC_PRE(0U);        // min # free blocks (not available)
    #endif // ndef Q_UNSAFE
        QS_END_PRE()
    }
    else { // don't have enough free blocks at this point
        fb = (QFreeBlock *)0;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
            QS_MPC_PRE(margin);    // the requested margin
        QS_END_PRE()
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8005822:	f7fe f99d 	bl	8003b60 <vPortExitCritical>

    return fb; // return the block or NULL pointer to the caller
 8005826:	69fb      	ldr	r3, [r7, #28]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	0800639c 	.word	0x0800639c

08005834 <QMPool_put>:
//${QF::QMPool::put} .........................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61fb      	str	r3, [r7, #28]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8005844:	f7fe f960 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    // get volatile into temporaries
    QFreeBlock * const free_head = me->free_head;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	61bb      	str	r3, [r7, #24]
    QMPoolCtr nFree = me->nFree;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8a1b      	ldrh	r3, [r3, #16]
 8005852:	82fb      	strh	r3, [r7, #22]

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(401, Q_PTR2UINT_CAST_(free_head)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	43da      	mvns	r2, r3
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d004      	beq.n	800586a <QMPool_put+0x36>
 8005860:	f240 1191 	movw	r1, #401	@ 0x191
 8005864:	482a      	ldr	r0, [pc, #168]	@ (8005910 <QMPool_put+0xdc>)
 8005866:	f7fa fda7 	bl	80003b8 <Q_onError>
                            == (uintptr_t)~me->free_head_dis);
    QMPoolCtr const dis = (QMPoolCtr)~me->nFree_dis;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8b1b      	ldrh	r3, [r3, #24]
 800586e:	43db      	mvns	r3, r3
 8005870:	82bb      	strh	r3, [r7, #20]
    Q_INVARIANT_INCRIT(402, nFree == dis);
 8005872:	8afa      	ldrh	r2, [r7, #22]
 8005874:	8abb      	ldrh	r3, [r7, #20]
 8005876:	429a      	cmp	r2, r3
 8005878:	d004      	beq.n	8005884 <QMPool_put+0x50>
 800587a:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 800587e:	4824      	ldr	r0, [pc, #144]	@ (8005910 <QMPool_put+0xdc>)
 8005880:	f7fa fd9a 	bl	80003b8 <Q_onError>

    Q_REQUIRE_INCRIT(410, nFree < me->nTot);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	89db      	ldrh	r3, [r3, #14]
 8005888:	8afa      	ldrh	r2, [r7, #22]
 800588a:	429a      	cmp	r2, r3
 800588c:	d304      	bcc.n	8005898 <QMPool_put+0x64>
 800588e:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8005892:	481f      	ldr	r0, [pc, #124]	@ (8005910 <QMPool_put+0xdc>)
 8005894:	f7fa fd90 	bl	80003b8 <Q_onError>
    Q_REQUIRE_INCRIT(411, (me->start <= fb) && (fb <= me->end));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d304      	bcc.n	80058ac <QMPool_put+0x78>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d904      	bls.n	80058b6 <QMPool_put+0x82>
 80058ac:	f240 119b 	movw	r1, #411	@ 0x19b
 80058b0:	4817      	ldr	r0, [pc, #92]	@ (8005910 <QMPool_put+0xdc>)
 80058b2:	f7fa fd81 	bl	80003b8 <Q_onError>

    // the block must not be in the pool already
    Q_REQUIRE_INCRIT(412, Q_PTR2UINT_CAST_(fb->next)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d104      	bne.n	80058d0 <QMPool_put+0x9c>
 80058c6:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 80058ca:	4811      	ldr	r0, [pc, #68]	@ (8005910 <QMPool_put+0xdc>)
 80058cc:	f7fa fd74 	bl	80003b8 <Q_onError>
        != (uintptr_t)~fb->next_dis);
    #endif // ndef Q_UNSAFE

    ++nFree; // one more free block in this pool
 80058d0:	8afb      	ldrh	r3, [r7, #22]
 80058d2:	3301      	adds	r3, #1
 80058d4:	82fb      	strh	r3, [r7, #22]

    me->free_head = fb; // set as new head of the free list
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	609a      	str	r2, [r3, #8]
    me->nFree     = nFree;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8afa      	ldrh	r2, [r7, #22]
 80058e0:	821a      	strh	r2, [r3, #16]
    fb->next      = free_head; // link into the list
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    me->free_head_dis = (uintptr_t)(~Q_PTR2UINT_CAST_(fb));
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	43da      	mvns	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	615a      	str	r2, [r3, #20]
    me->nFree_dis     = (QMPoolCtr)~nFree;
 80058f0:	8afb      	ldrh	r3, [r7, #22]
 80058f2:	43db      	mvns	r3, r3
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	831a      	strh	r2, [r3, #24]
    fb->next_dis      = (uintptr_t)(~Q_PTR2UINT_CAST_(free_head));
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	43da      	mvns	r2, r3
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	605a      	str	r2, [r3, #4]
        QS_OBJ_PRE(me);        // this memory pool
        QS_MPC_PRE(nFree);     // the # free blocks in the pool
    QS_END_PRE()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8005902:	f7fe f92d 	bl	8003b60 <vPortExitCritical>
}
 8005906:	bf00      	nop
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	0800639c 	.word	0x0800639c

08005914 <QEvt_getPoolNum_>:
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)(me->evtTag_ >> 4U);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	789b      	ldrb	r3, [r3, #2]
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	b2db      	uxtb	r3, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <QPSet_setEmpty>:
static inline void QPSet_setEmpty(QPSet * const me) {
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
    me->bits[0] = 0U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
    return (me->bits[0] != 0U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	bf14      	ite	ne
 800595a:	2301      	movne	r3, #1
 800595c:	2300      	moveq	r3, #0
 800595e:	b2db      	uxtb	r3, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <QPSet_insert>:
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	2101      	movs	r1, #1
 8005980:	fa01 f303 	lsl.w	r3, r1, r3
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	601a      	str	r2, [r3, #0]
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <QPSet_remove>:
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	2101      	movs	r1, #1
 80059aa:	fa01 f303 	lsl.w	r3, r1, r3
 80059ae:	43db      	mvns	r3, r3
 80059b0:	401a      	ands	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits[0]);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff fc76 	bl	80052c0 <QF_LOG2>
 80059d4:	4603      	mov	r3, r0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <QPSet_update_>:
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	43da      	mvns	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	601a      	str	r2, [r3, #0]
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <QPSet_verify_>:
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	429a      	cmp	r2, r3
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <QEvt_refCtr_inc_>:
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_ + 1U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	78db      	ldrb	r3, [r3, #3]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	3301      	adds	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7bfa      	ldrb	r2, [r7, #15]
 8005a3e:	70da      	strb	r2, [r3, #3]
    ((QEvt *)me)->evtTag_ = (me->evtTag_ & 0xF0U) | ((~rc) & 0x0FU);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	789b      	ldrb	r3, [r3, #2]
 8005a44:	f023 030f 	bic.w	r3, r3, #15
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4313      	orrs	r3, r2
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	709a      	strb	r2, [r3, #2]
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <QActive_psInit>:
//${QF::QActive::psInit} .....................................................
//! @static @public @memberof QActive
void QActive_psInit(
    QSubscrList * const subscrSto,
    enum_t const maxSignal)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
    QActive_subscrList_   = subscrSto;
 8005a76:	4a14      	ldr	r2, [pc, #80]	@ (8005ac8 <QActive_psInit+0x5c>)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6013      	str	r3, [r2, #0]
    QActive_maxPubSignal_ = maxSignal;
 8005a7c:	4a13      	ldr	r2, [pc, #76]	@ (8005acc <QActive_psInit+0x60>)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6013      	str	r3, [r2, #0]

    // initialize the subscriber list
    for (enum_t sig = 0; sig < maxSignal; ++sig) {
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	e016      	b.n	8005ab6 <QActive_psInit+0x4a>
        QPSet_setEmpty(&subscrSto[sig].set);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff ff4d 	bl	8005930 <QPSet_setEmpty>
    #ifndef Q_UNSAFE
        QPSet_update_(&subscrSto[sig].set, &subscrSto[sig].set_dis);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f7ff ff97 	bl	80059de <QPSet_update_>
    for (enum_t sig = 0; sig < maxSignal; ++sig) {
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	dbe4      	blt.n	8005a88 <QActive_psInit+0x1c>
    #endif
    }
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	24002680 	.word	0x24002680
 8005acc:	24002684 	.word	0x24002684

08005ad0 <QActive_publish_>:
//! @static @private @memberof QActive
void QActive_publish_(
    QEvt const * const e,
    void const * const sender,
    uint_fast8_t const qsId)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	@ 0x28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    Q_UNUSED_PAR(qsId);
    #endif

    QSignal const sig = e->sig;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	837b      	strh	r3, [r7, #26]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8005ae2:	f7fe f811 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, sig < (QSignal)QActive_maxPubSignal_);
 8005ae6:	4b50      	ldr	r3, [pc, #320]	@ (8005c28 <QActive_publish_+0x158>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	8b7a      	ldrh	r2, [r7, #26]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d303      	bcc.n	8005afa <QActive_publish_+0x2a>
 8005af2:	21c8      	movs	r1, #200	@ 0xc8
 8005af4:	484d      	ldr	r0, [pc, #308]	@ (8005c2c <QActive_publish_+0x15c>)
 8005af6:	f7fa fc5f 	bl	80003b8 <Q_onError>
    Q_INVARIANT_INCRIT(202,
 8005afa:	4b4d      	ldr	r3, [pc, #308]	@ (8005c30 <QActive_publish_+0x160>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	8b7b      	ldrh	r3, [r7, #26]
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4413      	add	r3, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	4b4a      	ldr	r3, [pc, #296]	@ (8005c30 <QActive_publish_+0x160>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	8b7b      	ldrh	r3, [r7, #26]
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4413      	add	r3, r2
 8005b10:	3304      	adds	r3, #4
 8005b12:	4619      	mov	r1, r3
 8005b14:	f7ff ff73 	bl	80059fe <QPSet_verify_>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <QActive_publish_+0x56>
 8005b1e:	21ca      	movs	r1, #202	@ 0xca
 8005b20:	4842      	ldr	r0, [pc, #264]	@ (8005c2c <QActive_publish_+0x15c>)
 8005b22:	f7fa fc49 	bl	80003b8 <Q_onError>
        QS_SIG_PRE(sig);        // the signal of the event
        QS_2U8_PRE(QEvt_getPoolNum_(e), e->refCtr_);
    QS_END_PRE()

    // is it a mutable event?
    if (QEvt_getPoolNum_(e) != 0U) {
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fef4 	bl	8005914 <QEvt_getPoolNum_>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <QActive_publish_+0x68>
        // prevent premature recycling of the event while the multicasting
        // is still in progress. At the end of the function, the garbage
        // collector step (QF_gc()) decrements the reference counter and
        // recycles the event if the counter drops to zero. This covers the
        // case when the event was published without any subscribers.
        QEvt_refCtr_inc_(e);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff ff78 	bl	8005a28 <QEvt_refCtr_inc_>
    }

    // make a local, modifiable copy of the subscriber set
    QPSet subscrSet = QActive_subscrList_[sig].set;
 8005b38:	4b3d      	ldr	r3, [pc, #244]	@ (8005c30 <QActive_publish_+0x160>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	8b7b      	ldrh	r3, [r7, #26]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	4413      	add	r3, r2
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	617b      	str	r3, [r7, #20]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8005b46:	f7fe f80b 	bl	8003b60 <vPortExitCritical>

    if (QPSet_notEmpty(&subscrSet)) { // any subscribers?
 8005b4a:	f107 0314 	add.w	r3, r7, #20
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff fefb 	bl	800594a <QPSet_notEmpty>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d05e      	beq.n	8005c18 <QActive_publish_+0x148>
        // highest-prio subscriber
        uint_fast8_t p = QPSet_findMax(&subscrSet);
 8005b5a:	f107 0314 	add.w	r3, r7, #20
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff ff2f 	bl	80059c2 <QPSet_findMax>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24

        QF_CRIT_ENTRY();
 8005b66:	f7fd ffcf 	bl	8003b08 <vPortEnterCritical>
        QF_MEM_SYS();

        QActive *a = QActive_registry_[p];
 8005b6a:	4a32      	ldr	r2, [pc, #200]	@ (8005c34 <QActive_publish_+0x164>)
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b72:	623b      	str	r3, [r7, #32]
        // the AO must be registered with the framework
        Q_ASSERT_INCRIT(210, a != (QActive *)0);
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <QActive_publish_+0xb2>
 8005b7a:	21d2      	movs	r1, #210	@ 0xd2
 8005b7c:	482b      	ldr	r0, [pc, #172]	@ (8005c2c <QActive_publish_+0x15c>)
 8005b7e:	f7fa fc1b 	bl	80003b8 <Q_onError>

        QF_MEM_APP();
        QF_CRIT_EXIT();
 8005b82:	f7fd ffed 	bl	8003b60 <vPortExitCritical>

        QF_SCHED_STAT_
        QF_SCHED_LOCK_(p); // lock the scheduler up to AO's prio
 8005b86:	f7fd f8d9 	bl	8002d3c <vTaskSuspendAll>
        uint_fast8_t lbound = QF_MAX_ACTIVE + 1U; // fixed upper loop bound
 8005b8a:	2321      	movs	r3, #33	@ 0x21
 8005b8c:	61fb      	str	r3, [r7, #28]
        do { // loop over all subscribers
            --lbound;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	61fb      	str	r3, [r7, #28]

            // QACTIVE_POST() asserts internally if the queue overflows
            QACTIVE_POST(a, e, sender);
 8005b94:	2300      	movs	r3, #0
 8005b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	6a38      	ldr	r0, [r7, #32]
 8005b9e:	f7fe faff 	bl	80041a0 <QActive_post_>

            QPSet_remove(&subscrSet, p); // remove the handled subscriber
 8005ba2:	f107 0314 	add.w	r3, r7, #20
 8005ba6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fef4 	bl	8005996 <QPSet_remove>
            if (QPSet_notEmpty(&subscrSet)) {  // still more subscribers?
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fec9 	bl	800594a <QPSet_notEmpty>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d016      	beq.n	8005bec <QActive_publish_+0x11c>
                p = QPSet_findMax(&subscrSet); // highest-prio subscriber
 8005bbe:	f107 0314 	add.w	r3, r7, #20
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fefd 	bl	80059c2 <QPSet_findMax>
 8005bc8:	6278      	str	r0, [r7, #36]	@ 0x24

                QF_CRIT_ENTRY();
 8005bca:	f7fd ff9d 	bl	8003b08 <vPortEnterCritical>
                QF_MEM_SYS();

                a = QActive_registry_[p];
 8005bce:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <QActive_publish_+0x164>)
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd6:	623b      	str	r3, [r7, #32]
                // the AO must be registered with the framework
                Q_ASSERT_INCRIT(220, a != (QActive *)0);
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <QActive_publish_+0x116>
 8005bde:	21dc      	movs	r1, #220	@ 0xdc
 8005be0:	4812      	ldr	r0, [pc, #72]	@ (8005c2c <QActive_publish_+0x15c>)
 8005be2:	f7fa fbe9 	bl	80003b8 <Q_onError>

                QF_MEM_APP();
                QF_CRIT_EXIT();
 8005be6:	f7fd ffbb 	bl	8003b60 <vPortExitCritical>
 8005bea:	e001      	b.n	8005bf0 <QActive_publish_+0x120>
            }
            else {
                p = 0U; // no more subscribers
 8005bec:	2300      	movs	r3, #0
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        } while ((p != 0U) && (lbound > 0U));
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <QActive_publish_+0x12c>
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1c8      	bne.n	8005b8e <QActive_publish_+0xbe>

        QF_CRIT_ENTRY();
 8005bfc:	f7fd ff84 	bl	8003b08 <vPortEnterCritical>
        // NOTE: the following postcondition can only succeed when
        // (lbound > 0), so no extra check for lbound is necessary.
        Q_ENSURE_INCRIT(290, p == 0U); // all subscribers processed
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <QActive_publish_+0x140>
 8005c06:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8005c0a:	4808      	ldr	r0, [pc, #32]	@ (8005c2c <QActive_publish_+0x15c>)
 8005c0c:	f7fa fbd4 	bl	80003b8 <Q_onError>
        QF_CRIT_EXIT();
 8005c10:	f7fd ffa6 	bl	8003b60 <vPortExitCritical>

        QF_SCHED_UNLOCK_(); // unlock the scheduler
 8005c14:	f7fd f8a0 	bl	8002d58 <xTaskResumeAll>

    // The following garbage collection step decrements the reference counter
    // and recycles the event if the counter drops to zero. This covers both
    // cases when the event was published with or without any subscribers.
    #if (QF_MAX_EPOOL > 0U)
    QF_gc(e); // recycle the event to avoid a leak
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff fc8b 	bl	8005534 <QF_gc>
    #endif
}
 8005c1e:	bf00      	nop
 8005c20:	3728      	adds	r7, #40	@ 0x28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	24002684 	.word	0x24002684
 8005c2c:	080063a4 	.word	0x080063a4
 8005c30:	24002680 	.word	0x24002680
 8005c34:	240025a4 	.word	0x240025a4

08005c38 <QActive_subscribe>:

//${QF::QActive::subscribe} ..................................................
//! @protected @memberof QActive
void QActive_subscribe(QActive const * const me,
    enum_t const sig)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
    uint_fast8_t const p = (uint_fast8_t)me->prio;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7b1b      	ldrb	r3, [r3, #12]
 8005c46:	60fb      	str	r3, [r7, #12]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8005c48:	f7fd ff5e 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(300, (Q_USER_SIG <= sig)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	dd11      	ble.n	8005c76 <QActive_subscribe+0x3e>
 8005c52:	4b26      	ldr	r3, [pc, #152]	@ (8005cec <QActive_subscribe+0xb4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	da0c      	bge.n	8005c76 <QActive_subscribe+0x3e>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <QActive_subscribe+0x3e>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d806      	bhi.n	8005c76 <QActive_subscribe+0x3e>
 8005c68:	4a21      	ldr	r2, [pc, #132]	@ (8005cf0 <QActive_subscribe+0xb8>)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d004      	beq.n	8005c80 <QActive_subscribe+0x48>
 8005c76:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005c7a:	481e      	ldr	r0, [pc, #120]	@ (8005cf4 <QActive_subscribe+0xbc>)
 8005c7c:	f7fa fb9c 	bl	80003b8 <Q_onError>
        && (sig < QActive_maxPubSignal_)
        && (0U < p) && (p <= QF_MAX_ACTIVE)
        && (QActive_registry_[p] == me));
    Q_INVARIANT_INCRIT(302,
 8005c80:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf8 <QActive_subscribe+0xc0>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf8 <QActive_subscribe+0xc0>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7ff feb0 	bl	80059fe <QPSet_verify_>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <QActive_subscribe+0x76>
 8005ca4:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8005ca8:	4812      	ldr	r0, [pc, #72]	@ (8005cf4 <QActive_subscribe+0xbc>)
 8005caa:	f7fa fb85 	bl	80003b8 <Q_onError>
        QS_SIG_PRE(sig);  // the signal of this event
        QS_OBJ_PRE(me);   // this active object
    QS_END_PRE()

    // insert the prio. into the subscriber set
    QPSet_insert(&QActive_subscrList_[sig].set, p);
 8005cae:	4b12      	ldr	r3, [pc, #72]	@ (8005cf8 <QActive_subscribe+0xc0>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	68f9      	ldr	r1, [r7, #12]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff fe56 	bl	800596c <QPSet_insert>
    #ifndef Q_UNSAFE
    QPSet_update_(&QActive_subscrList_[sig].set,
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <QActive_subscribe+0xc0>)
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	4618      	mov	r0, r3
                  &QActive_subscrList_[sig].set_dis);
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf8 <QActive_subscribe+0xc0>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4413      	add	r3, r2
    QPSet_update_(&QActive_subscrList_[sig].set,
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f7ff fe80 	bl	80059de <QPSet_update_>
    #endif

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8005cde:	f7fd ff3f 	bl	8003b60 <vPortExitCritical>
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	24002684 	.word	0x24002684
 8005cf0:	240025a4 	.word	0x240025a4
 8005cf4:	080063a4 	.word	0x080063a4
 8005cf8:	24002680 	.word	0x24002680

08005cfc <QActive_ctor>:

//${QF::QActive::ctor} .......................................................
//! @protected @memberof QActive
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
    // clear the whole QActive object, so that the framework can start
    // correctly even if the startup code fails to clear the uninitialized
    // data (as is required by the C Standard).
    QF_bzero_(me, sizeof(*me));
 8005d06:	21ac      	movs	r1, #172	@ 0xac
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff fabb 	bl	8005284 <QF_bzero_>

    // NOTE: QActive inherits the abstract QAsm class, but it calls the
    // constructor of the QHsm subclass. This is because QActive inherits
    // the behavior from the QHsm subclass.
    QHsm_ctor((QHsm *)(me), initial);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fe ff97 	bl	8004c44 <QHsm_ctor>
        &QHsm_isIn_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->super.vptr = &vtable; // hook vptr to QActive vtable
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a02      	ldr	r2, [pc, #8]	@ (8005d24 <QActive_ctor+0x28>)
 8005d1a:	601a      	str	r2, [r3, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	080063b4 	.word	0x080063b4

08005d28 <QActive_register_>:

//$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::register_} ..................................................
//! @private @memberof QActive
void QActive_register_(QActive * const me) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8005d30:	f7fd feea 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    if (me->pthre == 0U) { // preemption-threshold not defined?
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	7b5b      	ldrb	r3, [r3, #13]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <QActive_register_+0x1c>
        me->pthre = me->prio; // apply the default
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7b1a      	ldrb	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	735a      	strb	r2, [r3, #13]
    }

    #ifndef Q_UNSAFE

    Q_REQUIRE_INCRIT(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7b1b      	ldrb	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d011      	beq.n	8005d70 <QActive_register_+0x48>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	7b1b      	ldrb	r3, [r3, #12]
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d80d      	bhi.n	8005d70 <QActive_register_+0x48>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	7b1b      	ldrb	r3, [r3, #12]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4b37      	ldr	r3, [pc, #220]	@ (8005e38 <QActive_register_+0x110>)
 8005d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <QActive_register_+0x48>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	7b1a      	ldrb	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	7b5b      	ldrb	r3, [r3, #13]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d903      	bls.n	8005d78 <QActive_register_+0x50>
 8005d70:	2164      	movs	r1, #100	@ 0x64
 8005d72:	4832      	ldr	r0, [pc, #200]	@ (8005e3c <QActive_register_+0x114>)
 8005d74:	f7fa fb20 	bl	80003b8 <Q_onError>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	7b5b      	ldrb	r3, [r3, #13]
 8005d7c:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	7b5b      	ldrb	r3, [r3, #13]
 8005d82:	73bb      	strb	r3, [r7, #14]

    uint_fast8_t p;
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	7b1b      	ldrb	r3, [r3, #12]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	60bb      	str	r3, [r7, #8]
 8005d8c:	e00f      	b.n	8005dae <QActive_register_+0x86>
        if (QActive_registry_[p] != (QActive *)0) {
 8005d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005e38 <QActive_register_+0x110>)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d006      	beq.n	8005da8 <QActive_register_+0x80>
            prev_thre = QActive_registry_[p]->pthre;
 8005d9a:	4a27      	ldr	r2, [pc, #156]	@ (8005e38 <QActive_register_+0x110>)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da2:	7b5b      	ldrb	r3, [r3, #13]
 8005da4:	73fb      	strb	r3, [r7, #15]
            break;
 8005da6:	e005      	b.n	8005db4 <QActive_register_+0x8c>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ec      	bne.n	8005d8e <QActive_register_+0x66>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	7b1b      	ldrb	r3, [r3, #12]
 8005db8:	3301      	adds	r3, #1
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	e00f      	b.n	8005dde <QActive_register_+0xb6>
        if (QActive_registry_[p] != (QActive *)0) {
 8005dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005e38 <QActive_register_+0x110>)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d006      	beq.n	8005dd8 <QActive_register_+0xb0>
            next_thre = QActive_registry_[p]->pthre;
 8005dca:	4a1b      	ldr	r2, [pc, #108]	@ (8005e38 <QActive_register_+0x110>)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd2:	7b5b      	ldrb	r3, [r3, #13]
 8005dd4:	73bb      	strb	r3, [r7, #14]
            break;
 8005dd6:	e005      	b.n	8005de4 <QActive_register_+0xbc>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d9ec      	bls.n	8005dbe <QActive_register_+0x96>
        }
    }

    Q_ASSERT_INCRIT(190, (prev_thre <= me->pthre)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	7b5b      	ldrb	r3, [r3, #13]
 8005de8:	7bfa      	ldrb	r2, [r7, #15]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d804      	bhi.n	8005df8 <QActive_register_+0xd0>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7b5b      	ldrb	r3, [r3, #13]
 8005df2:	7bba      	ldrb	r2, [r7, #14]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d203      	bcs.n	8005e00 <QActive_register_+0xd8>
 8005df8:	21be      	movs	r1, #190	@ 0xbe
 8005dfa:	4810      	ldr	r0, [pc, #64]	@ (8005e3c <QActive_register_+0x114>)
 8005dfc:	f7fa fadc 	bl	80003b8 <Q_onError>
                          && (me->pthre <= next_thre));

    me->prio_dis  = (uint8_t)(~me->prio);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7b1b      	ldrb	r3, [r3, #12]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    me->pthre_dis = (uint8_t)(~me->pthre);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	7b5b      	ldrb	r3, [r3, #13]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9

    #endif // Q_UNSAFE

    // register the AO at the QF-prio.
    QActive_registry_[me->prio] = me;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7b1b      	ldrb	r3, [r3, #12]
 8005e20:	4619      	mov	r1, r3
 8005e22:	4a05      	ldr	r2, [pc, #20]	@ (8005e38 <QActive_register_+0x110>)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8005e2a:	f7fd fe99 	bl	8003b60 <vPortExitCritical>
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	240025a4 	.word	0x240025a4
 8005e3c:	080063ac 	.word	0x080063ac

08005e40 <QEvt_ctor>:
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
    me->sig     = (QSignal)sig;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	801a      	strh	r2, [r3, #0]
    me->evtTag_ = 0x0FU;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	220f      	movs	r2, #15
 8005e56:	709a      	strb	r2, [r3, #2]
    me->refCtr_ = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	70da      	strb	r2, [r3, #3]
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
    uint8_t rc = me->refCtr_;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	73fb      	strb	r3, [r7, #15]
           && (((me->evtTag_ ^ rc) & 0x0FU) == 0x0FU);
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d80a      	bhi.n	8005e94 <QEvt_verify_+0x2a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	789a      	ldrb	r2, [r3, #2]
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	4053      	eors	r3, r2
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	2b0f      	cmp	r3, #15
 8005e8e:	d101      	bne.n	8005e94 <QEvt_verify_+0x2a>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <QEvt_verify_+0x2c>
 8005e94:	2300      	movs	r3, #0
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	b2db      	uxtb	r3, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8005eb6:	f7fd fe27 	bl	8003b08 <vPortEnterCritical>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <QTimeEvt_ctorX+0x1e>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d004      	beq.n	8005ed0 <QTimeEvt_ctorX+0x28>
 8005ec6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005eca:	4815      	ldr	r0, [pc, #84]	@ (8005f20 <QTimeEvt_ctorX+0x78>)
 8005ecc:	f7fa fa74 	bl	80003b8 <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 8005ed0:	f7fd fe46 	bl	8003b60 <vPortExitCritical>

    QEvt_ctor(&me->super, sig);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ffb1 	bl	8005e40 <QEvt_ctor>

    me->next     = (QTimeEvt *)0;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]
    me->act      = act;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	60da      	str	r2, [r3, #12]
    me->ctr      = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	611a      	str	r2, [r3, #16]
    me->interval = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	619a      	str	r2, [r3, #24]
    me->tickRate = (uint8_t)tickRate;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	771a      	strb	r2, [r3, #28]
    me->flags    = 0U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	775a      	strb	r2, [r3, #29]

    #ifndef Q_UNSAFE
    me->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(me->next);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	43da      	mvns	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	609a      	str	r2, [r3, #8]
    me->ctr_dis  = (QTimeEvtCtr)~me->ctr;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	43da      	mvns	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	615a      	str	r2, [r3, #20]
    #endif // ndef Q_UNSAFE
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	080063c0 	.word	0x080063c0

08005f24 <QTimeEvt_armX>:
//${QF::QTimeEvt::armX} ......................................................
//! @public @memberof QTimeEvt
void QTimeEvt_armX(QTimeEvt * const me,
    uint32_t const nTicks,
    uint32_t const interval)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8005f30:	f7fd fdea 	bl	8003b08 <vPortEnterCritical>
    #elif (QF_TIMEEVT_CTR_SIZE == 2U)
    Q_REQUIRE_INCRIT(400, (nTicks < 0xFFFFU) && (interval < 0xFFFFU));
    #endif

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(401, QEvt_verify_(&me->super));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff ff97 	bl	8005e6a <QEvt_verify_>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d104      	bne.n	8005f4c <QTimeEvt_armX+0x28>
 8005f42:	f240 1191 	movw	r1, #401	@ 0x191
 8005f46:	483f      	ldr	r0, [pc, #252]	@ (8006044 <QTimeEvt_armX+0x120>)
 8005f48:	f7fa fa36 	bl	80003b8 <Q_onError>
    #endif

    QTimeEvtCtr const ctr = me->ctr;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	61fb      	str	r3, [r7, #28]
    uint8_t const tickRate = me->tickRate;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	7f1b      	ldrb	r3, [r3, #28]
 8005f56:	76fb      	strb	r3, [r7, #27]
    #ifdef Q_SPY
    uint_fast8_t const qsId = ((QActive *)(me->act))->prio;
    #endif

    Q_REQUIRE_INCRIT(410,
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <QTimeEvt_armX+0x4e>
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d106      	bne.n	8005f72 <QTimeEvt_armX+0x4e>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <QTimeEvt_armX+0x4e>
 8005f6c:	7efb      	ldrb	r3, [r7, #27]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d004      	beq.n	8005f7c <QTimeEvt_armX+0x58>
 8005f72:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8005f76:	4833      	ldr	r0, [pc, #204]	@ (8006044 <QTimeEvt_armX+0x120>)
 8005f78:	f7fa fa1e 	bl	80003b8 <Q_onError>
        && (ctr == 0U)
        && (me->act != (void *)0)
        && (tickRate < (uint_fast8_t)QF_MAX_TICK_RATE));

    #ifndef Q_UNSAFE
    QTimeEvtCtr const dis = (QTimeEvtCtr)~me->ctr_dis;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	617b      	str	r3, [r7, #20]
    Q_INVARIANT_INCRIT(411, ctr == dis);
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d004      	beq.n	8005f96 <QTimeEvt_armX+0x72>
 8005f8c:	f240 119b 	movw	r1, #411	@ 0x19b
 8005f90:	482c      	ldr	r0, [pc, #176]	@ (8006044 <QTimeEvt_armX+0x120>)
 8005f92:	f7fa fa11 	bl	80003b8 <Q_onError>
    #else
    Q_UNUSED_PAR(ctr);
    #endif // ndef Q_UNSAFE

    me->ctr = (QTimeEvtCtr)nTicks;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	611a      	str	r2, [r3, #16]
    me->interval = (QTimeEvtCtr)interval;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	619a      	str	r2, [r3, #24]
    #ifndef Q_UNSAFE
    me->ctr_dis = (QTimeEvtCtr)~nTicks;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	43da      	mvns	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	615a      	str	r2, [r3, #20]

    // is the time event unlinked?
    // NOTE: For the duration of a single clock tick of the specified tick
    // rate a time event can be disarmed and yet still linked into the list
    // because un-linking is performed exclusively in QTimeEvt_tick_().
    if ((me->flags & QTE_FLAG_IS_LINKED) == 0U) {
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	7f5b      	ldrb	r3, [r3, #29]
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	db40      	blt.n	8006036 <QTimeEvt_armX+0x112>
        me->flags |= QTE_FLAG_IS_LINKED; // mark as linked
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	7f5b      	ldrb	r3, [r3, #29]
 8005fb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	775a      	strb	r2, [r3, #29]
        // armed" list is appended to the main list of armed time events
        // based on QTimeEvt_timeEvtHead_[tickRate].next. Again, this is
        // to keep any changes to the main list exclusively inside the
        // QTimeEvt_tick_().
    #ifndef Q_UNSAFE
        Q_INVARIANT_INCRIT(420,
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d004      	beq.n	8005fdc <QTimeEvt_armX+0xb8>
 8005fd2:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8005fd6:	481b      	ldr	r0, [pc, #108]	@ (8006044 <QTimeEvt_armX+0x120>)
 8005fd8:	f7fa f9ee 	bl	80003b8 <Q_onError>
            Q_PTR2UINT_CAST_(me->next) == (uintptr_t)~me->next_dis);
        Q_INVARIANT_INCRIT(421,
 8005fdc:	7efb      	ldrb	r3, [r7, #27]
 8005fde:	4a1a      	ldr	r2, [pc, #104]	@ (8006048 <QTimeEvt_armX+0x124>)
 8005fe0:	015b      	lsls	r3, r3, #5
 8005fe2:	4413      	add	r3, r2
 8005fe4:	330c      	adds	r3, #12
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	7efb      	ldrb	r3, [r7, #27]
 8005fec:	4a17      	ldr	r2, [pc, #92]	@ (800604c <QTimeEvt_armX+0x128>)
 8005fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	4299      	cmp	r1, r3
 8005ff6:	d004      	beq.n	8006002 <QTimeEvt_armX+0xde>
 8005ff8:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8005ffc:	4811      	ldr	r0, [pc, #68]	@ (8006044 <QTimeEvt_armX+0x120>)
 8005ffe:	f7fa f9db 	bl	80003b8 <Q_onError>
            Q_PTR2UINT_CAST_(QTimeEvt_timeEvtHead_[tickRate].act) ==
                (uintptr_t)(~QTimeEvt_timeEvtHead_dis_[tickRate]));
    #endif
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8006002:	7efb      	ldrb	r3, [r7, #27]
 8006004:	4a10      	ldr	r2, [pc, #64]	@ (8006048 <QTimeEvt_armX+0x124>)
 8006006:	015b      	lsls	r3, r3, #5
 8006008:	4413      	add	r3, r2
 800600a:	330c      	adds	r3, #12
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8006012:	7efb      	ldrb	r3, [r7, #27]
 8006014:	4a0c      	ldr	r2, [pc, #48]	@ (8006048 <QTimeEvt_armX+0x124>)
 8006016:	015b      	lsls	r3, r3, #5
 8006018:	4413      	add	r3, r2
 800601a:	330c      	adds	r3, #12
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
        me->next_dis = (uintptr_t)~Q_PTR2UINT_CAST_(me->next);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	43da      	mvns	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	609a      	str	r2, [r3, #8]
        QTimeEvt_timeEvtHead_dis_[tickRate] = (uintptr_t)~Q_PTR2UINT_CAST_(me);
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	7efb      	ldrb	r3, [r7, #27]
 800602e:	43d2      	mvns	r2, r2
 8006030:	4906      	ldr	r1, [pc, #24]	@ (800604c <QTimeEvt_armX+0x128>)
 8006032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        QS_TEC_PRE(interval); // the interval
        QS_U8_PRE(tickRate);  // tick rate
    QS_END_PRE()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8006036:	f7fd fd93 	bl	8003b60 <vPortExitCritical>
}
 800603a:	bf00      	nop
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	080063c0 	.word	0x080063c0
 8006048:	24002688 	.word	0x24002688
 800604c:	240026a8 	.word	0x240026a8

08006050 <QTimeEvt_disarm>:

//${QF::QTimeEvt::disarm} ....................................................
//! @public @memberof QTimeEvt
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8006058:	f7fd fd56 	bl	8003b08 <vPortEnterCritical>
    QF_MEM_SYS();

    QTimeEvtCtr const ctr = me->ctr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	613b      	str	r3, [r7, #16]

    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(500, QEvt_verify_(&me->super));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff00 	bl	8005e6a <QEvt_verify_>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <QTimeEvt_disarm+0x2a>
 8006070:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8006074:	4819      	ldr	r0, [pc, #100]	@ (80060dc <QTimeEvt_disarm+0x8c>)
 8006076:	f7fa f99f 	bl	80003b8 <Q_onError>
    QTimeEvtCtr const dis = (QTimeEvtCtr)~me->ctr_dis;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	43db      	mvns	r3, r3
 8006080:	60fb      	str	r3, [r7, #12]
    Q_INVARIANT_INCRIT(501, ctr == dis);
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	429a      	cmp	r2, r3
 8006088:	d004      	beq.n	8006094 <QTimeEvt_disarm+0x44>
 800608a:	f240 11f5 	movw	r1, #501	@ 0x1f5
 800608e:	4813      	ldr	r0, [pc, #76]	@ (80060dc <QTimeEvt_disarm+0x8c>)
 8006090:	f7fa f992 	bl	80003b8 <Q_onError>
    uint_fast8_t const qsId = QACTIVE_CAST_(me->act)->prio;
    #endif

    // was the time event actually armed?
    bool wasArmed;
    if (ctr != 0U) {
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d010      	beq.n	80060bc <QTimeEvt_disarm+0x6c>
        wasArmed = true;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
        me->flags |= QTE_FLAG_WAS_DISARMED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7f5b      	ldrb	r3, [r3, #29]
 80060a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	775a      	strb	r2, [r3, #29]
        me->ctr = 0U; // schedule removal from the list
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	611a      	str	r2, [r3, #16]
    #ifndef Q_UNSAFE
        me->ctr_dis = (QTimeEvtCtr)~0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
 80060b8:	615a      	str	r2, [r3, #20]
 80060ba:	e008      	b.n	80060ce <QTimeEvt_disarm+0x7e>
            QS_TEC_PRE(me->interval); // the interval
            QS_U8_PRE(me->tickRate);  // tick rate
        QS_END_PRE()
    }
    else { // the time event was already disarmed automatically
        wasArmed = false;
 80060bc:	2300      	movs	r3, #0
 80060be:	75fb      	strb	r3, [r7, #23]
        me->flags &= (uint8_t)(~QTE_FLAG_WAS_DISARMED & 0xFFU);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	7f5b      	ldrb	r3, [r3, #29]
 80060c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	775a      	strb	r2, [r3, #29]
            QS_U8_PRE(me->tickRate);  // tick rate
        QS_END_PRE()
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80060ce:	f7fd fd47 	bl	8003b60 <vPortExitCritical>

    return wasArmed;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	080063c0 	.word	0x080063c0

080060e0 <QTimeEvt_init>:
    return ctr;
}

//${QF::QTimeEvt::init} ......................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_init(void) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
    for (uint_fast8_t tickRate = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	e016      	b.n	800611a <QTimeEvt_init+0x3a>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	015b      	lsls	r3, r3, #5
 80060f0:	4a0e      	ldr	r2, [pc, #56]	@ (800612c <QTimeEvt_init+0x4c>)
 80060f2:	1898      	adds	r0, r3, r2
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2204      	movs	r2, #4
 80060f8:	2100      	movs	r1, #0
 80060fa:	f7ff fed5 	bl	8005ea8 <QTimeEvt_ctorX>
                       (QActive *)0, Q_USER_SIG, tickRate);
    #ifndef Q_UNSAFE
        QTimeEvt_timeEvtHead_dis_[tickRate] =
            (uintptr_t)~Q_PTR2UINT_CAST_(QTimeEvt_timeEvtHead_[tickRate].act);
 80060fe:	4a0b      	ldr	r2, [pc, #44]	@ (800612c <QTimeEvt_init+0x4c>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	015b      	lsls	r3, r3, #5
 8006104:	4413      	add	r3, r2
 8006106:	330c      	adds	r3, #12
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	43da      	mvns	r2, r3
        QTimeEvt_timeEvtHead_dis_[tickRate] =
 800610c:	4908      	ldr	r1, [pc, #32]	@ (8006130 <QTimeEvt_init+0x50>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         ++tickRate)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3301      	adds	r3, #1
 8006118:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0e5      	beq.n	80060ec <QTimeEvt_init+0xc>
    #endif
    }
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	24002688 	.word	0x24002688
 8006130:	240026a8 	.word	0x240026a8

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <__libc_init_array>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4d0d      	ldr	r5, [pc, #52]	@ (800617c <__libc_init_array+0x38>)
 8006148:	4c0d      	ldr	r4, [pc, #52]	@ (8006180 <__libc_init_array+0x3c>)
 800614a:	1b64      	subs	r4, r4, r5
 800614c:	10a4      	asrs	r4, r4, #2
 800614e:	2600      	movs	r6, #0
 8006150:	42a6      	cmp	r6, r4
 8006152:	d109      	bne.n	8006168 <__libc_init_array+0x24>
 8006154:	4d0b      	ldr	r5, [pc, #44]	@ (8006184 <__libc_init_array+0x40>)
 8006156:	4c0c      	ldr	r4, [pc, #48]	@ (8006188 <__libc_init_array+0x44>)
 8006158:	f000 f826 	bl	80061a8 <_init>
 800615c:	1b64      	subs	r4, r4, r5
 800615e:	10a4      	asrs	r4, r4, #2
 8006160:	2600      	movs	r6, #0
 8006162:	42a6      	cmp	r6, r4
 8006164:	d105      	bne.n	8006172 <__libc_init_array+0x2e>
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	f855 3b04 	ldr.w	r3, [r5], #4
 800616c:	4798      	blx	r3
 800616e:	3601      	adds	r6, #1
 8006170:	e7ee      	b.n	8006150 <__libc_init_array+0xc>
 8006172:	f855 3b04 	ldr.w	r3, [r5], #4
 8006176:	4798      	blx	r3
 8006178:	3601      	adds	r6, #1
 800617a:	e7f2      	b.n	8006162 <__libc_init_array+0x1e>
 800617c:	080063c8 	.word	0x080063c8
 8006180:	080063c8 	.word	0x080063c8
 8006184:	080063c8 	.word	0x080063c8
 8006188:	080063cc 	.word	0x080063cc

0800618c <memcpy>:
 800618c:	440a      	add	r2, r1
 800618e:	4291      	cmp	r1, r2
 8006190:	f100 33ff 	add.w	r3, r0, #4294967295
 8006194:	d100      	bne.n	8006198 <memcpy+0xc>
 8006196:	4770      	bx	lr
 8006198:	b510      	push	{r4, lr}
 800619a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a2:	4291      	cmp	r1, r2
 80061a4:	d1f9      	bne.n	800619a <memcpy+0xe>
 80061a6:	bd10      	pop	{r4, pc}

080061a8 <_init>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	bf00      	nop
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr

080061b4 <_fini>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	bf00      	nop
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr
